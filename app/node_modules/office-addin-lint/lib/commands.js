"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.lint = lint;
exports.lintFix = lintFix;
exports.prettier = prettier;
const office_addin_usage_data_1 = require("office-addin-usage-data");
const defaults = __importStar(require("./defaults"));
const lint_1 = require("./lint");
const defaults_1 = require("./defaults");
/* global process */
/**
 * Determines path to files to run lint against. Priority order follows:
 * 1 --files option passed through cli
 * 2 lint_files config property in package.json
 * 3 default location
 * @param command command options which can contain files
 */
function getPathToFiles(options) {
    const pathToFiles = options.files
        ? options.files
        : process.env.npm_package_config_lint_files;
    return pathToFiles ? pathToFiles : defaults.lintFiles;
}
function lint(options) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const pathToFiles = getPathToFiles(options);
            const useTestConfig = options.test;
            yield (0, lint_1.performLintCheck)(pathToFiles, useTestConfig);
            defaults_1.usageDataObject.reportSuccess("lint");
        }
        catch (err) {
            if (typeof err.status == "number") {
                process.exitCode = err.status;
            }
            else {
                process.exitCode = defaults.ESLintExitCode.CommandFailed;
                defaults_1.usageDataObject.reportException("lint", err);
                (0, office_addin_usage_data_1.logErrorMessage)(err);
            }
        }
    });
}
function lintFix(options) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const pathToFiles = getPathToFiles(options);
            const useTestConfig = options.test;
            yield (0, lint_1.performLintFix)(pathToFiles, useTestConfig);
            defaults_1.usageDataObject.reportSuccess("lintFix");
        }
        catch (err) {
            if (typeof err.status == "number") {
                process.exitCode = err.status;
            }
            else {
                process.exitCode = defaults.ESLintExitCode.CommandFailed;
                defaults_1.usageDataObject.reportException("lintFix", err);
                (0, office_addin_usage_data_1.logErrorMessage)(err);
            }
        }
    });
}
function prettier(options) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const pathToFiles = getPathToFiles(options);
            yield (0, lint_1.makeFilesPrettier)(pathToFiles);
            defaults_1.usageDataObject.reportSuccess("prettier");
        }
        catch (err) {
            if (typeof err.status == "number") {
                process.exitCode = err.status;
            }
            else {
                process.exitCode = defaults.PrettierExitCode.CommandFailed;
                defaults_1.usageDataObject.reportException("prettier", err);
                (0, office_addin_usage_data_1.logErrorMessage)(err);
            }
        }
    });
}
//# sourceMappingURL=commands.js.map