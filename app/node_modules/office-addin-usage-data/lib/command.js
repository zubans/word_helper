"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.turnUsageDataOn = exports.turnUsageDataOff = exports.listUsageDataSettings = void 0;
const defaults = __importStar(require("./defaults"));
const usageData_1 = require("./usageData");
const jsonData = __importStar(require("./usageDataSettings"));
/* global console */
function listUsageDataSettings() {
    const usageDataSettings = jsonData.readUsageDataSettings(defaults.groupName);
    if (usageDataSettings) {
        for (const value of Object.keys(usageDataSettings)) {
            console.log(`${value}: ${usageDataSettings[value]}\n`);
        }
    }
    else {
        console.log(`No usage data settings.`);
    }
}
exports.listUsageDataSettings = listUsageDataSettings;
function turnUsageDataOff() {
    setUsageDataLevel(usageData_1.UsageDataLevel.off);
}
exports.turnUsageDataOff = turnUsageDataOff;
function turnUsageDataOn() {
    setUsageDataLevel(usageData_1.UsageDataLevel.on);
}
exports.turnUsageDataOn = turnUsageDataOn;
function setUsageDataLevel(level) {
    try {
        jsonData.modifyUsageDataJsonData(defaults.groupName, "usageDataLevel", level);
        switch (level) {
            case usageData_1.UsageDataLevel.off:
                console.log("Usage data has been turned off.");
                break;
            case usageData_1.UsageDataLevel.on:
                console.log("Usage data has been turned on.");
                break;
        }
    }
    catch (err) {
        throw new Error(`Unable to set the usage data level.\n${err}`);
    }
}
//# sourceMappingURL=command.js.map