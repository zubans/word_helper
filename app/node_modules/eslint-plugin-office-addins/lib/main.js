"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const rules_1 = __importDefault(require("./rules"));
const parser_1 = __importDefault(require("@typescript-eslint/parser"));
const eslint_plugin_1 = __importDefault(require("@typescript-eslint/eslint-plugin"));
const eslint_plugin_prettier_1 = __importDefault(require("eslint-plugin-prettier"));
const eslint_plugin_react_1 = __importDefault(require("eslint-plugin-react"));
const js_1 = __importDefault(require("@eslint/js"));
const eslint_config_prettier_1 = __importDefault(require("eslint-config-prettier"));
// eslint-disable-next-line @typescript-eslint/no-require-imports
const reactnativeplugin = require("eslint-plugin-react-native");
const plugin = {
    meta: {
        name: "eslint-plugin-office-addins",
        version: "5.0.0",
    },
    rules: rules_1.default,
    configs: {},
};
const recommended = [
    js_1.default.configs.recommended,
    eslint_config_prettier_1.default,
    {
        files: ["**/*.{js,mjs,cjs,ts,cts,mts}"],
        plugins: {
            "@typescript-eslint": eslint_plugin_1.default,
            "office-addins": plugin,
            prettier: eslint_plugin_prettier_1.default,
        },
        languageOptions: {
            parser: parser_1.default,
            ecmaVersion: 6,
            sourceType: "module",
            parserOptions: {
                ecmaFeatures: {
                    jsx: true,
                },
            },
        },
        rules: {
            "@typescript-eslint/no-unused-vars": "error",
            "no-delete-var": "warn",
            "no-eval": "error",
            "no-inner-declarations": "warn",
            "no-octal": "warn",
            "no-unused-vars": "off",
            "office-addins/call-sync-after-load": "error",
            "office-addins/call-sync-before-read": "error",
            "office-addins/load-object-before-read": "error",
            "office-addins/no-context-sync-in-loop": "warn",
            "office-addins/no-empty-load": "warn",
            "office-addins/no-navigational-load": "warn",
            "office-addins/no-office-initialize": "warn",
            "office-addins/test-for-null-using-isNullObject": "error",
            "prettier/prettier": ["error", { endOfLine: "auto" }],
        },
    },
];
const react = [
    eslint_plugin_react_1.default.configs.flat.recommended,
    ...recommended,
    {
        plugins: {
            "office-addins": plugin,
            react: eslint_plugin_react_1.default,
        },
        settings: {
            react: {
                version: "detect",
            },
        },
    },
];
const reactnative = [
    reactnativeplugin.configs.all,
    ...recommended,
    {
        plugins: {
            "office-addins": plugin,
            react: reactnativeplugin,
        },
        settings: {
            react: {
                version: "detect",
            },
        },
    },
];
const test = [
    ...recommended,
    {
        plugins: {
            "office-addins": plugin,
        },
        rules: {},
    },
];
Object.assign(plugin.configs, {
    recommended,
    react,
    reactnative,
    test,
});
module.exports = plugin;
//# sourceMappingURL=main.js.map