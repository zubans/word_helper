{"version":3,"file":"converter.js","sourceRoot":"","sources":["../src/converter.ts"],"names":[],"mappings":"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","sourcesContent":["import { OSF } from \"../lib/osfmos\";\nimport { Constants } from \"./constants\";\nimport { ConversionContext } from \"./conversionContext\";\nimport { IconBuilder } from \"./iconBuilder\";\nimport { LocaleBuilder } from \"./localeBuilder\";\nimport * as MOS from \"./mosManifest\";\nimport { MosManifest } from \"./mosManifest\";\nimport { Utilities } from \"./utilities\";\n\nimport * as util from \"util\";\nconst { Utils } = require(\"./osfUtils\");\n\nUtils.OverrideMethods();\n\nexport enum RuntimeSource {\n  DefaultSettingSourceLocations = \"DefaultSettingsSourceLocations\",\n  ExecuteFunction = \"ExecuteFunction\",\n  LaunchEvent = \"LaunchEvent\",\n  SharedRuntimes = \"SharedRuntimes\",\n  ShowTaskpane = \"ShowTaskpane\",\n  ReportPhishing = \"ReportPhishing\"\n}\n\n// Should be synced with the RuntimeLifeTime enum in shared_src\\runtime\\Utilities\\WAC\\OSFManifest.ts\nexport enum InputRuntimeLifeTime {\n  Short = 0,\n  Long,\n}\n\nexport enum ResourceType {\n  AllLocaleImages = \"AllLocaleImages\",\n  AllLocaleUrls = \"AllLocaleUrls\",\n  AllLocaleLongStrings = \"AllLocaleLongStrings\",\n  AllLocaleShortStrings = \"AllLocaleShortStrings\",\n}\n\nexport enum CommandSurfaceType {\n  None = \"None\",\n  Ribbon = \"Ribbon\",\n  ContextMenu = \"ContextMenu\",\n}\n\n// The legacy manifest contains Actions in different places.  The actions operate within the context of a webpage.  In\n// the new meta os manifest, these different urls are broken up into different \"runtimes\".  In order to implement this\n// translation, we make two passes over the manifest:  One pass to collect all the different possible runtimes.  Such an\n// occurence is stored as a \"RuntimeRecords\".  These records are later consolidated into a set of runtimes in the new manifest.\nexport class RuntimeRecord {\n  _resource: string;\n  _localeResources: {};\n  _lifetime: MOS.RuntimesLifetime = MOS.RuntimesLifetime.Short;\n  _isResId: boolean;\n  _isCapabilitiesSorted: boolean = false;\n  _requirements: MOS.RequirementsExtensionElement;\n  _source: RuntimeSource;\n  _manifestHostType: OSF.ManifestHostType; // workbook, presentation, document etc.\n  _versionOverrideCapabilities: MOS.Capabilities[];\n  _versionOverridesNumber: OSF.VersionOverridesNumber; // the version override that this runtime record came from.  If it came from the main <OfficeApp> then it is null.\n  _scriptResId: string = null;\n  _inputFormFactor: string = null;\n\n  constructor() {}\n\n  sortCapabilities() {\n    if (!this._isCapabilitiesSorted && !Utilities.isNullOrUndefined(this._versionOverrideCapabilities)) {\n      Converter._sortCapabilitiesAlphabatically(this._versionOverrideCapabilities);\n      this._isCapabilitiesSorted = true;\n    }\n  }\n\n  getKey() {\n    return Converter._generateRuntimeLookupKey(this._resource,\n      this._lifetime,\n      this._versionOverrideCapabilities,\n      this._inputFormFactor,\n      this._source);\n  }\n}\n\nexport class Converter {\n  private _addedExecuteFunctions: Object;\n  private _mosManifest: MosManifest;\n  private _xmlManifest: OSF.Manifest.OfficeAppManifest;\n  private _localeBuilder: LocaleBuilder;\n  private _iconBuilder: IconBuilder;\n  private _runtimeLookup: Object;\n  private _uniqueSuffix: number;\n  private _uniqueRuntimeSuffix: number;\n  private _uniqueActionSuffix: number;\n  private _uniqueViewSuffix: number;\n\n  constructor(inputXml: string, locale: string) {\n    this._mosManifest = new MosManifest();\n    this._xmlManifest = new OSF.Manifest.OfficeAppManifest(inputXml, locale, Utilities.getVerbosity());\n    this._localeBuilder = new LocaleBuilder();\n    this._iconBuilder = new IconBuilder();\n    this._uniqueSuffix = 0;\n    this._uniqueRuntimeSuffix = 0;\n    this._uniqueActionSuffix = 0;\n    this._uniqueViewSuffix = 0;\n    this._runtimeLookup = {};\n    this._addedExecuteFunctions = {};\n  }\n\n  getMosManifest(): MosManifest {\n    return this._mosManifest;\n  }\n\n  getLocaleBuilder(): LocaleBuilder {\n    return this._localeBuilder;\n  }\n\n  convert(): void {\n    let context: ConversionContext = new ConversionContext();\n    this._populateRoot(context);\n  }\n\n  async downloadAndStoreIcons(folderPath: string) {\n    // Now download all the icons and store them in the package directory\n    await this._iconBuilder.downloadAndStoreIcons(folderPath);\n  }\n\n  private getNextUniqueSuffix(): number {\n    return ++this._uniqueSuffix;\n  }\n\n  private getNextRuntimeSuffix(): number {\n    return ++this._uniqueRuntimeSuffix;\n  }\n\n  private getNextActionSuffix(): number {\n    return ++this._uniqueActionSuffix;\n  }\n\n  private getNextViewSuffix(): number {\n    return ++this._uniqueViewSuffix;\n  }\n\n  private _populateRoot(context: ConversionContext): void {\n    // Parts relevant to the legacy Office manifest\n\n    // Use this line to reference devpreview schema\n    // this._mosManifest.$schema = Constants.MosManifestSchemaVersionDevPreview;\n\n    // Use this line to reference devpreview schema\n    // this._mosManifest.manifestVersion = MOSMosManifestManifestVersion.DevPreview;\n\n    // Use this line to reference GA schema\n    this._mosManifest.$schema = Constants.MosManifestSchemaVersionGA;\n\n    // If the schema name has been overridden on the command line then\n    // we override it with this value.\n    if (!Utilities.isNullOrUndefined(Utilities._schemaOverride)) {\n      this._mosManifest.$schema = Utilities._schemaOverride;\n    }\n\n    // Use this line to reference the GA schema version that is currently being used\n    this._mosManifest.manifestVersion = Constants.MosManifestGAVersion_1_17;\n\n    // If the schema version name has been overridden on the command line then\n    // we override it with this value.\n    if (!Utilities.isNullOrUndefined(Utilities._schemaVersionOverride)) {\n      this._mosManifest.manifestVersion = Utilities._schemaVersionOverride;\n    }\n\n    this._mosManifest.id = this._xmlManifest.getMarketplaceID();\n    this._mosManifest.version = Converter._fixVersionFormat(this._xmlManifest.getMarketplaceVersion());\n\n    this._populateRootName();\n    this._populateRootDescription();\n    this._populateRootIcons();\n    this._mosManifest.accentColor = Constants.DefaultAccessColor; // there is no accent color in the legacy manifest\n    this._populateDeveloper();\n    this._populateLocalizationInfo();\n    this._populateRootPermissions();\n    this._populateRootDevicePermissions();\n    this._populateAuthorization();\n    this._populateWebApplicationInfos();\n    this._populateExtension(context);\n    this._populateRootRequirements();\n    this._populateValidDomains();\n\n    // Not present in legacy Office manifest\n    this._populateStaticTabs();\n    this._populateComposeExtensions();\n    this._populateGraphConnector();\n    this._populateConfigurableTabs();\n    this._populateBots();\n    this._populateConnectors();\n    this._populateActivities();\n    this._populateMeetingExtensionDefinition();\n    this._populateSubscriptionOffer();\n    this._populateShowLoadingIndicator();\n    this._populateIsFullScreen();\n    this._populateConfigurableProperties();\n    this._populateDefaultBlockUntilAdminAction();\n    this._populatePublisherDocsUrl();\n    this._populateDefaultInstallScope();\n    this._populateDefaultGroupCapability();\n  }\n\n  private _populateRootName(): void {\n    let name: MOS.Name = new MOS.Name();\n\n    // Populate the default language display name in the body of the manifest\n    name.short = Utilities.getLimitedString(\n      this._xmlManifest.getDefaultDisplayName(),\n      Constants.MaxResourceStringLength30,\n      \"name.short truncated to %d characters\",\n    );\n\n    name.full = Utilities.getLimitedString(\n      this._xmlManifest.getDefaultDisplayName(),\n      Constants.MaxResourceStringLength100,\n      \"name.full truncated to %d characters\",\n    ); // no long name in legacy manifest\n\n    // Populate resources for other languages of display names\n    // The \"seen locales\" are all the different locales that were seen during parsing of the xml manifest but there is not necessarily\n    // a resource for every language for every property.\n    this._populateLocaleSensitiveProperty(this._xmlManifest.getDisplayName, Constants.MosNameShort, null);\n    this._populateLocaleSensitiveProperty(this._xmlManifest.getDisplayName, Constants.MosNameFull, null);\n\n    this._mosManifest.name = name;\n  }\n\n  private _populateRootDescription(): void {\n    let description: MOS.Description = new MOS.Description();\n\n    let legacyDescription: string = this._xmlManifest.getDefaultDescription();\n\n    if (!Utilities.isNullOrUndefined(legacyDescription)) {\n      description.short = Utilities.getLimitedString(\n        legacyDescription,\n        Constants.MaxResourceStringLength80,\n        \"description.short truncated to %d characters\",\n      );\n\n      description.full = legacyDescription; // no full description in legacy manifest\n    }\n\n    this._populateLocaleSensitiveProperty(\n      this._xmlManifest.getDescription,\n      Constants.MosDescriptionShort,\n      Constants.MaxResourceStringLength80,\n    );\n    this._populateLocaleSensitiveProperty(\n      this._xmlManifest.getDescription,\n      Constants.MosDescriptionFull,\n      Constants.MaxResourceStringLength4000,\n    );\n    this._mosManifest.description = description;\n  }\n\n  private _populateRootIcons(): void {\n    let icons: MOS.Icons = new MOS.Icons();\n\n    const defaultLocale: string = this._xmlManifest.getDefaultLocale();\n\n    let defaultIconUrl: string = this._xmlManifest.getIconUrl(defaultLocale);\n    if (Utilities.isNullOrUndefined(defaultIconUrl)) {\n      defaultIconUrl = this._xmlManifest.getDefaultIconUrl();\n    }\n\n    if (Utilities.isNullOrUndefined(defaultIconUrl)) {\n      defaultIconUrl = Constants.IconsOutline + \".png\";\n    }\n\n    icons.outline = this._iconBuilder.addIconAndGetReference(\n      defaultIconUrl,\n      true /* getShortNameAndStore */,\n      true /* forRootIcon */,\n    );\n\n    let defaultHighResolutionIconUrl: string = this._xmlManifest.getHighResolutionIconUrl(defaultLocale);\n\n    if (Utilities.isNullOrUndefined(defaultHighResolutionIconUrl)) {\n      defaultHighResolutionIconUrl = this._xmlManifest.getDefaultHighResolutionIconUrl();\n    }\n\n    if (Utilities.isNullOrUndefined(defaultHighResolutionIconUrl)) {\n      defaultHighResolutionIconUrl = Constants.IconsColor + \".png\";\n    }\n\n    icons.color = this._iconBuilder.addIconAndGetReference(\n      defaultHighResolutionIconUrl,\n      true /* getShortNameAndStore */,\n      true /* forRootIcon */,\n    );\n\n    this._mosManifest.icons = icons;\n  }\n\n  private _populateDeveloper(): void {\n    let developer: MOS.Developer = new MOS.Developer();\n\n    developer.name = Utilities.getLimitedString(\n      this._xmlManifest.getProviderName(),\n      Constants.MaxResourceStringLength32,\n      \"developer.name truncated to %d characters\",\n    );\n\n    developer.mpnId = undefined; // Not present in legacy manifest\n    let supportUrl: string =\n      this._xmlManifest.getSupportUrl(this._xmlManifest.getDefaultLocale()) || Constants.DefaultDeveloperUrl;\n\n    // The legacy xml manifest only has <SupportUrl> while the metaos manifest has these three urls in the developer section.\n    // We currently use the support url for all three since there is no exact mapping.\n    Utilities.log(\n      \"Using <SupportUrl> from legacy manifest to populate developer.privacyUrl, developer.termsOfUseUrl and developer.websiteUrl in metaos manifest.\",\n    );\n    developer.privacyUrl = supportUrl;\n    developer.termsOfUseUrl = supportUrl;\n    developer.websiteUrl = supportUrl;\n\n    this._mosManifest.developer = developer;\n  }\n\n  private _populateLocalizationInfo(): void {\n    let localizationInfo: MOS.LocalizationInfo = new MOS.LocalizationInfo();\n    localizationInfo.defaultLanguageTag = LocaleBuilder.fixLocaleCasing(this._xmlManifest.getDefaultLocale());\n\n    for (let seenLocale in this._xmlManifest.getLocalesSeen()) {\n      if (seenLocale != localizationInfo.defaultLanguageTag) {\n        let additionalLanguages: MOS.AdditionalLanguages = new MOS.AdditionalLanguages();\n        additionalLanguages.languageTag = seenLocale;\n        additionalLanguages.file = Utilities.createLocaleFileName(seenLocale);\n\n        if (Utilities.isNullOrUndefined(localizationInfo.additionalLanguages)) {\n          localizationInfo.additionalLanguages = [];\n        }\n\n        localizationInfo.additionalLanguages.push(additionalLanguages);\n      }\n    }\n\n    this._mosManifest.localizationInfo = localizationInfo;\n  }\n\n  private _populateWebApplicationInfos(): void {\n    this._populateWebApplicationInfoFromContentAndTaskpane();\n    this._populateWebApplicationInfoFromMailbox();\n  }\n\n  // Handles getting the webapplicationinfo from the MailHost manifests\n  private _populateWebApplicationInfoFromMailbox(): void {\n    let overrideIndexes: string[] = this._getMailHostOverrides();\n\n    let mosWebApplicationInfo: MOS.WebApplicationInfo = new MOS.WebApplicationInfo();\n\n    for (let overrideIndex of overrideIndexes) {\n      let webApplicationInfo: Object =\n        this._xmlManifest._versionOverrides[Constants.InputMailHost]?.[overrideIndex]?._webApplicationInfo;\n\n      // If there is no information in the webApplicationInfo then there is nothing to convert\n      if (\n        Utilities.isNullOrUndefined(webApplicationInfo) ||\n        (Utilities.isNullOrUndefined(webApplicationInfo[\"_webApplicationId\"]) &&\n          Utilities.isNullOrUndefined(webApplicationInfo[\"_webApplicationResource\"]))\n      ) {\n        continue;\n      }\n\n      mosWebApplicationInfo.id = webApplicationInfo[\"_webApplicationId\"];\n      mosWebApplicationInfo.resource = webApplicationInfo[\"_webApplicationResource\"];\n\n      if (Utilities.isNullOrUndefined(this._mosManifest.webApplicationInfo)) {\n        this._mosManifest.webApplicationInfo = mosWebApplicationInfo;\n      } else {\n        // If this._mosManifest.webApplicationInfo has been set before then it could have been set by another\n        // MailHost version override or it could have been set by a TaskPane app processed before these.\n        // Currently the metaos schema only supports one single webapplicationinfo but the legacy\n        // schema can have different ones for different override versions.\n        // TODO: https://office.visualstudio.com/OC/_workitems/edit/6224818/\n        Utilities.logError(\n          \"MetaOS schema currently only supports one webapplicationInfo but we have found more than one in this manifest MailHost override: \" +\n            overrideIndex +\n            \". \" +\n            \" app: \" +\n            this._xmlManifest.getDisplayName(this._xmlManifest.getDefaultLocale()) +\n            \" WI:6224818\",\n        );\n        return;\n      }\n    }\n  }\n\n  // handles getting the webapplicationinfo from Content and Taskpane manifests\n  private _populateWebApplicationInfoFromContentAndTaskpane(): void {\n    // Currently the metaos schema only supports one single webapplicationinfo but the legacy\n    // schema can have different ones for different override versions.\n    // TODO: https://office.visualstudio.com/OC/_workitems/edit/6224818/\n    let mosWebApplicationInfo: MOS.WebApplicationInfo = new MOS.WebApplicationInfo();\n    let shouldBeAdded: boolean = false;\n\n    if (!Utilities.isNullOrUndefined(this._xmlManifest.getWebApplicationId())) {\n      mosWebApplicationInfo.id = this._xmlManifest.getWebApplicationId();\n      shouldBeAdded = true;\n    }\n\n    if (!Utilities.isNullOrUndefined(this._xmlManifest.getWebApplicationResource())) {\n      mosWebApplicationInfo.resource = this._xmlManifest.getWebApplicationResource();\n      shouldBeAdded = true;\n    }\n\n    if (shouldBeAdded) {\n      this._mosManifest.webApplicationInfo = mosWebApplicationInfo;\n    }\n  }\n\n  private _populateRootPermissions(): void {\n    // TODO: Not present in legacy manifest\n  }\n\n  private _populateRootDevicePermissions(): void {\n    // TODO: Not present in legacy manifest\n  }\n\n  private _populateAuthorization(): void {\n    // Currently the metaos schema only supports one single authorization but the legacy\n    // schema can have different ones for different override versions.\n    // TODO: https://office.visualstudio.com/OC/_workitems/edit/6224818/\n    let mosAuthorization: MOS.Authorization = new MOS.Authorization();\n\n    let permissions: any = this._xmlManifest.getPermission();\n\n    let mosPermissions: MOS.Permissions2 = null;\n\n    if (!Utilities.isNullOrUndefined(permissions)) {\n      mosPermissions = new MOS.Permissions2();\n      mosPermissions.resourceSpecific = [];\n      let mosResourceSpecific: MOS.ResourceSpecific = new MOS.ResourceSpecific();\n      mosResourceSpecific.name = Converter._mosPermissionfromXmlPermission(permissions, this._xmlManifest._target);\n      mosResourceSpecific.type = MOS.ResourceSpecificType.Delegated;\n      mosPermissions.resourceSpecific.push(mosResourceSpecific);\n      mosAuthorization.permissions = mosPermissions;\n    }\n\n    // Now also handle the <ExtendedPermissions> if present\n    // These only apply to VersionOverride 1.1 for Mail/Outlook Apps\n    let extendedPermissions: string[] = this._xmlManifest.getExtendedPermissions(OSF.VersionOverridesNumber.V1_1);\n\n    if (!Utilities.isNullOrUndefined(extendedPermissions) && extendedPermissions.length > 0) {\n      for (let perm of extendedPermissions) {\n        if (perm === Constants.InputAppendOnSend) {\n          if (Utilities.isNullOrUndefined(mosPermissions)) {\n            mosPermissions = new MOS.Permissions2();\n            mosPermissions.resourceSpecific = [];\n          }\n\n          // Now create the permission for MailboxItem.AppendOnSend.User in the metaos manifest and add it\n          let mosResourceSpecific: MOS.ResourceSpecific = new MOS.ResourceSpecific();\n          mosResourceSpecific.name = Constants.MailboxItemAppendOnSendUser;\n          mosResourceSpecific.type = MOS.ResourceSpecificType.Delegated;\n          mosPermissions.resourceSpecific.push(mosResourceSpecific);\n          mosAuthorization.permissions = mosPermissions;\n        } else {\n          Utilities.logWarning(\"Ignoring unsupported ExtendedPermission: %s\", perm);\n        }\n      }\n    }\n\n    // Now look for SupportsSharedFolders\n    // SupportsSharedFolders is only supported in VersionOverride 1.1\n    let supportsSharedFolders: boolean = this._xmlManifest.getSupportsSharedFolders(\n      OSF.VersionOverridesNumber.V1_1,\n      Constants.InputDesktopFormFactor,\n    );\n\n    if (supportsSharedFolders) {\n      if (Utilities.isNullOrUndefined(mosPermissions)) {\n        mosPermissions = new MOS.Permissions2();\n        mosPermissions.resourceSpecific = [];\n      }\n\n      // Now create the permission for Mailbox.AccessSharedFolders.User in the metaos manifest and add it\n      let mosResourceSpecific: MOS.ResourceSpecific = new MOS.ResourceSpecific();\n      mosResourceSpecific.name = Constants.MailboxAccessSharedFoldersUser;\n      mosResourceSpecific.type = MOS.ResourceSpecificType.Delegated;\n      mosPermissions.resourceSpecific.push(mosResourceSpecific);\n      mosAuthorization.permissions = mosPermissions;\n    }\n\n    if (!Utilities.isNullOrUndefined(mosPermissions)) {\n      this._mosManifest.authorization = mosAuthorization;\n    }\n  }\n\n  private _populateExtension(context: ConversionContext): void {\n    let extension: MOS.Extensions = new MOS.Extensions();\n\n    this._populateAlternates(extension);\n    this._populateContextMenus(extension);\n    this._populateGetStartedMessages(context, extension);\n    this._populateKeyboards(extension);\n    this._populateExtensionRequirements(extension);\n    this._populateRuntimes(context, extension);\n    this._populateRibbonsAndContextMenus(context, extension);\n    this._populateAutoRunEvents(context, extension);\n    this._populateFormSettings(extension);\n\n    if (Utilities.isNullOrUndefined(this._mosManifest.extensions)) {\n      this._mosManifest.extensions = [];\n    }\n\n    this._addRuntimeActionLocalizedDisplayNames(extension.runtimes);\n    this._mosManifest.extensions.push(extension);\n  }\n\n  private _populateAlternates(extension: MOS.Extensions): void {\n    let alternates: MOS.Alternates[] = [];\n\n    let defaultLocale: string = this._xmlManifest.getDefaultLocale();\n    let iconUrl: string = this._xmlManifest.getDefaultIconUrl();\n    let highResolutionIconUrl: string = this._xmlManifest.getHighResolutionIconUrl(defaultLocale);\n\n    // Now ensure that the alternate icons section added\n    if (!Utilities.isNullOrUndefined(iconUrl) || !Utilities.isNullOrUndefined(highResolutionIconUrl)) {\n      let alternate: MOS.Alternates = new MOS.Alternates();\n      alternate.alternateIcons = new MOS.AlternateIcons();\n\n      if (!Utilities.isNullOrUndefined(iconUrl)) {\n        alternate.alternateIcons.icon.url = iconUrl;\n        let iconSize: number = Constants.LegacyWXPAppIconSize;\n\n        if (this._xmlManifest._hostType && this._xmlManifest.getTarget() == OSF.OfficeAppType.MailApp) {\n          iconSize = Constants.LegacyMailAppIconSize;\n        }\n\n        alternate.alternateIcons.icon.size = iconSize;\n\n        for (let seenLocale in this._xmlManifest.getLocalesSeen()) {\n          // skip the defaule since it is set in the main body of the manifest\n          if (seenLocale !== defaultLocale) {\n            const locIconUrl: string = this._xmlManifest.getIconUrl(seenLocale);\n            let formattedValue: string = Converter._formatResourceStringWithVariableNumberParameters(\n              Constants.AlternatesIconUrl,\n              alternates.length,\n            );\n            this._localeBuilder.addLocaleString(seenLocale, formattedValue, locIconUrl);\n          }\n        }\n      }\n\n      if (!Utilities.isNullOrUndefined(highResolutionIconUrl)) {\n        alternate.alternateIcons.highResolutionIcon.url = highResolutionIconUrl;\n        let highResolutionIconSize: number = Constants.LegacyWXPAppHighResolutionIconSize;\n\n        // 8856256 - This needs to be fixed after the 128 size is included or alternate icons structure is changed\n        //if (this._xmlManifest._hostType && this._xmlManifest.getTarget() == OSF.OfficeAppType.MailApp) {\n        //    highResolutionIconSize = Constants.LegacyMailAppHighResolutionIconSize;\n        //}\n\n        alternate.alternateIcons.highResolutionIcon.size = highResolutionIconSize;\n\n        for (let seenLocale in this._xmlManifest.getLocalesSeen()) {\n          // skip the defaule since it is set in the main body of the manifest\n          if (seenLocale !== defaultLocale) {\n            const locHighResolutionIconUrl: string = this._xmlManifest.getHighResolutionIconUrl(seenLocale);\n            let formattedValue: string = Converter._formatResourceStringWithVariableNumberParameters(\n              Constants.AlternatesHighResolutionIconUrl,\n              alternates.length,\n            );\n            this._localeBuilder.addLocaleString(seenLocale, formattedValue, locHighResolutionIconUrl);\n          }\n        }\n      }\n\n      alternates.push(alternate);\n    }\n\n    // Now look for equivalent addins and add them as alternates if present\n    let equivalentAddins: OSF.Manifest.EquivalentAddin[] = this._xmlManifest.getEquivalentAddins();\n    if (!Utilities.isNullOrUndefined(equivalentAddins) && equivalentAddins.length > 0) {\n      for (const equivalentAddin of equivalentAddins) {\n        let alternate: MOS.Alternates = new MOS.Alternates();\n        alternate.prefer = new MOS.Prefer();\n        if (equivalentAddin.isComAddin()) {\n          alternate.prefer.comAddin = new MOS.ComAddin();\n          alternate.prefer.comAddin.progId = equivalentAddin.getProgId() as string;\n        } else if (equivalentAddin.isXLLCompatible()) {\n          alternate.prefer.xllCustomFunctions = new MOS.XllCustomFunctions();\n          alternate.prefer.xllCustomFunctions.fileName = equivalentAddin.getFileName() as string;\n        } else {\n          Utilities.logWarning(\"Unknown equivalent add-in type encountered.\");\n          continue; // skip equivalent addin of unknown type\n        }\n\n        alternates.push(alternate);\n      }\n    }\n\n    if (alternates.length > 0) {\n      extension.alternates = alternates;\n    }\n  }\n\n  private _populateAutoRunEvents(context: ConversionContext, extension: MOS.Extensions): void {\n    // Only outlook has autoruns\n    if (Utilities.isNullOrUndefined(this._xmlManifest._versionOverrides[Constants.InputMailHost])) {\n      return;\n    }\n\n    // If neither of the two outlook overrides are present then there are no launchevents/autoruns to process\n    let overrides: string[] = this._getMailHostOverrides();\n\n    // If there are no outlook overrides then there are no autoruns\n    if (overrides.length == 0) {\n      return;\n    }\n\n    let autoRunEvents: MOS.AutoRunEvents[] = [];\n\n    for (let overrideId of overrides) {\n      let addinCommandsExtensionPointsDesktop: Object[] = Converter._getAddinCommandsExtensionPoints(\n        Constants.InputMailHost,\n        overrideId,\n        Constants.InputDesktopFormFactor,\n        this._xmlManifest,\n      );\n\n      let addinCommandsExtensionPointsMobile: Object[] = Converter._getAddinCommandsExtensionPoints(\n        Constants.InputMailHost,\n        overrideId,\n        Constants.InputMobileFormFactor,\n        this._xmlManifest,\n      );\n\n      Converter._setVersionOverrideNumberAndCapabilitiesInContext(\n        context,\n        this._xmlManifest,\n        Constants.InputMailHost,\n        overrideId,\n      );\n\n      // If this override has a desktop form factor then look for an autorun extension point in it\n      if (!Utilities.isNullOrUndefined(addinCommandsExtensionPointsDesktop)) {\n        context.setFormFactor(Constants.InputDesktopFormFactor);\n        this._populateAutoRunEventsForFormFactor(context, addinCommandsExtensionPointsDesktop, Constants.InputDesktopFormFactor, autoRunEvents);\n        // We are done processing the desktop form factor so we unset it in the context\n        context.setFormFactor(null);\n      }\n\n      // If this override has a mobile form factor then look for an autorun extension point in it\n      if (!Utilities.isNullOrUndefined(addinCommandsExtensionPointsMobile)) {\n        context.setFormFactor(Constants.InputMobileFormFactor);\n        this._populateAutoRunEventsForFormFactor(context, addinCommandsExtensionPointsMobile, Constants.InputMobileFormFactor, autoRunEvents);\n        // We are done processing the mobile form factor so we unset it in the context\n        context.setFormFactor(null);\n      }\n\n      // Clear this in the context since we are done creating the autorun events\n      Converter._clearVersionOverrideNumberAndCapabilitiesInContext(context);\n    }\n\n    if (autoRunEvents.length > 0) {\n      extension.autoRunEvents = autoRunEvents;\n    }\n  }\n\n  private _populateAutoRunEventsForFormFactor(context: ConversionContext, addinCommandsExtensionPoints: Object[], formFactor: string, autoRunEvents: MOS.AutoRunEvents[]): void {\n    \n    for (let extensionPoint of addinCommandsExtensionPoints) {\n      if (\n        extensionPoint[Constants.InputType] === Constants.InputLaunchEvent &&\n        !Utilities.isNullOrUndefined(extensionPoint[Constants.InputEvents])\n      ) {\n        let autoRunEvent: MOS.AutoRunEvents = null;\n\n        // Now loop over each autorun event\n        for (let innerEvent of extensionPoint[Constants.InputEvents]) {\n          if (Utilities.isNullOrUndefined(autoRunEvent)) {\n            autoRunEvent = new MOS.AutoRunEvents();\n            autoRunEvent.events = [];\n            autoRunEvent.requirements = new MOS.RequirementsExtensionElement();\n            autoRunEvent.requirements.capabilities = [];\n            autoRunEvent.requirements.scopes = [];\n            autoRunEvent.requirements.scopes.push(MOS.Scopes.Mail);\n\n            // Merge in any capabilities that come from the requirement sets at the version override scope of the legacy manifest\n            Converter._mergeInVersionOverrideRequirements(\n              context.getCurrentVersionOverrideCapabilities(),\n              autoRunEvent.requirements,\n            );\n\n            // If the form factor is set in the context then we set it on the autoRunEvent\n            if (!Utilities.isNullOrUndefined(context.getFormFactor())) {\n              autoRunEvent.requirements.formFactors = [];\n              autoRunEvent.requirements.formFactors.push(Converter._inputFormFactorToMOSFormFactor(context.getFormFactor()));\n            }\n\n            autoRunEvents.push(autoRunEvent);\n          }\n\n          let mosEvent: MOS.Events = new MOS.Events();\n\n          // Now add the corresponding action to a runtime\n          let runtime: MOS.Runtimes = null;\n\n          const runtimeUrl: string = extensionPoint[Constants.InputResid];\n          const runtimeKey: string = Converter._generateRuntimeLookupKey(\n            runtimeUrl,\n            MOS.RuntimesLifetime.Short,\n            context.getCurrentVersionOverrideCapabilities(),\n            context.getFormFactor()\n          );\n\n          if (!Utilities.isNullOrUndefined(runtimeKey)) {\n            runtime = this._runtimeLookup[runtimeKey];\n          }\n\n          if (!Utilities.isNullOrUndefined(runtime)) {\n            // For LaunchEvents, the function name should be the action id.\n            let actionId: string = innerEvent[Constants.InputFunctionName];\n\n            // Even if we don't find a function name, we try to to generate a unique action\n            // name like \"action_3\"\n            if (Utilities.isNullOrUndefined(actionId)) {\n              actionId = innerEvent[Constants.InputAction];\n              actionId = this._createUniqueActionId(actionId);\n              Utilities.logError(\"Unable to get functionName from LaunchEvent.  Using %s instead.\", actionId);\n            }\n\n            if (Utilities.isNullOrUndefined(runtime.actions)) {\n              runtime.actions = [];\n            }\n\n            let action: MOS.ExtensionRuntimesActionsItem = new MOS.ExtensionRuntimesActionsItem();\n            action.id = actionId;\n            action.displayName = actionId;\n            mosEvent.actionId = actionId;\n            action.type = MOS.ExtensionRuntimesActionsItemType.ExecuteFunction;\n\n            this._addRuntimeExecuteAction(runtime, action, runtimeKey);\n          } else {\n            Utilities.assert(!Utilities.isNullOrUndefined(runtime), \"Expected runtime to be cached.\");\n            Utilities.logError(\"Did not find runtime %s for autorunevent.\", runtimeKey);\n          }\n\n          // Now add the event to the autoruns\n          const sendMode: string = innerEvent[Constants.InputSendMode];\n\n          if (!Utilities.isNullOrUndefined(sendMode) && sendMode.length > 0) {\n            mosEvent.options = new MOS.Options();\n            mosEvent.options.sendMode = Converter._mosSendModeFromXmlSendMode(sendMode);\n          }\n\n          mosEvent.type = Converter._legacyLaunchEventToMosEventType(innerEvent[Constants.InputType]);\n          autoRunEvent.events.push(mosEvent);\n        }\n      }\n    }\n  }\n\n  private _populateContextMenus(extension: MOS.Extensions): void {}\n\n  private _populateGetStartedMessages(context: ConversionContext, extension: MOS.Extensions): void {\n    // Get started messages apply to WXP and TaskPaneApp\n    if (!Utilities.isNullOrUndefined(this._xmlManifest._versionOverrides[Constants.InputWorkbook])) {\n      this._fillGetStartedMessagesFromVersionOverrides(context, extension, OSF.ManifestHostType.Workbook);\n    } else if (!Utilities.isNullOrUndefined(this._xmlManifest._versionOverrides[Constants.InputDocument])) {\n      this._fillGetStartedMessagesFromVersionOverrides(context, extension, OSF.ManifestHostType.Document);\n    } else if (!Utilities.isNullOrUndefined(this._xmlManifest._versionOverrides[Constants.InputPresentation])) {\n      this._fillGetStartedMessagesFromVersionOverrides(context, extension, OSF.ManifestHostType.Presentation);\n    }\n  }\n\n  private _fillGetStartedMessagesFromVersionOverrides(\n    context: ConversionContext,\n    extension: MOS.Extensions,\n    manifestHostType: OSF.ManifestHostType,\n  ): void {\n    var hostType: string = Converter._getVersionOverrideHostTypeFromOsfManifestHostType(manifestHostType);\n    var versionOverride: object = this._xmlManifest._versionOverrides[hostType];\n\n    if (Utilities.isNullOrUndefined(versionOverride)) {\n      return;\n    }\n\n    var getStartedNode: object = versionOverride[Constants.InputGetStartedNode];\n\n    if (!Utilities.isNullOrUndefined(getStartedNode)) {\n      Converter._setVersionOverrideNumberAndCapabilitiesInContext(context, this._xmlManifest, hostType, null);\n      let getStartedMessage: MOS.GetStartedMessages = new MOS.GetStartedMessages();\n      getStartedMessage.title = getStartedNode[Constants.InputTitle];\n      getStartedMessage.description = getStartedNode[Constants.InputDescription];\n      getStartedMessage.learnMoreUrl = getStartedNode[Constants.InputLearnMoreUrl];\n\n      // Set the requirements based on the context of what we have in the versionOverride\n      getStartedMessage.requirements = new MOS.RequirementsExtensionElement();\n      getStartedMessage.requirements.capabilities = Converter._cloneCapabilities(\n        context.getCurrentVersionOverrideCapabilities(),\n      );\n\n      let scope: MOS.Scopes = Converter._getRequirementsScopeFromManifestHostType(manifestHostType);\n      getStartedMessage.requirements.scopes = [];\n      getStartedMessage.requirements.scopes.push(scope);\n\n      // Get started messages are only supported inside of DesktopFormFactor\n      // https://learn.microsoft.com/en-us/javascript/api/manifest/getstarted?view=common-js-preview\n      getStartedMessage.requirements.formFactors = [];\n      getStartedMessage.requirements.formFactors.push(MOS.FormFactors.Desktop);\n\n      extension.getStartedMessages = [];\n      extension.getStartedMessages.push(getStartedMessage);\n      Converter._clearVersionOverrideNumberAndCapabilitiesInContext(context);\n    }\n\n    return;\n  }\n\n  private _populateKeyboards(extension: MOS.Extensions): void {\n    this._xmlManifest.getExtendedOverrides();\n  }\n\n  private _populateFormSettings(extension: MOS.Extensions): void {\n    // Only outlook has formSettings\n    if (Utilities.isNullOrUndefined(this._xmlManifest._versionOverrides[Constants.InputMailHost])) {\n      return;\n    }\n\n    const formSettings: OSF.Manifest.FormSetting[][] = this._xmlManifest.getFormSettings();\n    const defaultLocale: string = this._xmlManifest.getDefaultLocale();\n    // Make sure to get the \"first\" DesktopSettings either for ItemRead or ItemEdit\n    for (let item in formSettings) {\n      const formSetting: OSF.Manifest.FormSetting = formSettings[item][Constants.InputDesktopSettings];\n      const sourceLocation: string = formSetting?.SourceLocation?.[defaultLocale];\n      if (!Utilities.isNullOrUndefined(sourceLocation)) {\n        extension.audienceClaimUrl = sourceLocation;\n\n        // Now set the corresponding localized strings\n        const defaultLocale: string = this._xmlManifest.getDefaultLocale().toLocaleLowerCase();\n\n        for (let seenLocale in this._xmlManifest.getLocalesSeen()) {\n          // skip the defaule since it is set in the main body of the manifest\n          if (seenLocale !== defaultLocale) {\n            const locFormSetting: string = formSetting?.SourceLocation?.[seenLocale];\n            this._localeBuilder.addLocaleString(seenLocale, Constants.ExtensionAudienceClaimUrl, locFormSetting);\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  private _populateExtensionRequirements(extension: MOS.Extensions): void {\n    let requirements: MOS.RequirementsExtensionElement = new MOS.RequirementsExtensionElement();\n\n    // TODO: Needs review.  Currently no mapping for <Requirements><Method> from legacy manifest\n    if (!Utilities.isNullOrUndefined(this._xmlManifest.getRequirements()?.sets)) {\n      requirements.capabilities = Converter._getCapabilitiesFromLegacyRequirementSets(\n        this._xmlManifest.getRequirements().sets,\n      );\n    }\n\n    this._addScopesFromHosts(requirements);\n\n    extension.requirements = requirements;\n  }\n\n  private static _getCapabilitiesFromLegacyRequirementSets(sets: any[]): MOS.Capabilities[] {\n    let capabilities: MOS.Capabilities[] = null;\n\n    for (let i: number = 0; i < sets.length; i++) {\n      let requirementSet = sets[i];\n      let capability: MOS.Capabilities = new MOS.Capabilities();\n\n      capability.name = requirementSet.name;\n      capability.minVersion = requirementSet.version;\n\n      if (Utilities.isNullOrUndefined(capabilities)) {\n        capabilities = [] as MOS.Capabilities[];\n      }\n\n      capabilities!.push(capability);\n    }\n\n    return capabilities;\n  }\n\n  private _populateRibbonsAndContextMenus(context: ConversionContext, extension: MOS.Extensions): void {\n    let ribbons: MOS.Ribbons[] = [];\n    let contextMenus: MOS.ContextMenus[] = [];\n\n    // Unlike the MOS manifest, in the legacy manifest, each host type must have its own ribbon\n    // Therefore, we create one ribbon for each host type if one exists in the legacy manifest\n    this._addRibbonOrContextMenuForHostType(context, OSF.ManifestHostType.Mailbox, ribbons, contextMenus);\n    this._addRibbonOrContextMenuForHostType(context, OSF.ManifestHostType.Workbook, ribbons, contextMenus);\n    this._addRibbonOrContextMenuForHostType(context, OSF.ManifestHostType.Document, ribbons, contextMenus);\n    this._addRibbonOrContextMenuForHostType(context, OSF.ManifestHostType.Presentation, ribbons, contextMenus);\n\n    if (ribbons.length > 0) {\n      extension.ribbons = ribbons;\n    }\n\n    if (contextMenus.length > 0) {\n      extension.contextMenus = contextMenus;\n    }\n\n    // Unset the ribbon and context menu indexes since we know that we are done with processing\n    // all context menus and ribbons.\n    context.setCurrentRibbonIndex(ConversionContext.UnsetIndex);\n    context.setCurrentContextMenuIndex(ConversionContext.UnsetIndex);\n  }\n\n  private _addRuntimeActionLocalizedDisplayNames(runtimes: MOS.Runtimes[]): void {\n    if (Utilities.isNullOrUndefined(runtimes)) {\n      return;\n    }\n\n    for (var runtimeIdx = 0; runtimeIdx < runtimes.length; runtimeIdx++) {\n      var runtime: MOS.Runtimes = runtimes[runtimeIdx];\n\n      if (!Utilities.isNullOrUndefined(runtime) && !Utilities.isNullOrUndefined(runtime.actions)) {\n        for (var actionIdx = 0; actionIdx < runtime.actions.length; actionIdx++) {\n          var action: MOS.ExtensionRuntimesActionsItem = runtime.actions[actionIdx];\n          this._addConstantResourceForAllSeenLocales(\n            action.displayName,\n            Constants.RuntimesActionsDisplayName,\n            runtimeIdx,\n            actionIdx,\n            null,\n            null,\n            null,\n            null,\n          );\n        }\n      }\n    }\n  }\n\n  private _addRibbonOrContextMenuForHostType(\n    context: ConversionContext,\n    manifestHostType: OSF.ManifestHostType,\n    ribbons: MOS.Ribbons[],\n    contextMenus: MOS.ContextMenus[],\n  ): void {\n    // If this host does not have any content in the manifest then we can skip the logic below\n    if (!this._doesHostHaveContentInManifest(manifestHostType)) {\n      return;\n    }\n\n    context.setManifestHostType(manifestHostType);\n    let hostType: string = Converter._getVersionOverrideHostTypeFromOsfManifestHostType(manifestHostType);\n\n    if (Converter._isWXP(hostType)) {\n      Converter._setVersionOverrideNumberAndCapabilitiesInContext(\n        context,\n        this._xmlManifest,\n        hostType,\n        OSF.VersionOverridesNumber.V1_0.toString(),\n      );\n      let functionFileResid: Object = Converter._getFunctionFileResid(hostType, null, this._xmlManifest);\n      if (\n        !Utilities.isNullOrUndefined(functionFileResid) &&\n        !Utilities.isNullOrUndefined(functionFileResid[Constants.InputDesktopFormFactor])\n      ) {\n        context.setCurrentFunctionFileResid(functionFileResid[Constants.InputDesktopFormFactor]);\n      }\n\n      // First look for information under the main manifest\n      // Using DesktopFormFactor here because it is the only place that supports ribbon command surfaces\n      // MobileFormFactor uses: MobileMessageReadCommandSurface, MobileOnlineMetingCommandSurface\n      let addinCommandsExtensionPoints: [] = Converter._getAddinCommandsExtensionPoints(\n        hostType,\n        null,\n        Constants.InputDesktopFormFactor,\n        this._xmlManifest,\n      );\n\n      if (!Utilities.isNullOrUndefined(addinCommandsExtensionPoints)) {\n        this._addRibbonOrContextMenuForManifestSection(\n          context,\n          hostType,\n          null,\n          addinCommandsExtensionPoints,\n          ribbons,\n          contextMenus,\n        );\n      }\n\n      context.setCurrentFunctionFileResid(null);\n\n      // Clear the override version requirements from the context\n      Converter._clearVersionOverrideNumberAndCapabilitiesInContext(context);\n    } else if (hostType === Constants.InputMailHost) {\n      // Now look for extension points in each override\n      let supportedVersionOverrides = Converter._getMailHostVersionOVerrides();\n      for (let vo of supportedVersionOverrides) {\n        // Now look for extension points under each of the overrides\n\n        // Get the DesktopFormFactor command surfaces / extension points\n        let addinCommandsExtensionPoints: [] = Converter._getAddinCommandsExtensionPoints(\n          hostType,\n          vo,\n          Constants.InputDesktopFormFactor,\n          this._xmlManifest,\n        );\n\n        Converter._setVersionOverrideNumberAndCapabilitiesInContext(context, this._xmlManifest, hostType, vo);\n\n        if (!Utilities.isNullOrUndefined(addinCommandsExtensionPoints)) {\n          let functionFileResidVersion: Object = Converter._getFunctionFileResid(hostType, vo, this._xmlManifest);\n          if (\n            !Utilities.isNullOrUndefined(functionFileResidVersion) &&\n            !Utilities.isNullOrUndefined(functionFileResidVersion[Constants.InputDesktopFormFactor])\n          ) {\n            context.setCurrentFunctionFileResid(functionFileResidVersion[Constants.InputDesktopFormFactor]);\n          }\n\n          this._addRibbonOrContextMenuForManifestSection(\n            context,\n            hostType,\n            vo,\n            addinCommandsExtensionPoints,\n            ribbons,\n            contextMenus,\n          );\n          context.setCurrentFunctionFileResid(null);\n        }\n\n        // Get the MobileFormFactor extension points\n        // MobileFormFactor uses: MobileMessageReadCommandSurface, MobileOnlineMetingCommandSurface, MobileOnlineMeetingCommandSurface\n        // MobileLogEventAppointmentAttendee, MobileAppointmentOrganizerCommandSurface,\n        // Currently not implemented: MobileMessageComposeCommandSurface, MobileAppointmentAttendeeCommandSurface\n        let addinCommandsExtensionPointsMobile: [] = Converter._getAddinCommandsExtensionPoints(\n          hostType,\n          vo,\n          Constants.InputMobileFormFactor,\n          this._xmlManifest,\n        );\n\n        if (\n          !Utilities.isNullOrUndefined(addinCommandsExtensionPointsMobile) &&\n          addinCommandsExtensionPointsMobile.length > 0\n        ) {\n          let functionFileResidVersion: Object = Converter._getFunctionFileResid(hostType, vo, this._xmlManifest);\n          if (\n            !Utilities.isNullOrUndefined(functionFileResidVersion) &&\n            !Utilities.isNullOrUndefined(functionFileResidVersion[Constants.InputMobileFormFactor])\n          ) {\n            context.setCurrentFunctionFileResid(functionFileResidVersion[Constants.InputMobileFormFactor]);\n          }\n\n          this._addRibbonOrContextMenuForManifestSection(\n            context,\n            hostType,\n            vo,\n            addinCommandsExtensionPointsMobile,\n            ribbons,\n            contextMenus,\n          );\n          context.setCurrentFunctionFileResid(null);\n        }\n\n        // Clear the override version requirements from the context\n        Converter._clearVersionOverrideNumberAndCapabilitiesInContext(context);\n      }\n    } else {\n      Utilities.logError(\"Unsupported host skipping processing for host type: %s\", hostType);\n    }\n\n    context.setManifestHostType(null);\n  }\n\n  private _addRibbonOrContextMenuForManifestSection(\n    context: ConversionContext,\n    versionOverrideHostIndex: string,\n    versionOverrideIndex: string,\n    addinCommandsExtensionPoints: [],\n    ribbons: MOS.Ribbons[],\n    contextMenus: MOS.ContextMenus[],\n  ) {\n    let len: number = addinCommandsExtensionPoints.length;\n\n    for (let idx: number = 0; idx < len; idx++) {\n      let extPoint: Object = addinCommandsExtensionPoints[idx];\n      let extensionPointType: string = extPoint[Constants.InputType];\n\n      // Only look for the ribbon since we are populating the ribbon now\n      if (Converter._isRibbonCommandSurface(extensionPointType)) {\n        context.setFormFactor(Constants.InputDesktopFormFactor);\n        context.setCurrentCommandSurfaceType(CommandSurfaceType.Ribbon);\n        let ribbon: MOS.Ribbons = new MOS.Ribbons();\n\n        // Keep track of a count of the ribbon index for purposes of the localization indexed strings\n        Converter._incrementCurrentRibbonIndex(context);\n\n        ribbon.tabs = [];\n\n        // Now populate all the tabs\n        if (!Utilities.isNullOrUndefined(extPoint[Constants.InputTabs])) {\n          for (let tabIdx: number = 0; tabIdx < extPoint[Constants.InputTabs].length; tabIdx++) {\n            const tab: any = extPoint[Constants.InputTabs][tabIdx];\n            context.setCurrentTabIndex(tabIdx);\n            const mosTab: any = this._populateTab(context, tab);\n            context.setCurrentTabIndex(ConversionContext.UnsetIndex);\n            ribbon.tabs.push(mosTab);\n          }\n        }\n\n        ribbon.contexts = [];\n        ribbon.contexts.push(Converter._getRibbonContextFromCommandSurface(extPoint[Constants.InputType]));\n\n        ribbon.requirements = new MOS.RequirementsExtensionElement();\n\n        this._populateRibbonAndContextMenuRequirements(context, ribbon.requirements);\n\n        Utilities.log(\"Adding ribbon for: %s and vo: %s\", versionOverrideHostIndex, versionOverrideIndex);\n        ribbons.push(ribbon);\n        context.setCurrentCommandSurfaceType(CommandSurfaceType.None);\n        context.setFormFactor(null);\n      } else if (Converter._isContextMenuCommandSurface(extensionPointType)) {\n        context.setFormFactor(Constants.InputDesktopFormFactor);\n        context.setCurrentCommandSurfaceType(CommandSurfaceType.ContextMenu);\n        let contextMenu: MOS.ContextMenus = new MOS.ContextMenus();\n\n        // Keep track of a count of the context menu index for purposes of the localization indexed strings\n        if (context.getCurrentContextMenuIndex() === ConversionContext.UnsetIndex) {\n          context.setCurrentContextMenuIndex(0);\n        } else {\n          context.setCurrentContextMenuIndex(context.getCurrentContextMenuIndex() + 1);\n        }\n\n        // Now populate all the menu\n        if (!Utilities.isNullOrUndefined(extPoint[Constants.InputChildren])) {\n          // Map OfficeMenuNode => extension.contextMenus[x].menus[x]\n          for (let menuNodeIdx: number = 0; menuNodeIdx < extPoint[Constants.InputChildren].length; menuNodeIdx++) {\n            const menuNode: any = extPoint[Constants.InputChildren][menuNodeIdx];\n            const mosMenu: MOS.Menus = new MOS.Menus();\n\n            mosMenu.entryPoint = menuNode[Constants.InputType] === Constants.InputContextMenuCell\n              ? MOS.MenusEntryPoint.Cell\n              : MOS.MenusEntryPoint.Text;\n\n            context.setCurrentContextMenuMenuIndex(menuNodeIdx);\n\n            // Map \"menuControl\" => extension.contextMenus[x].menus[x].controls[x]\n            // These controls are either Menus or Buttons\n            for (\n              let menuControlIdx: number = 0;\n              menuControlIdx < menuNode[Constants.InputChildren].length;\n              menuControlIdx++\n            ) {\n              const control: any = menuNode[Constants.InputChildren][menuControlIdx];\n\n              context.setCurrentContextMenuMenuControlIndex(menuControlIdx);\n\n              if (Utilities.isNullOrUndefined(mosMenu.controls)) {\n                mosMenu.controls = [];\n              }\n\n              // The type of context menu controls is either Menu or Button and we default to Button\n              if (control[Constants.InputControlType] === Constants.InputMenu) {\n\n                let mosMenuMenu: MOS.ExtensionCommonCustomControlMenu = new MOS.ExtensionCommonCustomControlMenu();\n                this._populateMenuControl(context, mosMenuMenu, control);\n                mosMenu.controls.push(<MOS.ExtensionCommonCustomGroupControlsItem>(<unknown>mosMenuMenu));\n              } else {\n                let mosButton: MOS.ExtensionCommonCustomGroupControlsItem = new MOS.ExtensionCommonCustomGroupControlsItem();\n                this._populateButtonControl(context, mosButton, control);\n                mosMenu.controls.push(mosButton);\n              }\n            }\n\n            if (Utilities.isNullOrUndefined(contextMenu.menus)) {\n              contextMenu.menus = [];\n            }\n\n            contextMenu.menus.push(mosMenu);\n\n            // Unset the menuControl index\n            context.setCurrentContextMenuMenuControlIndex(ConversionContext.UnsetIndex);\n          }\n\n          // Unset the menu index\n          context.setCurrentContextMenuMenuIndex(ConversionContext.UnsetIndex);\n        }\n\n        contextMenu.requirements = new MOS.RequirementsExtensionElement();\n\n        this._populateRibbonAndContextMenuRequirements(context, contextMenu.requirements);\n\n        Utilities.log(\"Adding contextMenu for: %s and vo: %s\", versionOverrideHostIndex, versionOverrideIndex);\n\n        contextMenus.push(contextMenu);\n        context.setCurrentCommandSurfaceType(CommandSurfaceType.None);\n        context.setFormFactor(null);\n      } else if (Converter._isMobileCommandSurface(extensionPointType)) {\n        context.setFormFactor(Constants.InputMobileFormFactor);\n        context.setCurrentCommandSurfaceType(CommandSurfaceType.Ribbon);\n        let ribbon: MOS.Ribbons = new MOS.Ribbons();\n        ribbon.tabs = [];\n        ribbon.tabs[0] = new MOS.ExtensionRibbonsArrayTabsItem();\n        ribbon.tabs[0].customMobileRibbonGroups = [];\n\n        // 8856256 - current ribbon schema requires groups[] even though it should not be needed\n        // fix this once schema is updated.\n        ribbon.tabs[0].groups = [];\n        let placeholderGroup: MOS.ExtensionRibbonsCustomTabGroupsItem = new MOS.ExtensionRibbonsCustomTabGroupsItem();\n        placeholderGroup.label = \"placeholder\";\n        placeholderGroup.controls = [];\n        let placeholderControl: MOS.ExtensionCommonCustomGroupControlsItem =\n          new MOS.ExtensionCommonCustomGroupControlsItem();\n        placeholderControl.actionId = \"\";\n        placeholderControl.label = \"\";\n        placeholderControl.id = \"\";\n        placeholderControl.type = MOS.ExtensionCommonCustomGroupControlsItemType.Menu;\n        placeholderControl.icons = [];\n        let placeholderIcon: MOS.ExtensionCommonIcon = new MOS.ExtensionCommonIcon();\n        placeholderIcon.url = \"https://placeholder\";\n        placeholderIcon.size = 32;\n        placeholderControl.icons.push(placeholderIcon);\n        placeholderControl.supertip = new MOS.ExtensionCommonSuperToolTip();\n        placeholderControl.supertip.description = \"\";\n        placeholderControl.supertip.title = \"\";\n        placeholderGroup.controls.push(placeholderControl);\n        ribbon.tabs[0].groups.push(placeholderGroup);\n\n        let customMobileGroup: MOS.ExtensionRibbonsCustomMobileGroupItem =\n          new MOS.ExtensionRibbonsCustomMobileGroupItem();\n\n        // Set to a default value in case there isn't actually a group id that gets set below\n        customMobileGroup.id = this._createUniqueId(\"customMobileGroup\");\n        customMobileGroup.label = customMobileGroup.id;\n        ribbon.tabs[0].customMobileRibbonGroups[0] = customMobileGroup;\n        ribbon.tabs[0].id = this._createUniqueId(\"mobileTab\");\n        ribbon.tabs[0].label = ribbon.tabs[0].id;\n        ribbon.contexts = [];\n        ribbon.contexts.push(Converter._getRibbonContextFromCommandSurface(extPoint[Constants.InputType]));\n\n        ribbon.requirements = new MOS.RequirementsExtensionElement();\n\n        this._populateRibbonAndContextMenuRequirements(context, ribbon.requirements);\n\n        var mobileControl: Object = null;\n\n        switch (extensionPointType) {\n          case Constants.InputMobileMessageReadCommandSurface:\n          case Constants.InputMobileOnlineMeetingCommandSurface:\n          case Constants.InputMobileLogEventAppointmentAttendee:\n            // Keep track of a count of the ribbon index for purposes of the localization indexed strings\n            Converter._incrementCurrentRibbonIndex(context);\n\n            // Currently these mobile groups and controls in xml only support one tab, one group and one control\n            context.setCurrentTabIndex(0);\n            context.setCurrentCustomMobileGroupIndex(0);\n\n            // InputMobileMessageReadCommandSurface has a <Group> wrapping the <Control> but\n            // InputMobileOnlineMeetingCommandSurface and InputMobileLogEventAppointmentAttendee only\n            // have <Control> directly inside of the extension point node.\n            // Handle the <Group> if there is one.\n            if (!Utilities.isNullOrUndefined(extPoint[Constants.InputGroup])) {\n              if (!Utilities.isNullOrUndefined(extPoint[Constants.InputGroup][Constants.InputId])) {\n                customMobileGroup.id = extPoint[Constants.InputGroup][Constants.InputId];\n              }\n\n              if (\n                !Utilities.isNullOrUndefined(extPoint[Constants.InputGroup][Constants.InputLabel]) ||\n                !Utilities.isNullOrUndefined(extPoint[Constants.InputGroup][Constants.InputLabelResId])\n              ) {\n                customMobileGroup.label = this._populateControlLocalizedField(\n                  context,\n                  extPoint[Constants.InputGroup][Constants.InputLabelResId],\n                  extPoint[Constants.InputGroup][Constants.InputLabel],\n                  Constants.MaxResourceStringLength32,\n                  ResourceType.AllLocaleShortStrings,\n                  Constants.RibbonsTabsCustomMobileRibbonGroupsLabel,\n                );\n              }\n\n              if (!Utilities.isNullOrUndefined(extPoint[Constants.InputGroup][Constants.InputControl])) {\n                mobileControl = extPoint[Constants.InputGroup][Constants.InputControl];\n              }\n            } else {\n              if (!Utilities.isNullOrUndefined(extPoint[Constants.InputControl])) {\n                mobileControl = extPoint[Constants.InputControl];\n              }\n            }\n\n            if (!Utilities.isNullOrUndefined(mobileControl)) {\n              // Currently these mobile groups and controls in xml only support one group and one control\n              context.setCurrentControlIndex(0);\n\n              // Populate the mobile control\n              customMobileGroup.controls = [];\n              customMobileGroup.controls[0] = new MOS.ExtensionRibbonsCustomMobileControlButtonItem();\n              this._populateMobileControlProperties(context, customMobileGroup.controls[0], mobileControl);\n\n              context.setCurrentControlIndex(ConversionContext.UnsetIndex);\n            }\n\n            context.setCurrentCustomMobileGroupIndex(ConversionContext.UnsetIndex);\n            context.setCurrentTabIndex(ConversionContext.UnsetIndex);\n\n            break;\n\n          // These other three seem to have nearly no documentation so we ignore these for now\n          case Constants.InputMobileAppointmentAttendeeCommandSurface:\n          case Constants.InputMobileAppointmentAttendeeCommandSurface:\n          case Constants.InputMobileAppointmentAttendeeCommandSurface:\n            break;\n          default:\n            Utilities.logError(\"Unrecognized mobile command surface: \" + extensionPointType);\n        }\n\n        ribbon.tabs[0].customMobileRibbonGroups[0] = customMobileGroup;\n        Utilities.log(\"Adding ribbon for: %s and vo: %s\", versionOverrideHostIndex, versionOverrideIndex);\n        ribbons.push(ribbon);\n        context.setCurrentCommandSurfaceType(CommandSurfaceType.None);\n        context.setFormFactor(null);\n      } else if (Converter._isReportPhishingCommandSurface(extensionPointType)) {\n\n        let fixedControl: MOS.ExtensionRibbonsArrayFixedControlItem = null;\n        let spamPreProcessingDialog: MOS.ExtensionRibbonsSpamPreProcessingDialog = null;\n\n        context.setCurrentCommandSurfaceType(CommandSurfaceType.Ribbon);\n        // Keep track of a count of the ribbon index for purposes of the localization indexed strings\n        Converter._incrementCurrentRibbonIndex(context);\n\n        // Handle the fixed control\n        context.setInFixedControl(true);\n        context.setFormFactor(Constants.InputDesktopFormFactor);\n\n        context.setCurrentFixedControlIndex(0);\n        fixedControl = new MOS.ExtensionRibbonsArrayFixedControlItem();\n\n        if (!Utilities.isNullOrUndefined(extPoint[Constants.InputFixedControl])) {\n          this._populateButtonControl(context, <MOS.ExtensionCommonCustomGroupControlsItem>(<any>(fixedControl)), extPoint[Constants.InputFixedControl]);\n        }\n        context.setCurrentFixedControlIndex(0);\n        context.setInFixedControl(false);\n\n        // Handle the preProcessingDialog\n        spamPreProcessingDialog = new MOS.ExtensionRibbonsSpamPreProcessingDialog();\n\n        let spamPreProcessingDialogObj: any = extPoint[Constants.InputSpamPreProcessingDialog];\n\n        // Handle extensions[0].ribbons[0].spamPreProcessingDialog.title\n        spamPreProcessingDialog.title = this._getResourceAndWriteLocalizedValues(\n          spamPreProcessingDialogObj[Constants.InputTitleResId],\n          null,\n          Constants.MaxResourceStringLength128,\n          context.getCurrentVersionOverrideNumber(),\n          Constants.RibbonsSpamProcessingDialogTitle,\n          ResourceType.AllLocaleShortStrings,\n          context.getCurrentRibbonIndex(),\n          ConversionContext.UnsetIndex,\n          ConversionContext.UnsetIndex,\n          ConversionContext.UnsetIndex,\n          ConversionContext.UnsetIndex\n        );\n\n        // Handle extensions[0].ribbons[0].spamPreProcessingDialog.description\n        spamPreProcessingDialog.description = this._getResourceAndWriteLocalizedValues(\n          spamPreProcessingDialogObj[Constants.InputDescriptionResId],\n          null,\n          Constants.MaxResourceStringLength250,\n          context.getCurrentVersionOverrideNumber(),\n          Constants.RibbonsSpamProcessingDialogDescription,\n          ResourceType.AllLocaleLongStrings,\n          context.getCurrentRibbonIndex(),\n          ConversionContext.UnsetIndex,\n          ConversionContext.UnsetIndex,\n          ConversionContext.UnsetIndex,\n          ConversionContext.UnsetIndex\n        );\n\n        // Handle extensions[0].ribbons[0].spamPreProcessingDialog.spamFreeTextSectionTitle\n        spamPreProcessingDialog.spamFreeTextSectionTitle = this._getResourceAndWriteLocalizedValues(\n          spamPreProcessingDialogObj[Constants.InputSpamFreeTextSectionLabelResId],\n          null,\n          Constants.MaxResourceStringLength128,\n          context.getCurrentVersionOverrideNumber(),\n          Constants.RibbonsSpamProcessingDialogSpamFreeTextSectionLabel,\n          ResourceType.AllLocaleShortStrings,\n          context.getCurrentRibbonIndex(),\n          ConversionContext.UnsetIndex,\n          ConversionContext.UnsetIndex,\n          ConversionContext.UnsetIndex,\n          ConversionContext.UnsetIndex\n        );\n\n        // Handle extensions[0].ribbons[0].spamPreProcessingDialog.spamMoreInfo\n        if (!Utilities.isNullOrUndefined(extPoint[Constants.InputSpamPreProcessingDialog])) {\n          spamPreProcessingDialog.spamMoreInfo = new MOS.SpamMoreInfo();\n          let spamPreProcessingDialogObj: any = extPoint[Constants.InputSpamPreProcessingDialog];\n          let moreInfoObj: any = spamPreProcessingDialogObj[Constants.InputSpamMoreInfo];\n\n          if (!Utilities.isNullOrUndefined(moreInfoObj)) {\n            // Handle extensions[0].ribbons[0].spamPreProcessingDialog.spamMoreInfo.text\n            if (!Utilities.isNullOrUndefined(moreInfoObj[Constants.InputTextResId])) {\n              spamPreProcessingDialog.spamMoreInfo.text = this._getResourceAndWriteLocalizedValues(\n                moreInfoObj[Constants.InputTextResId],\n                null,\n                Constants.MaxResourceStringLength128,\n                context.getCurrentVersionOverrideNumber(),\n                Constants.RibbonsSpamProcessingDialogSpamMoreInfoText,\n                ResourceType.AllLocaleShortStrings,\n                context.getCurrentRibbonIndex(),\n                ConversionContext.UnsetIndex,\n                ConversionContext.UnsetIndex,\n                ConversionContext.UnsetIndex,\n                ConversionContext.UnsetIndex\n              );\n            }\n\n            // Handle extensions[0].ribbons[0].spamPreProcessingDialog.spamMoreInfo.url\n            if (!Utilities.isNullOrUndefined(moreInfoObj[Constants.InputUrlResId])) {\n              spamPreProcessingDialog.spamMoreInfo.url = this._getResourceAndWriteLocalizedValues(\n                moreInfoObj[Constants.InputUrlResId],\n                null,\n                Constants.MaxResourceStringLength2048,\n                context.getCurrentVersionOverrideNumber(),\n                Constants.RibbonsSpamProcessingDialogSpamMoreInfoUrl,\n                ResourceType.AllLocaleUrls,\n                context.getCurrentRibbonIndex(),\n                ConversionContext.UnsetIndex,\n                ConversionContext.UnsetIndex,\n                ConversionContext.UnsetIndex,\n                ConversionContext.UnsetIndex\n              );\n            }\n          }\n        }\n\n        // Handle extensions[0].ribbons[0].spamPreProcessingDialog.spamReportingOptions\n        if (!Utilities.isNullOrUndefined(spamPreProcessingDialogObj[Constants.InputSpamReportingOptions])) {\n\n          spamPreProcessingDialog.spamReportingOptions = new MOS.SpamReportingOptions();\n          let spamReportingOptionsObj: any = spamPreProcessingDialogObj[Constants.InputSpamReportingOptions];\n\n          // Handle extensions[0].ribbons[0].spamPreProcessingDialog.spamReportingOptions.title\n          if (!Utilities.isNullOrUndefined(spamReportingOptionsObj[Constants.InputTitleResId])) {\n            spamPreProcessingDialog.spamReportingOptions.title = this._getResourceAndWriteLocalizedValues(\n              spamReportingOptionsObj[Constants.InputTitleResId],\n              null,\n              Constants.MaxResourceStringLength128,\n              context.getCurrentVersionOverrideNumber(),\n              Constants.RibbonsSpamProcessingDialogSpamReportingOptionsTitle,\n              ResourceType.AllLocaleShortStrings,\n              context.getCurrentRibbonIndex(),\n              ConversionContext.UnsetIndex,\n              ConversionContext.UnsetIndex,\n              ConversionContext.UnsetIndex,\n              ConversionContext.UnsetIndex\n            );\n          }\n          // Handle extensions[0].ribbons[0].spamPreProcessingDialog.spamReportingOptions.options\n          if (!Utilities.isNullOrUndefined(spamReportingOptionsObj[Constants.InputOptions] &&\n\n            spamReportingOptionsObj[Constants.InputOptions].length > 0)) {\n            spamPreProcessingDialog.spamReportingOptions.options = [];\n\n            for (let idxOptions = 0; idxOptions < spamReportingOptionsObj[Constants.InputOptions].length; idxOptions++) {\n              let optResId: any = spamReportingOptionsObj[Constants.InputOptions][idxOptions];\n\n              var optValue = this._getResourceAndWriteLocalizedValues(\n                optResId,\n                null,\n                Constants.MaxResourceStringLength128,\n                context.getCurrentVersionOverrideNumber(),\n                Constants.RibbonsSpamProcessingDialogSpamReportingOptionsOptions,\n                ResourceType.AllLocaleShortStrings,\n                context.getCurrentRibbonIndex(),\n                idxOptions,\n                ConversionContext.UnsetIndex,\n                ConversionContext.UnsetIndex,\n                ConversionContext.UnsetIndex\n              );\n\n              spamPreProcessingDialog.spamReportingOptions.options.push(optValue);\n            }\n          }\n        }\n        \n        let ribbon: MOS.Ribbons = new MOS.Ribbons();\n\n        ribbon.contexts = [];\n        ribbon.contexts.push(MOS.Contexts.SpamReportingOverride);\n        ribbon.requirements = new MOS.RequirementsExtensionElement();\n        this._populateRibbonAndContextMenuRequirements(context, ribbon.requirements);\n\n\n        if (ribbons.length > 0) {\n          // If there is a fixed control then we add it to the first ribbon\n          if (!Utilities.isNullOrUndefined(fixedControl)) {\n            ribbon.fixedControls = [];\n            ribbon.fixedControls.push(fixedControl);\n          }\n\n          // If there is a spamPreProcessingDialog then we add it to the first ribbon\n          if (!Utilities.isNullOrUndefined(spamPreProcessingDialog)) {\n            ribbon.spamPreProcessingDialog = spamPreProcessingDialog;\n          }\n        }\n\n        context.setFormFactor(null);\n\n        ribbons.push(ribbon);\n      }\n\n      context.setCurrentCommandSurfaceType(CommandSurfaceType.None);\n    }\n  }\n\n  private _populateRibbonAndContextMenuRequirements(\n    context: ConversionContext,\n    requirements: MOS.RequirementsExtensionElement,\n  ): void {\n    this._addRequirementSubelementScopesFromHost(context, requirements);\n\n    // If there is a formFactor set in the context then we include it in the requirements\n    if (!Utilities.isNullOrUndefined(context.getFormFactor())) {\n      let formFactor: MOS.FormFactors = Converter._inputFormFactorToMOSFormFactor(context.getFormFactor());\n      requirements.formFactors.push(formFactor);\n    }\n  }\n\n  private _addRequirementSubelementScopesFromHost(\n    context: ConversionContext,\n    requirements: MOS.RequirementsExtensionElement,\n  ): void {\n    if (Utilities.isNullOrUndefined(requirements.scopes)) {\n      requirements.scopes = [];\n    }\n\n    let scope: MOS.Scopes = Converter._getRequirementsScopeFromManifestHostType(context.getManifestHostType());\n\n    if (!Utilities.isNullOrUndefined(scope)) {\n      requirements.scopes.push(scope);\n    }\n\n    if (Utilities.isNullOrUndefined(requirements.formFactors)) {\n      requirements.formFactors = [];\n    }\n\n    Converter._mergeInVersionOverrideRequirements(context.getCurrentVersionOverrideCapabilities(), requirements);\n  }\n\n  private static _mergeInVersionOverrideRequirements(\n    versionOverrideCapabilities: MOS.Capabilities[],\n    requirements: MOS.RequirementsExtensionElement,\n  ): void {\n    if (Utilities.isNullOrUndefined(versionOverrideCapabilities)) {\n      return;\n    }\n\n    // We add the capabilities from the version override if they haven't already been added\n    for (let capability of versionOverrideCapabilities) {\n      let matchingCapability: MOS.Capabilities = null;\n\n      if (Utilities.isNullOrUndefined(requirements.capabilities)) {\n        requirements.capabilities = [];\n      } else {\n        matchingCapability = Converter._getMatchingCapability(requirements.capabilities, capability);\n      }\n\n      if (Utilities.isNullOrUndefined(matchingCapability)) {\n        // If the capability is like \"Mailbox\" is not already in the collection then we simply add it\n        requirements.capabilities.push(capability);\n      } else {\n        // If the capability is already in the collection then we want to merge in the current capability\n        // min/max versions with the existing ones.\n\n        // Convert string versions (ie \"1.3\") to numbers\n        let incomingMin: number = Utilities.isNullOrUndefined(capability.minVersion) ? null : +capability.minVersion;\n        let existingMin: number = Utilities.isNullOrUndefined(matchingCapability.minVersion)\n          ? null\n          : +matchingCapability.minVersion;\n\n        // We should update the minVersion to the maximum minVersion between existingMin and, incomingMin as the maximum of the minVersion is what the Add-in supports.\n        // Like between \"mailbox\": \"1.2\" and \"mailbox\": \"1.5\" we should keep \"mailbox\" \"1.5\" as it is minimum version which is supported\n        if (!Utilities.isNullOrUndefined(existingMin) && !Number.isNaN(existingMin) && !Number.isNaN(incomingMin)) {\n          if (incomingMin > existingMin) {\n            matchingCapability.minVersion = incomingMin.toString();\n          }\n        }\n      }\n    }\n  }\n\n  private static _getMatchingCapability(\n    capabilities: MOS.Capabilities[],\n    capability: MOS.Capabilities,\n  ): MOS.Capabilities {\n    for (let cap of capabilities) {\n      if (cap.name === capability.name) {\n        return cap;\n      }\n    }\n\n    return null;\n  }\n\n  private static _capabilitiesContainCapability(\n    capabilities: MOS.Capabilities[],\n    capability: MOS.Capabilities,\n  ): boolean {\n    for (let cap of capabilities) {\n      if (\n        cap.name === capability.name &&\n        cap.maxVersion === capability.maxVersion &&\n        cap.minVersion === capability.minVersion\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private _populateTab(context: ConversionContext, tab: Object): any {\n    let mosTab: any;\n    let mosGroups: MOS.ExtensionCommonCustomGroup[] = [];\n\n    if (Utilities.isNullOrUndefined(tab[Constants.InputLabel])) {\n      mosTab = new MOS.ExtensionRibbonsArrayTabsItem();\n      mosTab.builtInTabId = tab[Constants.InputId];\n    } else {\n      mosTab = new MOS.ExtensionRibbonsArrayTabsItem();\n      mosTab.id = tab[Constants.InputId];\n      mosTab.label = tab[Constants.InputLabel];\n    }\n\n    this._populateGroups(context, mosGroups, tab[Constants.InputChildren]);\n    mosTab.groups = mosGroups;\n\n    return mosTab;\n  }\n\n  private _populateGroups(context: ConversionContext, mosGroups: MOS.ExtensionCommonCustomGroup[], groups: []): void {\n    for (let idx: number = 0; idx < groups.length; idx++) {\n      let group = groups[idx];\n      let mosGroup: MOS.ExtensionCommonCustomGroup = new MOS.ExtensionCommonCustomGroup();\n\n      context.setCurrentGroupIndex(idx);\n      this._populateGroup(context, mosGroup, group);\n      context.setCurrentGroupIndex(-1);\n      mosGroups.push(mosGroup);\n    }\n  }\n\n  private _populateGroup(context: ConversionContext, mosGroup: MOS.ExtensionCommonCustomGroup, group: Object): void {\n    mosGroup.id = group[Constants.InputId];\n    mosGroup.label = this._getResourceAndWriteLocalizedValues(\n      group[Constants.InputLabelResId],\n      group[Constants.InputLabel],\n      Constants.MaxResourceStringLength64,\n      context.getCurrentVersionOverrideNumber(),\n      Constants.RibbonsTabsGroupsLabel,\n      ResourceType.AllLocaleShortStrings,\n      context.getCurrentRibbonIndex(),\n      context.getCurrentTabIndex(),\n      context.getCurrentGroupIndex(),\n    );\n\n    // TODO:  This property is currently not parsed by WAC legacy parser\n    /* Devpreview does not have overridenbyribbonapi\n        if (!Utilities.isNullOrUndefined(group[Constants.InputOverridenByRibbonApi])) {\n            mosGroup.overriddenByRibbonApi = group[Constants.InputOverridenByRibbonApi];\n        }\n*/\n\n    // Populate Group icons\n    this._populateGroupIcons(context, mosGroup, group[Constants.InputIcon], group[Constants.InputIconResId]);\n\n    // Populate Group controls\n    mosGroup.controls = [];\n    this._populateGroupControls(context, mosGroup.controls, group[Constants.InputChildren]);\n  }\n\n  private _populateGroupIcons(\n    context: ConversionContext,\n    group: MOS.ExtensionCommonCustomGroup,\n    groupIcons: [],\n    groupIconResIds: [],\n  ): void {\n    if (Utilities.isNullOrUndefined(groupIcons)) {\n      return;\n    }\n\n    let iconIdx: number = 0;\n\n    for (let size in groupIcons) {\n      const url: string = groupIcons[size];\n      const mosIcon: MOS.ExtensionCommonIcon = new MOS.ExtensionCommonIcon();\n\n      context.setCurrentIconIndex(iconIdx);\n\n      let fileShortName: string = this._iconBuilder.addIconAndGetReference(url, !Utilities._writeImageUrls, false);\n\n      // formerly there was an else{} with mosIcon.file for the case when the icons are in the package\n      mosIcon.url = fileShortName;\n\n      mosIcon.size = +size;\n\n      this._populateLocaleSensitiveProperty;\n\n      this._getResourceAndWriteLocalizedValues(\n        groupIconResIds[size],\n        fileShortName,\n        Constants.MaxResourceStringLength2048,\n        context.getCurrentVersionOverrideNumber(),\n        Utilities._writeImageUrls ? Constants.RibbonsTabsGroupsIconsUrl : Constants.RibbonsTabsGroupsIconsFile,\n        ResourceType.AllLocaleImages,\n        context.getCurrentRibbonIndex(),\n        context.getCurrentTabIndex(),\n        context.getCurrentGroupIndex(),\n        context.getCurrentIconIndex(),\n        ConversionContext.UnsetIndex,\n      );\n\n      if (Utilities.isNullOrUndefined(group.icons)) {\n        group.icons = [];\n      }\n\n      group.icons.push(mosIcon);\n\n      iconIdx++;\n    }\n  }\n\n  private _createUniqueId(legacyId: string): string {\n    let uniqueSuffix: number = this.getNextUniqueSuffix();\n    return legacyId + \"_\" + uniqueSuffix;\n  }\n\n  private _createUniqueActionId(id: string): string {\n    let uniqueSuffix: number = this.getNextActionSuffix();\n    return id + \"_\" + uniqueSuffix;\n  }\n\n  private _createUniqueViewId(id: string): string {\n    let uniqueSuffix: number = this.getNextViewSuffix();\n    return id + \"_\" + uniqueSuffix;\n  }\n\n  private _populateGroupControls(context: ConversionContext, mosControls: any[], controls: []): void {\n    for (let idx: number = 0; idx < controls.length; idx++) {\n      let control: Object = controls[idx];\n      context.setCurrentControlIndex(idx);\n\n      switch (control[Constants.InputControlType]) {\n        case Constants.InputButton:\n          let buttonControl: MOS.ExtensionCommonCustomGroupControlsItem =\n            new MOS.ExtensionCommonCustomGroupControlsItem();\n          this._populateButtonControl(context, buttonControl, control);\n          mosControls.push(buttonControl);\n          break;\n        case Constants.InputMenu:\n          let menuControl: MOS.ExtensionCommonCustomControlMenu = new MOS.ExtensionCommonCustomControlMenu();\n          this._populateMenuControl(context, menuControl, control);\n          mosControls.push(menuControl);\n          break;\n        default:\n          throw \"need to handle legacy control type: \" + control[Constants.InputControlType];\n      }\n    }\n\n    context.setCurrentControlIndex(ConversionContext.UnsetIndex);\n  }\n\n  private _populateMenuControl(\n    context: ConversionContext,\n    menuControl: MOS.ExtensionCommonCustomControlMenu,\n    control: Object,\n  ): void {\n    if (\n      Utilities.isNullOrUndefined(control?.[Constants.InputChildren]) ||\n      control[Constants.InputChildren].length == 0\n    ) {\n      return;\n    }\n\n    this._populateControlProperties(context, menuControl, control);\n\n    // populate each menu item\n    for (let idx: number = 0; idx < control[Constants.InputChildren].length; idx++) {\n      let menuItemObject: Object = control[Constants.InputChildren][idx];\n      let menuItem: MOS.ExtensionCommonCustomControlMenuItem = new MOS.ExtensionCommonCustomControlMenuItem();\n\n      context.setCurrentMenuItemIndex(idx); // used for ribbons\n      context.setCurrentContextMenuMenuControlMenuItemIndex(idx); // used for context menus\n      this._populateMenuItem(context, menuItem, menuItemObject);\n\n      if (Utilities.isNullOrUndefined(menuControl.items)) {\n        menuControl.items = [];\n      }\n\n      menuControl.items.push(menuItem);\n    }\n\n    context.setCurrentMenuItemIndex(ConversionContext.UnsetIndex);\n    context.setCurrentContextMenuMenuControlMenuItemIndex(ConversionContext.UnsetIndex);\n  }\n\n  private _populateMenuItem(\n    context: ConversionContext,\n    menuItemControl: MOS.ExtensionCommonCustomControlMenuItem,\n    control: Object,\n  ): void {\n    let menuItemObject: Object = control[Constants.InputMenuItem];\n    this._populateControlProperties(context, menuItemControl, control);\n  }\n\n  private _populateControlProperties(context: ConversionContext, mosControl: Object, control: Object): void {\n    let isRibbon: boolean = context.isInRibbon();\n    let isFixedControl: boolean = context.isInFixedControl();\n    let isMenuItem: boolean = false;\n    if (control[Constants.InputControlType] === Constants.InputButton) {\n      let mosButton: MOS.ExtensionCommonCustomGroupControlsItem = <MOS.ExtensionCommonCustomGroupControlsItem>(\n        mosControl\n      );\n\n      mosButton.enabled = control[Constants.InputEnabled];\n      mosButton.id = control[Constants.InputId];\n      mosButton.label = this._populateControlLocalizedField(\n        context,\n        control[Constants.InputLabelResId],\n        control[Constants.InputLabel],\n        Constants.MaxResourceStringLength64,\n        ResourceType.AllLocaleShortStrings,\n        isRibbon ? (isFixedControl ? Constants.RibbonsFixedControlsLabel : Constants.RibbonsTabsGroupsControlsLabel) : Constants.ContextMenusMenusControlsLabel,\n      );\n      mosButton.type = MOS.ExtensionCommonCustomGroupControlsItemType.Button;\n\n      if (!context.isInFixedControl()) {\n        mosButton.overriddenByRibbonApi = Utilities.isNullOrUndefined(control[Constants.InputOverridenByRibbonApi])\n          ? false\n          : control[Constants.InputOverridenByRibbonApi];\n      }\n    } else if (control[Constants.InputControlType] === Constants.InputMenuItem) {\n      let mosMenuItem: MOS.ExtensionCommonCustomControlMenuItem = <MOS.ExtensionCommonCustomControlMenuItem>mosControl;\n\n      mosMenuItem.enabled = control[Constants.InputEnabled];\n      mosMenuItem.id = control[Constants.InputId];\n      mosMenuItem.label = this._populateControlLocalizedField(\n        context,\n        control[Constants.InputLabelResId],\n        control[Constants.InputLabel],\n        Constants.MaxResourceStringLength64,\n        ResourceType.AllLocaleShortStrings,\n        isRibbon ? Constants.RibbonsTabsGroupsControlsItemsLabel : Constants.ContextMenusMenusControlsItemsLabel,\n      );\n      mosMenuItem.type = MOS.ExtensionCommonCustomControlMenuItemType.MenuItem;\n      mosMenuItem.overriddenByRibbonApi = Utilities.isNullOrUndefined(control[Constants.InputOverridenByRibbonApi])\n        ? false\n        : control[Constants.InputOverridenByRibbonApi];\n\n      isMenuItem = true;\n    } else if (control[Constants.InputControlType] === Constants.InputMenu) {\n      let mosMenu: MOS.ExtensionCommonCustomControlMenu = <MOS.ExtensionCommonCustomControlMenu>mosControl;\n\n      mosMenu.id = control[Constants.InputId];\n      mosMenu.label = this._populateControlLocalizedField(\n        context,\n        control[Constants.InputLabelResId],\n        control[Constants.InputLabel],\n        Constants.MaxResourceStringLength64,\n        ResourceType.AllLocaleShortStrings,\n        isRibbon ? Constants.RibbonsTabsGroupsControlsLabel : Constants.ContextMenusMenusControlsLabel,\n      );\n      mosMenu.type = MOS.ExtensionCommonCustomControlMenuType.Menu;\n      mosMenu.overriddenByRibbonApi = Utilities.isNullOrUndefined(control[Constants.InputOverridenByRibbonApi])\n        ? false\n        : control[Constants.InputOverridenByRibbonApi];\n    } else {\n      Utilities.logError(\"Unrecognized control: \" + control[Constants.InputControlType]);\n      return;\n    }\n\n    // Menus have no action.  Only Buttons and MenuItems do.\n    if (control[Constants.InputControlType] !== Constants.InputMenu) {\n      this._populateControlAction(context, mosControl, control);\n    }\n\n    this._populateControlSupertip(context, mosControl, control);\n\n    if (!Utilities.isNullOrUndefined(control[Constants.InputIcon])) {\n      mosControl[Constants.MosIcons] = [];\n      this._populateControlIcons(\n        context,\n        mosControl[Constants.MosIcons],\n        control[Constants.InputIcon],\n        control[Constants.InputIconResId],\n        isMenuItem,\n      );\n    }\n  }\n\n  private _populateMobileControlProperties(\n    context: ConversionContext,\n    mosMobileControl: MOS.ExtensionRibbonsCustomMobileControlButtonItem,\n    control: Object,\n  ) {\n    // Set mobile control properties\n    mosMobileControl.type = MOS.ExtensionRibbonsCustomMobileControlButtonItemType.MobileButton;\n\n    // If the label or labelResId exist then we try to set the label field and localized fields\n    if (\n      !Utilities.isNullOrUndefined(control[Constants.InputLabel]) ||\n      !Utilities.isNullOrUndefined(control[Constants.InputLabelResId])\n    ) {\n      mosMobileControl.label = this._populateControlLocalizedField(\n        context,\n        control[Constants.InputLabelResId],\n        control[Constants.InputLabel],\n        Constants.MaxResourceStringLength32,\n        ResourceType.AllLocaleShortStrings,\n        Constants.RibbonsTabsCustomMobileRibbonGroupsControlsLabel,\n      );\n    }\n\n    if (!Utilities.isNullOrUndefined(control[Constants.InputAction])) {\n      this._populateControlAction(context, mosMobileControl, control);\n    }\n\n    if (!Utilities.isNullOrUndefined(control[Constants.InputId])) {\n      mosMobileControl.id = control[Constants.InputId];\n    } else {\n      mosMobileControl.id = this._createUniqueId(\"mobileControl\");\n    }\n\n    if (!Utilities.isNullOrUndefined(control[Constants.InputIcon])) {\n      mosMobileControl.icons = [];\n      this._populateMobileControlIcon(context, mosMobileControl.icons, control[Constants.InputIcon]);\n    }\n  }\n\n  private _populateMobileControlIcon(\n    context: ConversionContext,\n    mosMobileControlIcons: MOS.ExtensionCustomMobileIcon[],\n    icon: Object,\n  ) {\n    if (!Utilities.isNullOrUndefined(icon) && !Utilities.isNullOrUndefined(icon[Constants.InputImages])) {\n      context.setCurrentIconIndex(0);\n\n      for (var idx: number = 0; idx < icon[Constants.InputImages].length; idx++) {\n        let image: Object = icon[Constants.InputImages][idx];\n        let mosIcon: MOS.ExtensionCustomMobileIcon = new MOS.ExtensionCustomMobileIcon();\n\n        if (!Utilities.isNullOrUndefined(image[Constants.InputScale])) {\n          mosIcon.scale = Number(image[Constants.InputScale]);\n        }\n\n        if (!Utilities.isNullOrUndefined(image[Constants.InputSize])) {\n          mosIcon.size = Number(image[Constants.InputSize]);\n        }\n\n        if (!Utilities.isNullOrUndefined(image[Constants.InputResid])) {\n          mosIcon.url = this._getResourceAndWriteLocalizedValues(\n            image[Constants.InputResid],\n            null,\n            Constants.MaxResourceStringLength2048,\n            context.getCurrentVersionOverrideNumber(),\n            Constants.RibbonsTabsCustomMobileRibbonGroupsControlsIconsUrl,\n            ResourceType.AllLocaleImages,\n            context.getCurrentRibbonIndex(),\n            context.getCurrentTabIndex(),\n            context.getCurrentCustomMobileGroupIndex(),\n            context.getCurrentControlIndex(),\n            context.getCurrentIconIndex(),\n          );\n        }\n\n        mosMobileControlIcons.push(mosIcon);\n        context.setCurrentIconIndex(context.getCurrentIconIndex() + 1);\n      }\n    }\n\n    context.setCurrentIconIndex(ConversionContext.UnsetIndex);\n  }\n\n  private _populateControlLocalizedField(\n    context: ConversionContext,\n    labelResId: string,\n    defaultValue: string,\n    maxLength: number,\n    resourceType: ResourceType,\n    resourceString: string,\n  ): string {\n    if (context.isInRibbon()) {\n      if (context.isInFixedControl()) {\n        // If we are populating the ribbon inside of fixed controls\n        return this._getResourceAndWriteLocalizedValues(\n          labelResId,\n          defaultValue,\n          maxLength,\n          context.getCurrentVersionOverrideNumber(),\n          resourceString,\n          resourceType,\n          context.getCurrentRibbonIndex(),\n          context.getCurrentFixedControlIndex(),\n          ConversionContext.UnsetIndex,\n          ConversionContext.UnsetIndex,\n          ConversionContext.UnsetIndex,\n        );        \n      } else {\n        // If we are populating the ribbon inside of tabs\n        return this._getResourceAndWriteLocalizedValues(\n          labelResId,\n          defaultValue,\n          maxLength,\n          context.getCurrentVersionOverrideNumber(),\n          resourceString,\n          resourceType,\n          context.getCurrentRibbonIndex(),\n          context.getCurrentTabIndex(),\n          context.getCurrentCustomMobileGroupIndex() == ConversionContext.UnsetIndex\n            ? context.getCurrentGroupIndex()\n            : context.getCurrentCustomMobileGroupIndex(),\n          context.getCurrentControlIndex(),\n          context.getCurrentMenuItemIndex(),\n        );\n      }\n    } else {\n      // If we are not populating the ribbon then we are populating a context menu\n      return this._getResourceAndWriteLocalizedValues(\n        labelResId,\n        defaultValue,\n        maxLength,\n        context.getCurrentVersionOverrideNumber(),\n        resourceString,\n        resourceType,\n        context.getCurrentContextMenuIndex(),\n        context.getCurrentContextMenuMenuIndex(),\n        context.getCurrentContextMenuMenuControlIndex(),\n        context.getCurrentContextMenuMenuControlMenuItemIndex(),\n        ConversionContext.UnsetIndex,\n      );\n    }\n  }\n\n  private _populateButtonControl(\n    context: ConversionContext,\n    buttonControl: MOS.ExtensionCommonCustomGroupControlsItem,\n    control: Object,\n  ): void {\n    this._populateControlProperties(context, buttonControl, control);\n  }\n\n  private _populateControlAction(context: ConversionContext, mosControl: Object, control: Object): void {\n    // Handle the action within the button\n    if (!Utilities.isNullOrUndefined(control) && !Utilities.isNullOrUndefined(control[Constants.InputAction])) {\n      let runtimeUrl: string = null;\n\n      let functionName: string = control[Constants.InputAction][Constants.InputFunctionName];\n\n      if (context.isInFixedControl()) {\n        runtimeUrl = control[Constants.InputSourceLocationResid];\n      } else if (!Utilities.isNullOrUndefined(control[Constants.InputAction][Constants.InputSourceLocationResid])) {\n        runtimeUrl = control[Constants.InputAction][Constants.InputSourceLocationResid];\n      } else if (!Utilities.isNullOrUndefined(functionName)) {\n        runtimeUrl = context.getCurrentFunctionFileResid();\n      }\n\n      let runtime: MOS.Runtimes = null;\n      // We need more implementation to look if the Id is available in the SharedRuntime array and check the Lifetime of it.\n      let runtimeLookupKey: string = Converter._generateRuntimeLookupKey(\n        runtimeUrl,\n        MOS.RuntimesLifetime.Short,\n        context.getCurrentVersionOverrideCapabilities(),\n        context.getFormFactor()\n      );\n      if (!Utilities.isNullOrUndefined(runtimeLookupKey)) {\n        runtime = this._runtimeLookup[runtimeLookupKey];\n      }\n\n      if (Utilities.isNullOrUndefined(runtime)) {\n        Utilities.assert(!Utilities.isNullOrUndefined(runtime), \"Expected runtime to be cached.\");\n        Utilities.logError(\"Did not find runtime. \" + runtimeLookupKey);\n        return;\n      }\n\n      let actionId: string = Constants.InputAction;\n\n      // If this is an ExecuteFunction type with a function name then we use the function name as the action id\n      if (!Utilities.isNullOrUndefined(functionName)) {\n        actionId = functionName;\n      } else {\n        // If there is a taskpane id then we use it as a base so it is easier to identify the action\n        // however we always append a unique integer to make sure that the action ids won't collide.\n        if (!Utilities.isNullOrUndefined(control[Constants.InputAction][Constants.InputTaskpaneId])) {\n          actionId = control[Constants.InputAction][Constants.InputTaskpaneId];\n        }\n\n        actionId = this._createUniqueActionId(actionId);\n      }\n\n      if (Utilities.isNullOrUndefined(runtime.actions)) {\n        runtime.actions = [];\n      }\n\n      if (!Utilities.isNullOrUndefined(control[Constants.InputAction][Constants.InputSourceLocationResid])) {\n        let action: MOS.ExtensionRuntimesActionsItem = new MOS.ExtensionRuntimesActionsItem();\n\n        action.id = actionId;\n        action.pinnable = control[Constants.InputAction][Constants.InputPinnable];\n        if (Utilities.isNullOrUndefined(control[Constants.InputAction][Constants.InputTaskpaneId])) {\n          action.view = this._createUniqueViewId(Constants.MosView);\n        } else {\n          action.view = control[Constants.InputAction][Constants.InputTaskpaneId];\n        }\n\n        action.displayName = actionId;\n        action.type = MOS.ExtensionRuntimesActionsItemType.OpenPage;\n\n        // TODO: Currently casting these and they still show up as \"type=executeFunction\" but the schema\n        // currently doesn't allow the two types to be in the same runtime.  This is something that needs to be resolved.\n        Utilities.log(\"Adding ShowTaskpane action: \" + action.id);\n        runtime.actions.push(action);\n      } else if (!Utilities.isNullOrUndefined(control[Constants.InputAction][Constants.InputFunctionName])) {\n        let action: MOS.ExtensionRuntimesActionsItem = new MOS.ExtensionRuntimesActionsItem();\n        action.id = actionId;\n        action.displayName = actionId;\n        action.type = MOS.ExtensionRuntimesActionsItemType.ExecuteFunction;\n        Utilities.log(\"Adding ExecuteAction action: \" + action.id);\n        runtime.actions.push(action);\n      }\n\n      // Finally link the control in the ribbon with the action inside of the runtime\n      mosControl[Constants.MosActionId] = actionId;\n    } else {\n      Utilities.logError(\"Expected action and sourceLocation in button or menu control.\");\n    }\n  }\n\n  private _controlTypeFromString(controlType: string): MOS.ExtensionCommonCustomGroupControlsItemType {\n    if (!Utilities.isNullOrUndefined(controlType)) {\n      switch (controlType) {\n        case Constants.InputButton:\n          return MOS.ExtensionCommonCustomGroupControlsItemType.Button;\n      }\n    }\n    throw \"unable to find control type:\" + controlType;\n  }\n\n  private _populateControlIcons(\n    context: ConversionContext,\n    mosControlIcons: MOS.ExtensionCommonIcon[],\n    icons: [],\n    iconResIds: [],\n    isMenuItem: boolean,\n  ): void {\n    if (Utilities.isNullOrUndefined(icons)) {\n      return;\n    }\n\n    let iconIdx: number = 0;\n\n    for (let size in icons) {\n      const url: string = icons[size];\n      const resId: string = iconResIds[size];\n\n      context.setCurrentIconIndex(iconIdx);\n\n      const mosIcon: MOS.ExtensionCommonIcon = new MOS.ExtensionCommonIcon();\n\n      let fileShortName: string = this._iconBuilder.addIconAndGetReference(url, !Utilities._writeImageUrls, false);\n\n      if (context.isInRibbon()) {\n        if (!context.isInFixedControl()) {\n          if (isMenuItem) {\n            this._getResourceAndWriteLocalizedValues(\n              resId,\n              fileShortName,\n              Constants.MaxResourceStringLength2048,\n              context.getCurrentVersionOverrideNumber(),\n              Utilities._writeImageUrls\n                ? Constants.RibbonsTabsGroupsControlsItemsIconsUrl\n                : Constants.RibbonsTabsGroupsControlsItemsIconsFile,\n              ResourceType.AllLocaleImages,\n              context.getCurrentRibbonIndex(),\n              context.getCurrentTabIndex(),\n              context.getCurrentGroupIndex(),\n              context.getCurrentControlIndex(),\n              context.getCurrentMenuItemIndex(),\n              context.getCurrentIconIndex(),\n            );\n          } else {\n            this._getResourceAndWriteLocalizedValues(\n              resId,\n              fileShortName,\n              Constants.MaxResourceStringLength2048,\n              context.getCurrentVersionOverrideNumber(),\n              Utilities._writeImageUrls\n                ? Constants.RibbonsTabsGroupsControlsIconsUrl\n                : Constants.RibbonsTabsGroupsControlsIconsFile,\n              ResourceType.AllLocaleImages,\n              context.getCurrentRibbonIndex(),\n              context.getCurrentTabIndex(),\n              context.getCurrentGroupIndex(),\n              context.getCurrentControlIndex(),\n              context.getCurrentIconIndex(),\n            );\n          }\n        } else {\n          this._getResourceAndWriteLocalizedValues(\n            resId,\n            fileShortName,\n            Constants.MaxResourceStringLength2048,\n            context.getCurrentVersionOverrideNumber(),\n            Constants.RibbonsFixedControlsIconsUrl,\n            ResourceType.AllLocaleImages,\n            context.getCurrentRibbonIndex(),\n            context.getCurrentFixedControlIndex(),\n            context.getCurrentIconIndex(),\n            ConversionContext.UnsetIndex,\n            ConversionContext.UnsetIndex\n          );\n        }\n      } else {\n        // If we are populating a context menu\n\n        if (isMenuItem) {\n          this._getResourceAndWriteLocalizedValues(\n            resId,\n            fileShortName,\n            Constants.MaxResourceStringLength2048,\n            context.getCurrentVersionOverrideNumber(),\n            Utilities._writeImageUrls\n              ? Constants.ContextMenusMenusControlsItemsIconsUrl\n              : Constants.ContextMenusMenusControlsItemsIconsFile,\n            ResourceType.AllLocaleImages,\n            context.getCurrentContextMenuIndex(),\n            context.getCurrentContextMenuMenuIndex(),\n            context.getCurrentContextMenuMenuControlIndex(),\n            context.getCurrentContextMenuMenuControlMenuItemIndex(),\n            context.getCurrentIconIndex(),\n            ConversionContext.UnsetIndex,\n          );\n        } else {\n          this._getResourceAndWriteLocalizedValues(\n            resId,\n            fileShortName,\n            Constants.MaxResourceStringLength2048,\n            context.getCurrentVersionOverrideNumber(),\n            Utilities._writeImageUrls\n              ? Constants.ContextMenusMenusControlsIconsUrl\n              : Constants.ContextMenusMenusControlsIconsFile,\n            ResourceType.AllLocaleImages,\n            context.getCurrentContextMenuIndex(),\n            context.getCurrentContextMenuMenuIndex(),\n            context.getCurrentContextMenuMenuControlIndex(),\n            context.getCurrentIconIndex(),\n            ConversionContext.UnsetIndex,\n          );\n        }\n      }\n\n      // formerly there was an else{} with mosIcon.file for the case when the icons are in the package\n      mosIcon.url = fileShortName;\n\n      mosIcon.size = +size;\n      mosControlIcons.push(mosIcon);\n\n      iconIdx++;\n    }\n  }\n\n  private _populateControlSupertip(context: ConversionContext, mosControl: Object, control: Object): void {\n    let supertip: Object = control[Constants.InputSupertip];\n    // Only create the supertip if the legacy control has one\n    if (Utilities.isNullOrUndefined(supertip)) {\n      return;\n    }\n\n    let isRibbon: boolean = context.isInRibbon();\n    let isFixedControl: boolean = context.isInFixedControl();\n\n    if (mosControl[Constants.MosType] === MOS.ExtensionCommonCustomGroupControlsItemType.Button) {\n      let mosButton: MOS.ExtensionCommonCustomGroupControlsItem = <MOS.ExtensionCommonCustomGroupControlsItem>(\n        mosControl\n      );\n      mosButton.supertip = new MOS.ExtensionCommonSuperToolTip();\n      mosButton.supertip.description = this._populateControlLocalizedField(\n        context,\n        supertip[Constants.InputDescriptionResId],\n        supertip[Constants.InputDescription],\n        Constants.MaxResourceStringLength128,\n        ResourceType.AllLocaleLongStrings,\n        isRibbon ? (isFixedControl ? Constants.RibbonsFixedControlsSuperTipDescription : Constants.RibbonsTabsGroupsControlsSupertipDescription)\n          : Constants.ContextMenusMenusControlsSupertipDescription,\n      );\n      mosButton.supertip.title = this._populateControlLocalizedField(\n        context,\n        supertip[Constants.InputTitleResId],\n        supertip[Constants.InputTitle],\n        Constants.MaxResourceStringLength64,\n        ResourceType.AllLocaleShortStrings,\n        isRibbon ? (isFixedControl ? Constants.RibbonsFixedControlsSuperTipTitle : Constants.RibbonsTabsGroupsControlsSupertipTitle) : Constants.ContextMenusMenusControlsSupertipTitle,\n      );\n    } else if (mosControl[Constants.MosType] === MOS.ExtensionCommonCustomControlMenuItemType.MenuItem) {\n      let mosMenuItem: MOS.ExtensionCommonCustomControlMenuItem = <MOS.ExtensionCommonCustomControlMenuItem>mosControl;\n      mosMenuItem.supertip = new MOS.ExtensionCommonSuperToolTip();\n\n      mosMenuItem.supertip.description = this._populateControlLocalizedField(\n        context,\n        supertip[Constants.InputDescriptionResId],\n        supertip[Constants.InputDescription],\n        Constants.MaxResourceStringLength128,\n        ResourceType.AllLocaleLongStrings,\n        isRibbon\n          ? Constants.RibbonsTabsGroupsControlsItemsSupertipDescription\n          : Constants.ContextMenusMenusControlsItemsSupertipDescription,\n      );\n      mosMenuItem.supertip.title = this._populateControlLocalizedField(\n        context,\n        supertip[Constants.InputTitleResId],\n        supertip[Constants.InputTitle],\n        Constants.MaxResourceStringLength64,\n        ResourceType.AllLocaleShortStrings,\n        isRibbon\n          ? Constants.RibbonsTabsGroupsControlsItemsSupertipTitle\n          : Constants.ContextMenusMenusControlsItemsSupertipTitle,\n      );\n    } else if (mosControl[Constants.MosType] === MOS.ExtensionCommonCustomControlMenuType.Menu) {\n      let mosMenu: MOS.ExtensionCommonCustomControlMenu = <MOS.ExtensionCommonCustomControlMenu>mosControl;\n      mosMenu.supertip = new MOS.ExtensionCommonSuperToolTip();\n\n      mosMenu.supertip.description = this._populateControlLocalizedField(\n        context,\n        supertip[Constants.InputDescriptionResId],\n        supertip[Constants.InputDescription],\n        Constants.MaxResourceStringLength128,\n        ResourceType.AllLocaleLongStrings,\n        isRibbon\n          ? Constants.RibbonsTabsGroupsControlsSupertipDescription\n          : Constants.ContextMenusMenusControlsSupertipDescription,\n      );\n      mosMenu.supertip.title = this._populateControlLocalizedField(\n        context,\n        supertip[Constants.InputTitleResId],\n        supertip[Constants.InputTitle],\n        Constants.MaxResourceStringLength64,\n        ResourceType.AllLocaleShortStrings,\n        isRibbon ? Constants.RibbonsTabsGroupsControlsSupertipTitle : Constants.ContextMenusMenusControlsSupertipTitle,\n      );\n    } else {\n      Utilities.logError(\"Unexpected control: \" + control[Constants.InputControlType]);\n    }\n  }\n\n  private _addScopesFromHosts(requirements: MOS.RequirementsExtensionElement): void {\n    requirements.scopes = [];\n    // Get the different hosts specified in the top level <Hosts> node and\n    // add the corresponding hosts on the runtime.\n    for (let host in this._xmlManifest.getHosts()) {\n      switch (this._xmlManifest.getHosts()[host]) {\n        case OSF.ManifestHostType.Workbook:\n          requirements.scopes.push(MOS.Scopes.Workbook);\n          break;\n        case OSF.ManifestHostType.Document:\n          requirements.scopes.push(MOS.Scopes.Document);\n          break;\n        case OSF.ManifestHostType.Presentation:\n          requirements.scopes.push(MOS.Scopes.Presentation);\n          break;\n        case OSF.ManifestHostType.Notebook:\n          // TODO: currently don't have notebook scope in mos manifest\n          Utilities.assert(false, \"need to implement notebook scope\");\n          break;\n        case OSF.ManifestHostType.Mailbox:\n          requirements.scopes.push(MOS.Scopes.Mail);\n          break;\n        case OSF.ManifestHostType.Drawing:\n          // TODO: currently don't have notebook scope in mos manifest\n          Utilities.assert(false, \"need to implement drawing scope\");\n          break;\n      }\n    }\n\n    if (requirements.scopes.length == 0) {\n      // If there is no <Hosts> node that tells us what hosts this addin is for, for Outlook/Mailapp, we can try to fall back\n      // on the manifest type which is on the <OfficeApp type=\"\"> node.  This will not work for WXP but will for outlook because\n      // there is a one to one mapping from MailApp to the host Outlook that it works in and applies to.\n      if (\n        !Utilities.isNullOrUndefined(this._xmlManifest._hostType) &&\n        this._xmlManifest.getTarget() == OSF.OfficeAppType.MailApp\n      ) {\n        requirements.scopes.push(MOS.Scopes.Mail);\n      }\n    }\n  }\n\n  private _populateRuntimes(context: ConversionContext, extension: MOS.Extensions): void {\n    let runtimes: MOS.Runtimes[] = [];\n    let contentRuntimes: MOS.ContentRuntimes[] = [];\n\n    // Go through and collect all the different runtimes that are in the manifest\n    // in default settings, runtimes nodes, actions etc. There will be one runtime for each unique url\n\n    let collectedRuntimeRecords = [];\n    this._collectRuntimes(context, collectedRuntimeRecords);\n\n    this._runtimeLookup = {};\n    this._createMosRuntimesFromRuntimeRecords(collectedRuntimeRecords, /*out*/ runtimes, /*out*/ contentRuntimes, this._runtimeLookup);\n\n    if (runtimes.length > 0) {\n      extension.runtimes = runtimes;\n    }\n\n    if (contentRuntimes.length > 0) {\n      extension.contentRuntimes = contentRuntimes;\n    }\n  }\n\n  // The purpose of this method is to coalesce the runtime records from the possible runtimes that we've found into a set of\n  // runtimes that will be used for the remainder of the parsing and where things like actions and functions can be added.\n  private _createMosRuntimesFromRuntimeRecords(\n    runtimeRecords: RuntimeRecord[],\n    runtimes: MOS.Runtimes[],\n    contentRuntimes: MOS.ContentRuntimes[],\n    runtimeLookup: Object,\n  ): void {\n\n    if (runtimeRecords.length == 0) {\n      // no runtime detected. log an error\n      console.error(\n        \"\\x1b[31m%s\\x1b[0m\",\n        'No supported runtime found in \"' +\n          Utilities._inputXmlFilePath +\n          '\", so the converted manifest is invalid. ' +\n          \"Please note that some elements such as ContentPane and DetectedEntity are not supported by metaOS manifest.\",\n      );\n      process.exitCode = 1;\n    }\n\n    // The index of the runtimes that are created. Used to properly create the localization strings like: \"extension[0].runtimes[3]\"\n    let idxRuntime: number = -1;\n    let idxContentRuntime: number = -1;\n\n    // We loop through these runtimes and create unique mosruntimes for each unique sourceLocation/Resid\n    for (let idxRuntimeRecord: number = 0; idxRuntimeRecord < runtimeRecords.length; idxRuntimeRecord++) {\n      let runtimeRecord: RuntimeRecord = runtimeRecords[idxRuntimeRecord];\n\n      // Content runtimes are only supported for content apps and regular runtimes are only supported for TaskPane and MailApps\n      if (runtimeRecord._source == RuntimeSource.DefaultSettingSourceLocations) {\n        if (this._xmlManifest.getTarget() !== OSF.OfficeAppType.ContentApp) {\n          continue;\n        }\n      } else {\n        if (this._xmlManifest.getTarget() === OSF.OfficeAppType.ContentApp) {\n          continue;\n        }\n      }\n\n      // Create runtime lookup key\n      let key: string = runtimeRecord.getKey();\n\n      // Based on the key we lookup the Runtime in the table if it is not added that means we need to create the corrosponding Runtime object in the MOS manifest\n      // If it is already present then we should skip it and continue iterating the loop\n      // This runtime is either a MOS.Runtimes or a MOS.ContentRuntimes\n      let rt: object = runtimeLookup[key];\n\n      if (Utilities.isNullOrUndefined(rt)) {\n\n        if (runtimeRecord._source == RuntimeSource.DefaultSettingSourceLocations) {\n          rt = new MOS.ContentRuntimes();\n          idxContentRuntime++;\n        } else {\n          rt = new MOS.Runtimes();\n          idxRuntime++;\n        }\n\n        rt[Constants.MosId] = \"runtime_\" + this.getNextRuntimeSuffix();\n\n        rt[Constants.MosRequirements] = Converter._cloneRequirements(runtimeRecord._requirements);\n        rt[Constants.MosRequirements].capabilities = runtimeRecord._versionOverrideCapabilities;\n\n        if (!Utilities.isNullOrUndefined(runtimeRecord._inputFormFactor)) {\n\n          let formFactor: MOS.FormFactors = Converter._legacyFormFactorToMOSFormFactor(runtimeRecord._inputFormFactor);\n\n          if (Utilities.isNullOrUndefined(rt[Constants.MosRequirements])) {\n            rt[Constants.MosRequirements] = new MOS.RequirementsExtensionElement();\n          }\n\n          if (Utilities.isNullOrUndefined(rt[Constants.MosRequirements].formFactors)) {\n            rt[Constants.MosRequirements].formFactors = [];\n          }\n          rt[Constants.MosRequirements].formFactors.push(formFactor);\n        }\n\n        // All of these are regular runtimes\n        if (\n          runtimeRecord._source == RuntimeSource.ShowTaskpane ||\n          runtimeRecord._source == RuntimeSource.ExecuteFunction ||\n          runtimeRecord._source == RuntimeSource.SharedRuntimes ||\n          runtimeRecord._source == RuntimeSource.LaunchEvent ||\n          runtimeRecord._source == RuntimeSource.ReportPhishing\n        ) {\n\n          let runtime: MOS.Runtimes = <MOS.Runtimes>(<unknown>rt);\n\n          runtime.type = MOS.RuntimesType.General;\n          runtime.lifetime = runtimeRecord._lifetime;\n\n          runtime.code.page = this._getResourceAndWriteLocalizedValues(\n            runtimeRecord._resource,\n            null,\n            Constants.MaxResourceStringLength2048,\n            runtimeRecord._versionOverridesNumber,\n            Constants.RuntimesPage,\n            ResourceType.AllLocaleUrls,\n            idxRuntime,\n          );\n          if (!Utilities.isNullOrUndefined(runtimeRecord._scriptResId)) {\n            runtime.code.script = this._getResourceAndWriteLocalizedValues(\n              runtimeRecord._scriptResId,\n              null,\n              Constants.MaxResourceStringLength2048,\n              runtimeRecord._versionOverridesNumber,\n              Constants.RuntimesScript,\n              ResourceType.AllLocaleUrls,\n              idxRuntime,\n            );\n          }\n        } else if (runtimeRecord._source == RuntimeSource.DefaultSettingSourceLocations) {\n\n          let contentRuntime: MOS.ContentRuntimes = <MOS.ContentRuntimes>(<unknown>rt);\n\n          // DefaultSettings are in content apps and are used for in content add ins/agaves and are content runtimes\n          contentRuntime.disableSnapshot = !this._xmlManifest.isAllowSnapshot();\n\n          // We only support mobile and desktop\n          let osfFormFactor: OSF.FormFactor = runtimeRecord._inputFormFactor === Constants.InputMobileFormFactor ? OSF.FormFactor.Phone : OSF.FormFactor.Desktop;\n\n          let defaultWidth: any = this._xmlManifest.getDefaultWidth(osfFormFactor);\n          let defaultHeight: any = this._xmlManifest.getDefaultHeight(osfFormFactor);\n\n          if (!Utilities.isNullOrUndefined(defaultWidth)) {\n            contentRuntime.requestedWidth = +defaultWidth;\n          }\n\n          if (!Utilities.isNullOrUndefined(defaultHeight)) {\n            contentRuntime.requestedHeight = +defaultHeight;\n          }\n\n          // DefaultSettings are outside of VersionOverrides so they have the translations in <Override> nodes and these\n          // are stored in the runtimeRecord._localResources property.  Therefore we don't do a resId lookup here (which is VersionOverride mechanism)\n          // but instead look up the proper language string in runtimeRecord._localeResources.\n          if (!Utilities.isNullOrUndefined(runtimeRecord._localeResources[this._xmlManifest.getDefaultLocale()])) {\n            contentRuntime[Constants.MosCode].page = runtimeRecord._localeResources[this._xmlManifest.getDefaultLocale()];\n          } else if (!Utilities.isNullOrUndefined(runtimeRecord._resource)) {\n            contentRuntime[Constants.MosCode].page = runtimeRecord._resource;\n          }\n        } else {\n          Utilities.logError(\n            \"Unrecognized runtimerecord._source: \" + runtimeRecord._source + \"runtime.source: \" + runtimeRecord._source,\n          );\n        }\n\n        Utilities.assert(!Utilities.isNullOrUndefined(rt[Constants.MosCode].page), \"runtime.code.page should not be null\");\n\n        // add this runtime to the MOS manifest in the appropriate location\n        if (runtimeRecord._source == RuntimeSource.DefaultSettingSourceLocations) {\n          contentRuntimes.push(<MOS.ContentRuntimes>(<unknown>rt));\n        } else {\n          runtimes.push(<MOS.Runtimes>(<unknown>rt));\n        }\n\n        // Add a lookup to this runtime so that it can easily be found later when parsing the rest of the manifest\n        // And finding things like Actions that need to be assigned to a particular runtime that matches their source location url.\n        runtimeLookup[key] = rt;\n\n        // Now create the localized strings for this runtime\n        if (!Utilities.isNullOrUndefined(runtimeRecord._localeResources)) {\n          for (let locale in runtimeRecord._localeResources) {\n            // The default locale values are written into the main manifest file and do not need separate localized resources in another file\n            if (locale == this._xmlManifest.getDefaultLocale()) {\n              continue;\n            }\n\n            let resourceTemplate = \"\";\n\n            if (!Utilities.isNullOrUndefined(rt[Constants.MosCode].page)) {\n\n              let resourceName: string = null;\n\n              // Now add a localized resource like runtimes[1].code.page or contentRuntimes[1].code.script\n              if (runtimeRecord._source == RuntimeSource.DefaultSettingSourceLocations) {\n                resourceTemplate = Constants.ContentRuntimesPage;\n                resourceName = util.format(resourceTemplate, idxContentRuntime);\n              } else {\n                resourceTemplate = Constants.RuntimesPage;\n                resourceName = util.format(resourceTemplate, idxRuntime);\n              }\n\n              this._localeBuilder.addLocaleString(locale, resourceName, runtimeRecord._localeResources[locale]);\n            }\n\n            // code.script is not set for ContentApps so we only need to handle it for general runtimes here (ie extension[0].runtimes and not extension[0].contentRuntimes)\n            if (!Utilities.isNullOrUndefined(rt[Constants.MosCode].script)) {\n              resourceTemplate = Constants.RuntimesScript;\n              // Now add a localized resource like runtimes[1].code.script\n              let resourceName: string = util.format(resourceTemplate, idxRuntime);\n              this._localeBuilder.addLocaleString(locale, resourceName, runtimeRecord._localeResources[locale]);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  private _collectRuntimes(context: ConversionContext, collectedRuntimes: RuntimeRecord[]): void {\n    // Get runtimes from default settings\n    // Loop over form factors and add runtime for each:  \"mobile\", \"desktop\", \"tablet\" etc.\n    for (let formFactor in OSF.FormFactor) {\n      try {\n        let formFactorsSourceLocation: string = this._xmlManifest.getDefaultSourceLocation(formFactor);\n\n        // If there is a source location for this form factor then we create a runtime for it\n        if (!Utilities.isNullOrUndefined(formFactorsSourceLocation)) {\n          context.setFormFactor(Converter._oSFFormFactorToInputFormFactor(formFactor));\n          this._addRuntimeForFormFactor(context, collectedRuntimes, formFactor, formFactorsSourceLocation);\n          context.setFormFactor(null);\n        }\n      } catch {\n        // xmlManifest throws when there are no default settings at all\n        continue;\n      }\n    }\n\n    // Get runtime records from <Runtimes> for each type of app (in the legacy manifest, app like document, workbook etc. is also\n    // referred to as \"capability\" but this is not to be confused with \"capability\" in the new mos manifest which is part of the\n    // requirements and is essentially means what features are supported on the host.\n    for (let manifestHostType in OSF.ManifestHostType) {\n      if (\n        manifestHostType === OSF.ManifestHostType.Mailbox ||\n        manifestHostType === OSF.ManifestHostType.Document ||\n        manifestHostType === OSF.ManifestHostType.Presentation ||\n        manifestHostType === OSF.ManifestHostType.Workbook\n      ) {\n        // By default the cabability string is also the overrides lookup property\n        let hostType: string = Converter._getVersionOverrideHostTypeFromOsfManifestHostType(manifestHostType);\n\n        if (!Utilities.isNullOrUndefined(this._xmlManifest._versionOverrides[hostType])) {\n          // Handle WXP VersionOverride\n          if (Converter._isWXP(hostType)) {\n            // Set the capabilities (legacy requirement sets) in the context so that this can be set propertly in the runtime records\n            Converter._setVersionOverrideNumberAndCapabilitiesInContext(\n              context,\n              this._xmlManifest,\n              hostType,\n              OSF.VersionOverridesNumber.V1_0.toString(),\n            );\n\n            // Currently WXP is only handling the desktop form factor\n            context.setFormFactor(Constants.InputDesktopFormFactor);\n\n            if (!Utilities.isNullOrUndefined(this._xmlManifest._versionOverrides[hostType]._runtimes)) {\n              this._collectRuntimeRecordsFromRuntimes(\n                context,\n                collectedRuntimes,\n                this._xmlManifest._versionOverrides[hostType]._runtimes,\n                manifestHostType,\n                RuntimeSource.SharedRuntimes,\n              );\n            }\n            context.setFormFactor(null);\n\n            // First look for information under the override\n            let addinCommandsExtensionPoints: [] = Converter._getAddinCommandsExtensionPoints(\n              hostType,\n              null,\n              Constants.InputDesktopFormFactor,\n              this._xmlManifest,\n            );\n\n            let functionFileResid: Object = Converter._getFunctionFileResid(hostType, null, this._xmlManifest);\n\n            if (!Utilities.isNullOrUndefined(functionFileResid)) {\n              this._collectRuntimesFromFunctionFiles(context, functionFileResid, collectedRuntimes, manifestHostType);\n            }\n\n            if (!Utilities.isNullOrUndefined(addinCommandsExtensionPoints)) {\n              context.setFormFactor(Constants.InputDesktopFormFactor);\n              this._collectRuntimeRecordsFromExtensionPoints(\n                context,\n                addinCommandsExtensionPoints,\n                collectedRuntimes,\n                manifestHostType,\n              );\n              context.setFormFactor(null);\n            }\n\n            // Reset this in the context since we are done loading these from the overrides\n            Converter._clearVersionOverrideNumberAndCapabilitiesInContext(context);\n\n            // Reset form factor in the context\n            context.setFormFactor(null);\n          }\n          // Outlook VersionOverride case\n          else if (hostType === Constants.InputMailHost) {\n            let supportedVersionOverrides = Converter._getMailHostVersionOVerrides();\n\n            // Now look for extension points in each override\n            for (let vo of supportedVersionOverrides) {\n              // Set the capabilities (legacy requirement sets) in the context so that this can be set propertly in the runtime records\n              Converter._setVersionOverrideNumberAndCapabilitiesInContext(context, this._xmlManifest, hostType, vo);\n\n              if (!Utilities.isNullOrUndefined(this._xmlManifest._versionOverrides[hostType][vo])) {\n                // Get runtimes from <Runtime> nodes\n\n                // <Runtimes> node is used in the shared runtimes feature and this is only applicable for desktop\n                context.setFormFactor(Constants.InputDesktopFormFactor);\n                if (!Utilities.isNullOrUndefined(this._xmlManifest._versionOverrides[hostType][vo]._runtimes)) {\n                  this._collectRuntimeRecordsFromRuntimes(\n                    context,\n                    collectedRuntimes,\n                    this._xmlManifest._versionOverrides[hostType][vo]._runtimes,\n                    manifestHostType,\n                    RuntimeSource.SharedRuntimes,\n                  );\n                }\n                context.setFormFactor(null);\n\n                let addinCommandsExtensionPointsVersionsDesktop: [] = Converter._getAddinCommandsExtensionPoints(\n                  hostType,\n                  vo,\n                  Constants.InputDesktopFormFactor,\n                  this._xmlManifest,\n                );\n\n                let addinCommandsExtensionPointsVersionsMobile: [] = Converter._getAddinCommandsExtensionPoints(\n                  hostType,\n                  vo,\n                  Constants.InputMobileFormFactor,\n                  this._xmlManifest,\n                );\n\n                let functionFileResidVersion: Object = Converter._getFunctionFileResid(hostType, vo, this._xmlManifest);\n\n                if (!Utilities.isNullOrUndefined(functionFileResidVersion)) {\n                  this._collectRuntimesFromFunctionFiles(\n                    context,\n                    functionFileResidVersion,\n                    collectedRuntimes,\n                    manifestHostType,\n                  );\n                }\n\n                if (!Utilities.isNullOrUndefined(addinCommandsExtensionPointsVersionsDesktop)) {\n                  context.setFormFactor(Constants.InputDesktopFormFactor);\n                  this._collectRuntimeRecordsFromExtensionPoints(\n                    context,\n                    addinCommandsExtensionPointsVersionsDesktop,\n                    collectedRuntimes,\n                    manifestHostType,\n                  );\n                  context.setFormFactor(null);\n                }\n\n                if (!Utilities.isNullOrUndefined(addinCommandsExtensionPointsVersionsMobile)) {\n                  context.setFormFactor(Constants.InputMobileFormFactor);\n                  this._collectRuntimeRecordsFromExtensionPoints(\n                    context,\n                    addinCommandsExtensionPointsVersionsMobile,\n                    collectedRuntimes,\n                    manifestHostType,\n                  );\n                  context.setFormFactor(null);\n                }\n\n                // Reset this in the context since we are done loading these from the overrides\n                Converter._clearVersionOverrideNumberAndCapabilitiesInContext(context);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  private _collectRuntimeRecordsFromExtensionPoints(\n    context: ConversionContext,\n    addinCommandsExtensionPoints: [],\n    collectedRuntimes: RuntimeRecord[],\n    manifestHostType: OSF.ManifestHostType,\n  ): void {\n    for (\n      let extensionPointIdx: number = 0;\n      extensionPointIdx < addinCommandsExtensionPoints.length;\n      extensionPointIdx++\n    ) {\n      let extensionPoint: Object = addinCommandsExtensionPoints[extensionPointIdx];\n      if (Converter._isRibbonCommandSurface(extensionPoint[Constants.InputType])) {\n        if (!Utilities.isNullOrUndefined(extensionPoint[Constants.InputTabs])) {\n          for (let tabIdx: number = 0; tabIdx < extensionPoint[Constants.InputTabs].length; tabIdx++) {\n            var tab: Object = extensionPoint[Constants.InputTabs][tabIdx];\n            if (!Utilities.isNullOrUndefined(tab[Constants.InputChildren])) {\n              for (let groupIdx: number = 0; groupIdx < tab[Constants.InputChildren].length; groupIdx++) {\n                var group: Object = tab[Constants.InputChildren][groupIdx];\n\n                if (\n                  !Utilities.isNullOrUndefined(group) &&\n                  !Utilities.isNullOrUndefined(group[Constants.InputChildren])\n                ) {\n                  this._collectRuntimeRecordsFromActions(\n                    context,\n                    collectedRuntimes,\n                    group[Constants.InputChildren],\n                    manifestHostType,\n                  );\n                }\n              }\n            }\n          }\n        }\n      } else if (Converter._isMobileCommandSurface(extensionPoint[Constants.InputType])) {\n        var control: any;\n        if (\n          !Utilities.isNullOrUndefined(extensionPoint[Constants.InputGroup]) &&\n          !Utilities.isNullOrUndefined(extensionPoint[Constants.InputGroup][Constants.InputControl])\n        ) {\n          control = extensionPoint[Constants.InputGroup][Constants.InputControl];\n        } else if (!Utilities.isNullOrUndefined(extensionPoint[Constants.InputControl])) {\n          control = extensionPoint[Constants.InputControl];\n        }\n\n        if (Utilities.isNullOrUndefined(control)) {\n          Utilities.logError(\"Unable to find <Control> inside of mobile form factor.\");\n          continue;\n        }\n\n        let requirements: MOS.RequirementsExtensionElement = new MOS.RequirementsExtensionElement();\n\n        requirements.capabilities = context.getCurrentVersionOverrideCapabilities();\n\n        // Here we only care about the ShowTaskPane actions because the function file runtime\n        // is added in another place and it is shared by many ExecuteAction actions.\n        if (\n          control.actionType == Constants.InputShowTaskpane &&\n          !Utilities.isNullOrUndefined(control.action.sourceLocationResid)\n        ) {\n          let runtimeRecord: RuntimeRecord = this._createRuntimeRecord(\n            context,\n            control.action.sourceLocationResid,\n            requirements,\n            RuntimeSource.ShowTaskpane,\n            manifestHostType,\n          );\n\n          this._addRuntimeRecord(runtimeRecord, collectedRuntimes);\n        }\n      } else if (Converter._isContextMenuCommandSurface(extensionPoint[Constants.InputType])) {\n        if (!Utilities.isNullOrUndefined(extensionPoint[Constants.InputChildren])) {\n          for (\n            let menuNodeIdx: number = 0;\n            menuNodeIdx < extensionPoint[Constants.InputChildren].length;\n            menuNodeIdx++\n          ) {\n            const menuNode: any = extensionPoint[Constants.InputChildren][menuNodeIdx];\n\n            for (\n              let menuControlIdx: number = 0;\n              menuControlIdx < menuNode[Constants.InputChildren].length;\n              menuControlIdx++\n            ) {\n              const menuControl: any = menuNode[Constants.InputChildren][menuControlIdx];\n              this._collectRuntimeRecordsFromActions(\n                context,\n                collectedRuntimes,\n                menuControl[Constants.InputChildren],\n                manifestHostType,\n              );\n            }\n          }\n        }\n      } else if (extensionPoint[Constants.InputType] === Constants.InputLaunchEvent) {\n        if (!Utilities.isNullOrUndefined(extensionPoint[Constants.InputResid])) {\n          let requirements: MOS.RequirementsExtensionElement = new MOS.RequirementsExtensionElement();\n          requirements.capabilities = context.getCurrentVersionOverrideCapabilities();\n          let runtimeRecord: RuntimeRecord = this._createRuntimeRecord(\n            context,\n            extensionPoint[Constants.InputResid],\n            requirements,\n            RuntimeSource.LaunchEvent,\n            manifestHostType,\n          );\n          this._addRuntimeRecord(runtimeRecord, collectedRuntimes);\n        } else {\n          Utilities.logWarning(\"LaunchEvent extension point does not have SourceLocation with resid.\");\n        }\n      } else if (extensionPoint[Constants.InputType] === Constants.InputReportPhishingCommandSurface) {\n        if (!Utilities.isNullOrUndefined(extensionPoint[Constants.InputFixedControl]) &&\n            !Utilities.isNullOrUndefined(extensionPoint[Constants.InputFixedControl][Constants.InputSourceLocationResid])) {\n          let requirements: MOS.RequirementsExtensionElement = new MOS.RequirementsExtensionElement();\n          requirements.capabilities = context.getCurrentVersionOverrideCapabilities();\n\n          let sourceLocationResId: string = null;\n          if (!Utilities.isNullOrUndefined(extensionPoint[Constants.InputFixedControl]) &&\n          !Utilities.isNullOrUndefined(extensionPoint[Constants.InputFixedControl][Constants.InputSourceLocationResid])) {\n            sourceLocationResId = extensionPoint[Constants.InputFixedControl][Constants.InputSourceLocationResid];\n          }\n\n          let runtimeRecord: RuntimeRecord = this._createRuntimeRecord(\n            context,\n            sourceLocationResId,\n            requirements,\n            RuntimeSource.ReportPhishing,\n            manifestHostType,\n          );\n          this._addRuntimeRecord(runtimeRecord, collectedRuntimes);\n        } else {\n          Utilities.logWarning(\"ReportPhishingCustomization extension point does not have SourceLocation with resid.\");\n        }\n      }\n      else {\n        Utilities.log(\"Skipping extension point %s for runtime collection.\", extensionPoint[Constants.InputType]);\n      }\n    }\n  }\n\n  private _collectRuntimesFromFunctionFiles(\n    context: ConversionContext,\n    functionFileResid: Object,\n    collectedRuntimes: RuntimeRecord[],\n    manifestHostType: OSF.ManifestHostType,\n  ): void {\n    if (!Utilities.isNullOrUndefined(functionFileResid)) {\n      if (!Utilities.isNullOrUndefined(functionFileResid[Constants.InputDesktopFormFactor])) {\n        context.setFormFactor(Constants.InputDesktopFormFactor);\n        this._addRuntimeRecordForFunctionFileFormFactor(\n          context,\n          functionFileResid[Constants.InputDesktopFormFactor],\n          Constants.InputDesktopFormFactor,\n          collectedRuntimes,\n          manifestHostType,\n        );\n        context.setFormFactor(null);\n      }\n\n      if (!Utilities.isNullOrUndefined(functionFileResid[Constants.InputMobileFormFactor])) {\n        context.setFormFactor(Constants.InputMobileFormFactor);\n        this._addRuntimeRecordForFunctionFileFormFactor(\n          context,\n          functionFileResid[Constants.InputMobileFormFactor],\n          Constants.InputMobileFormFactor,\n          collectedRuntimes,\n          manifestHostType,\n        );\n        context.setFormFactor(null);\n      }\n    }\n  }\n\n  private _addRuntimeRecordForFunctionFileFormFactor(\n    context: ConversionContext,\n    resid: string,\n    formFactor: string,\n    collectedRuntimes: RuntimeRecord[],\n    manifestHostType: OSF.ManifestHostType,\n  ): void {\n    let requirements: MOS.RequirementsExtensionElement = new MOS.RequirementsExtensionElement();\n    requirements.capabilities = context.getCurrentVersionOverrideCapabilities();\n\n    let runtimeRecord: RuntimeRecord = this._createRuntimeRecord(\n      context,\n      resid,\n      requirements,\n      RuntimeSource.ExecuteFunction,\n      manifestHostType,\n    );\n\n    // TODO: Need to set lifetime.long for WXP if the same resID found in Runtimes element\n\n    this._addRuntimeRecord(runtimeRecord, collectedRuntimes);\n  }\n\n  private static _legacyFormFactorToMOSFormFactor(formFactor: string): MOS.FormFactors {\n    switch (formFactor) {\n      case Constants.InputDesktopFormFactor:\n        return MOS.FormFactors.Desktop;\n      case Constants.InputMobileFormFactor:\n        return MOS.FormFactors.Mobile;\n      default:\n        Utilities.logError(\"Unrecognized formfactor: \" + formFactor);\n        return null;\n    }\n  }\n\n  private static _isRibbonCommandSurface(commandSurface: string): boolean {\n    // The commandSurfaces that we currently look for and convert in runtimes and ribbons\n    return (\n      commandSurface === Constants.InputPrimaryCommandSurface ||\n      commandSurface === Constants.InputMessageComposeCommandSurface ||\n      commandSurface === Constants.InputMessageReadCommandSurface ||\n      commandSurface === Constants.InputAppointmentOrganizerCommandSurface ||\n      commandSurface === Constants.InputAppointmentAttendeeCommandSurface\n    );\n  }\n\n  private static _isContextMenuCommandSurface(commandSurface: string): boolean {\n    // The commandSurfaces that we currently look for and convert in runtimes and ribbons\n    return commandSurface === Constants.InputContextMenuCommandSurface;\n  }\n\n  private static _isMobileCommandSurface(commandSurface: string): boolean {\n    // The commandSurfaces that we currently look for and convert for mobile\n    return (\n      commandSurface === Constants.InputMobileMessageReadCommandSurface ||\n      commandSurface === Constants.InputMobileMessageComposeCommandSurface ||\n      commandSurface === Constants.InputMobileAppointmentOrganizerCommandSurface ||\n      commandSurface === Constants.InputMobileAppointmentAttendeeCommandSurface ||\n      commandSurface === Constants.InputMobileOnlineMeetingCommandSurface ||\n      commandSurface === Constants.InputMobileLogEventAppointmentAttendee\n    );\n  }\n\n  private static _isReportPhishingCommandSurface(commandSurface: string): boolean {\n    return commandSurface === Constants.InputReportPhishingCommandSurface;\n  }\n\n  private static _getRibbonContextFromCommandSurface(commandSurface: string): MOS.Contexts {\n    switch (commandSurface) {\n      case Constants.InputPrimaryCommandSurface:\n        return MOS.Contexts.Default;\n      case Constants.InputMessageComposeCommandSurface:\n        return MOS.Contexts.MailCompose;\n      case Constants.InputMessageReadCommandSurface:\n        return MOS.Contexts.MailRead;\n      case Constants.InputAppointmentOrganizerCommandSurface:\n        return MOS.Contexts.MeetingDetailsOrganizer;\n      case Constants.InputAppointmentAttendeeCommandSurface:\n        return MOS.Contexts.MeetingDetailsAttendee;\n      case Constants.InputMobileLogEventAppointmentAttendee:\n        return MOS.Contexts.LogEventMeetingDetailsAttendee;\n      case Constants.InputMobileMessageReadCommandSurface:\n      case Constants.InputMobileMessageComposeCommandSurface:\n        return MOS.Contexts.Default;\n      case Constants.InputMobileAppointmentAttendeeCommandSurface:\n        return MOS.Contexts.MeetingDetailsAttendee;\n      case Constants.InputMobileAppointmentOrganizerCommandSurface:\n        return MOS.Contexts.MeetingDetailsOrganizer;\n      case Constants.InputMobileOnlineMeetingCommandSurface:\n        return MOS.Contexts.OnlineMeetingDetailsOrganizer;\n      case Constants.InputReportPhishingCommandSurface:\n        return MOS.Contexts.SpamReportingOverride;\n      default:\n        Utilities.logError(\"Unsupported command surface: \" + commandSurface);\n        return MOS.Contexts.Default;\n    }\n  }\n\n  private static _getFunctionFileResid(\n    versionOverrideHostIndex: string,\n    versionOverrideIndex: string,\n    xmlManifest: OSF.Manifest.Manifest,\n  ): Object {\n    let functionFileResid: string = null;\n\n    if (!Utilities.isNullOrUndefined(xmlManifest._versionOverrides[versionOverrideHostIndex])) {\n      if (\n        Utilities.isNullOrUndefined(versionOverrideIndex) &&\n        !Utilities.isNullOrUndefined(\n          xmlManifest._versionOverrides[versionOverrideHostIndex][Constants.InputFunctionFileResid],\n        )\n      ) {\n        functionFileResid = xmlManifest._versionOverrides[versionOverrideHostIndex][Constants.InputFunctionFileResid];\n      } else if (\n        !Utilities.isNullOrUndefined(versionOverrideIndex) &&\n        !Utilities.isNullOrUndefined(xmlManifest._versionOverrides[versionOverrideHostIndex][versionOverrideIndex]) &&\n        !Utilities.isNullOrUndefined(\n          xmlManifest._versionOverrides[versionOverrideHostIndex][versionOverrideIndex][\n            Constants.InputFunctionFileResid\n          ],\n        )\n      ) {\n        functionFileResid =\n          xmlManifest._versionOverrides[versionOverrideHostIndex][versionOverrideIndex][\n            Constants.InputFunctionFileResid\n          ];\n      }\n    }\n\n    return functionFileResid;\n  }\n\n  private static _getAddinCommandsExtensionPoints(\n    versionOverrideHostIndex: string,\n    versionOverrideIndex: string,\n    formFactor: string,\n    xmlManifest: OSF.Manifest.Manifest,\n  ): [] {\n    let addinCommandsExtensionPoints: [] = null;\n\n    if (!Utilities.isNullOrUndefined(xmlManifest._versionOverrides[versionOverrideHostIndex])) {\n      // If versionOverrideIndex is null then we are just looking in the main section:  [\"MailHost\"]\n      // If it is not null then we are looking under a specific override under the main host index:  [\"MailHost\"][\"100\"] for version override 1.0 etc.\n      if (\n        Utilities.isNullOrUndefined(versionOverrideIndex) &&\n        !Utilities.isNullOrUndefined(\n          xmlManifest._versionOverrides[versionOverrideHostIndex][Constants.InputAddinCommandsExtensionPoints],\n        )\n      ) {\n        addinCommandsExtensionPoints =\n          xmlManifest._versionOverrides[versionOverrideHostIndex][Constants.InputAddinCommandsExtensionPoints][\n            formFactor\n          ];\n      } else if (\n        !Utilities.isNullOrUndefined(versionOverrideIndex) &&\n        !Utilities.isNullOrUndefined(xmlManifest._versionOverrides[versionOverrideHostIndex][versionOverrideIndex]) &&\n        !Utilities.isNullOrUndefined(\n          xmlManifest._versionOverrides[versionOverrideHostIndex][versionOverrideIndex][\n            Constants.InputAddinCommandsExtensionPoints\n          ] &&\n            !Utilities.isNullOrUndefined(\n              xmlManifest._versionOverrides[versionOverrideHostIndex][versionOverrideIndex][\n                Constants.InputAddinCommandsExtensionPoints\n              ][formFactor],\n            ),\n        )\n      ) {\n        // Outlook/Mailbox manifest is stored under \"100\" and \"101\" for version overrides\n        addinCommandsExtensionPoints =\n          xmlManifest._versionOverrides[versionOverrideHostIndex][versionOverrideIndex][\n            Constants.InputAddinCommandsExtensionPoints\n          ][formFactor];\n      }\n    }\n\n    return addinCommandsExtensionPoints;\n  }\n\n  private static _cloneRequirements(requirements: MOS.RequirementsExtensionElement): MOS.RequirementsExtensionElement {\n    if (Utilities.isNullOrUndefined(requirements)) {\n      return null;\n    }\n\n    let req: MOS.RequirementsExtensionElement = new MOS.RequirementsExtensionElement();\n\n    if (Utilities.isNullOrUndefined(requirements.capabilities)) {\n      req.capabilities = undefined;\n    } else {\n      req.capabilities = Converter._cloneCapabilities(requirements.capabilities);\n    }\n\n    req.formFactors = !Utilities.isNullOrUndefined(requirements.formFactors)\n      ? requirements.formFactors.map((x) => x)\n      : undefined;\n    //req.formFactors = !Utilities.isNullOrUndefined(requirements.formFactors)\n    //  ? requirements.formFactors.map((x) => x)\n    //  : undefined;\n    req.scopes = !Utilities.isNullOrUndefined(requirements.scopes) ? requirements.scopes.map((x) => x) : undefined;\n\n    return req;\n  }\n\n  private static _cloneCapabilities(capabilities: MOS.Capabilities[]): MOS.Capabilities[] {\n    if (Utilities.isNullOrUndefined(capabilities)) {\n      return undefined;\n    }\n\n    let caps: MOS.Capabilities[] = [];\n\n    for (let i = 0; i < capabilities.length; i++) {\n      let capability: MOS.Capabilities = capabilities[i];\n      let cap: MOS.Capabilities = new MOS.Capabilities();\n      cap.name = capability.name;\n      cap.minVersion = capability.minVersion;\n      cap.maxVersion = capability.maxVersion;\n\n      caps.push(cap);\n    }\n\n    return caps;\n  }\n\n  private _addRuntimeForFormFactor(context: ConversionContext, runtimeRecords: RuntimeRecord[], formFactor: string, sourceLocation: string): void {\n    let runtimeRecord: RuntimeRecord = this._createRuntimeRecord(\n      context,\n      sourceLocation,\n      new MOS.RequirementsExtensionElement(),\n      RuntimeSource.DefaultSettingSourceLocations,\n      null,\n    ); // Capability/ManifestHostType comes from requirements and there can be multiple capabilities\n\n    // Scopes at the base level will part of the requirements at extension level. We don't need to add the Hosts at the runtime level again.\n    // this._addScopesFromHosts(<MOS.RequirementsExtensionElement><unknown>runtimeRecord._requirements);\n\n    // now go through and add the default source locations for the different languages\n    for (let seenLocale in this._xmlManifest.getLocalesSeen()) {\n      // Get the default settings source location for a particular language and add it to the runtime record\n      let localeSourceLocation: string = this._xmlManifest.getSourceLocation(seenLocale, formFactor);\n\n      if (!Utilities.isNullOrUndefined(localeSourceLocation)) {\n        runtimeRecord._localeResources[seenLocale] = localeSourceLocation;\n      }\n    }\n\n    this._addRuntimeRecord(runtimeRecord, runtimeRecords);\n  }\n\n  private _collectRuntimeRecordsFromRuntimes(\n    context: ConversionContext,\n    runtimeRecords: RuntimeRecord[],\n    runtimes: OSF.Manifest.Runtimes,\n    manifestHostType: OSF.ManifestHostType,\n    source: RuntimeSource,\n  ): void {\n    let requirements: MOS.RequirementsExtensionElement = new MOS.RequirementsExtensionElement();\n    requirements.capabilities = context.getCurrentVersionOverrideCapabilities();\n\n    for (let idx = 0; idx < runtimes.getRuntimes().length; idx++) {\n      let runtime = runtimes.getRuntimes()[idx];\n\n      let scriptResId: string;\n      let lifetime: MOS.RuntimesLifetime = MOS.RuntimesLifetime.Short;\n\n      if (!Utilities.isNullOrUndefined(runtime.Overrides)) {\n        for (let override of runtime.Overrides) {\n          // get the code.script resId\n          if (override.Type === \"javascript\") {\n            scriptResId = override.Resid;\n            break;\n          }\n        }\n      }\n\n      if (runtime.LifeTime === InputRuntimeLifeTime.Long) {\n        lifetime = MOS.RuntimesLifetime.Long;\n      }\n\n      let runtimeRecord: RuntimeRecord = this._createRuntimeRecord(\n        context,\n        runtime.Resid,\n        requirements,\n        source,\n        manifestHostType,\n        scriptResId,\n        lifetime,\n      );\n\n      this._addRuntimeRecord(runtimeRecord, runtimeRecords);\n    }\n  }\n\n  private _collectRuntimeRecordsFromActions(\n    context: ConversionContext,\n    runtimeRecords: RuntimeRecord[],\n    controls: any,\n    manifestHostType: OSF.ManifestHostType,\n  ): void {\n    if (Utilities.isNullOrUndefined(controls?.length)) return;\n\n    let requirements: MOS.RequirementsExtensionElement = new MOS.RequirementsExtensionElement();\n    // TODO: We should set FormFactor\n    requirements.capabilities = context.getCurrentVersionOverrideCapabilities();\n\n    for (let idx = 0; idx < controls.length; idx++) {\n      let control: any = controls[idx];\n\n      // We only need to create a runtime record for ShowTaskPane because ExecuteFunction runtime records will\n      // be added from the encompassing <FunctionFile> tag.\n      if (control.actionType !== Constants.InputShowTaskpane && control.controlType !== Constants.InputMenu) {\n        continue;\n      }\n\n      switch (control.controlType) {\n        case Constants.InputButton: // ribbon's top level control is button\n        case Constants.InputMenuItem: // context menu's top level control is menu item\n          let runtimeRecord: RuntimeRecord = this._createRuntimeRecord(\n            context,\n            control.action.sourceLocationResid,\n            requirements,\n            RuntimeSource.ShowTaskpane,\n            manifestHostType,\n          );\n\n          this._addRuntimeRecord(runtimeRecord, runtimeRecords);\n\n          break;\n\n        case Constants.InputMenu: // for ribbon's menu control\n          for (let menuIdx: number = 0; menuIdx < control.children.length; menuIdx++) {\n            let menuControl: any = control.children[menuIdx];\n            if (menuControl.actionType === Constants.InputShowTaskpane) {\n              let runtimeRecord: RuntimeRecord = this._createRuntimeRecord(\n                context,\n                menuControl.action.sourceLocationResid,\n                requirements,\n                RuntimeSource.ShowTaskpane,\n                manifestHostType,\n              );\n\n              this._addRuntimeRecord(runtimeRecord, runtimeRecords);\n            }\n          }\n\n          break;\n      }\n    }\n  }\n\n  private _createRuntimeRecord(\n    context: ConversionContext,\n    resource: string,\n    requirements: MOS.RequirementsExtensionElement,\n    source: RuntimeSource,\n    manifestHostType: OSF.ManifestHostType,\n    scriptResId: string = null,\n    lifetime: MOS.RuntimesLifetime = MOS.RuntimesLifetime.Short\n  ): RuntimeRecord {\n    let runtimeRecord: RuntimeRecord = new RuntimeRecord();\n    runtimeRecord._resource = resource;\n    runtimeRecord._requirements = requirements;\n    runtimeRecord._source = source;\n    runtimeRecord._manifestHostType = manifestHostType;\n    runtimeRecord._localeResources = {};\n    runtimeRecord._lifetime = lifetime;\n\n    if (!Utilities.isNullOrUndefined(scriptResId)) {\n      runtimeRecord._scriptResId = scriptResId;\n    }\n\n    if (!Utilities.isNullOrUndefined(context)) {\n      runtimeRecord._inputFormFactor = context.getFormFactor();\n      runtimeRecord._versionOverridesNumber = context.getCurrentVersionOverrideNumber();\n    } else {\n      Utilities.logError(\"Expected the form factor to be set in the context for runtime: \" + resource);\n    }\n    // Record the capabilities (from <Requirements><Sets>) that come from the containing version override.\n    // Later when the runtimes are coallesced, these requirements will be merged into requirements.capabilities\n    // of the resulting runtimes in the metaos manifest.\n    if (\n      !Utilities.isNullOrUndefined(context) &&\n      !Utilities.isNullOrUndefined(context.getCurrentVersionOverrideCapabilities())\n    ) {\n      runtimeRecord._versionOverrideCapabilities = context.getCurrentVersionOverrideCapabilities();\n    }\n\n    return runtimeRecord;\n  }\n\n  private _addRuntimeRecord(runtimeRecord: RuntimeRecord, runtimeRecords: RuntimeRecord[]): void {\n    Utilities.log(\"Adding runtime record: \" + runtimeRecord._resource);\n    runtimeRecords.push(runtimeRecord);\n  }\n\n  private _populateRootRequirements(): void {\n    // TODO: Not present in legacy manifest\n  }\n\n  private _populateLocaleSensitiveProperty(propertyGetter: Function, mosPropertyName: string, maxLength: number): void {\n    const defaultLocale: string = this._xmlManifest.getDefaultLocale();\n\n    for (let seenLocale in this._xmlManifest.getLocalesSeen()) {\n      // The default language is put into the main manifest file and not in auxillary localized files\n      if (seenLocale != defaultLocale) {\n        Utilities.log(\"handling %s for locale: %s\", mosPropertyName, seenLocale);\n        let localizedPropertyValue: string = propertyGetter.apply(this._xmlManifest, [seenLocale]);\n\n        if (!Utilities.isNullOrUndefined(localizedPropertyValue)) {\n          let finalValue: string = localizedPropertyValue;\n\n          if (!Utilities.isNullOrUndefined(maxLength)) {\n            finalValue = Utilities.getLimitedString(\n              localizedPropertyValue,\n              maxLength,\n              mosPropertyName + \" truncated to %d characters in localized file \" + seenLocale,\n            );\n          }\n\n          this._localeBuilder.addLocaleString(seenLocale, mosPropertyName, finalValue);\n        }\n      }\n    }\n  }\n\n  private _populateValidDomains(): void {\n    // Sometimes the underlying parser has a null in the collection but this breaks the metaos\n    // schema if we have null in the validDomains so we need to ignore nulls\n    const appDomains: string[] = this._xmlManifest.getAppDomains();\n\n    // TODO: Review should empty collection be there regardless if we find any domains?\n    this._mosManifest.validDomains = [];\n\n    for (let domain of appDomains) {\n      if (!Utilities.isNullOrUndefined(domain)) {\n        this._mosManifest.validDomains.push(domain);\n      }\n    }\n  }\n\n  // Population methods below are data that is not present in the Office legacy manifests\n  private _populateStaticTabs(): void {}\n\n  private _populateComposeExtensions(): void {}\n\n  private _populateGraphConnector(): void {}\n\n  private _populateConfigurableTabs(): void {}\n\n  private _populateBots(): void {}\n\n  private _populateConnectors(): void {}\n\n  private _populateActivities(): void {}\n\n  private _populateMeetingExtensionDefinition(): void {}\n\n  private _populateSubscriptionOffer(): void {}\n\n  private _populateShowLoadingIndicator(): void {}\n\n  private _populateIsFullScreen(): void {}\n\n  private _populateConfigurableProperties(): void {}\n\n  private _populateDefaultBlockUntilAdminAction(): void {}\n\n  private _populatePublisherDocsUrl(): void {}\n\n  private _populateDefaultInstallScope(): void {}\n\n  private _populateDefaultGroupCapability(): void {}\n\n  getOfficeAppManifest(): OSF.Manifest.OfficeAppManifest {\n    return this._xmlManifest;\n  }\n\n  getJSON(): string {\n    return this._mosManifest.toJSON();\n  }\n\n  private _getMailHostOverrides(): string[] {\n    let overrides: string[] = [];\n\n    // If there are version overrides for mailhost then we add them\n    for (let overrideVersion in this._xmlManifest._versionOverrides[Constants.InputMailHost]) {\n      // We get these in reverse order so that we end up with the highest number override first because the higher the number the\n      // higher the precedence so the resulting elements in the json manifest should be in that order so that the parser can give precedence to the first one.\n      // Also see: _getMailHostVersionOVerrides() that builds the same array but from the enum directly instead of from the OSFManifest parser's version overrides.\n      overrides.unshift(overrideVersion);\n    }\n\n    return overrides;\n  }\n\n  private _doesHostHaveContentInManifest(manifestHostType: OSF.ManifestHostType): boolean {\n    let hostType: string = Converter._getVersionOverrideHostTypeFromOsfManifestHostType(manifestHostType);\n    return !Utilities.isNullOrUndefined(this._xmlManifest._versionOverrides[hostType]);\n  }\n\n  private _getResourceAndWriteLocalizedValues(\n    resId: string,\n    defaultValue: string,\n    maxLength: number,\n    versionOverridesNumber: OSF.VersionOverridesNumber,\n    resourceTemplate: string,\n    resourceType: ResourceType,\n    index1: number = undefined,\n    index2: number = undefined,\n    index3: number = undefined,\n    index4: number = undefined,\n    index5: number = undefined,\n    index6: number = undefined,\n  ): string {\n    let resources: object = this._xmlManifest.getResources(versionOverridesNumber);\n\n    if (Utilities.isNullOrUndefined(resources)) {\n      return !Utilities.isNullOrUndefined(defaultValue) ? defaultValue : resId;\n    }\n\n    let allLocaleResources: object = resources[resourceType];\n\n    if (Utilities.isNullOrUndefined(allLocaleResources)) {\n      return !Utilities.isNullOrUndefined(defaultValue) ? defaultValue : resId;\n    }\n\n    const defaultLocale: string = this._xmlManifest.getDefaultLocale().toLocaleLowerCase();\n\n    if (\n      Utilities.isNullOrUndefined(allLocaleResources[resId]) ||\n      Utilities.isNullOrUndefined(allLocaleResources[resId][defaultLocale])\n    ) {\n      // return back the resId if we can't find a matching resource\n      return !Utilities.isNullOrUndefined(defaultValue) ? defaultValue : resId;\n    }\n\n    // Add localized runtime strings for other languages besides the default language\n    for (let seenLocale in this._xmlManifest.getLocalesSeen()) {\n      if (seenLocale !== defaultLocale && !Utilities.isNullOrUndefined(allLocaleResources[resId][seenLocale])) {\n        let formattedValue: string = Converter._formatResourceStringWithVariableNumberParameters(\n          resourceTemplate,\n          index1,\n          index2,\n          index3,\n          index4,\n          index5,\n          index6,\n        );\n\n        // For images, we also need to add them to the iconBuilder and store the package file reference in the localization file\n        if (resourceType === ResourceType.AllLocaleImages) {\n          const packageReference: string = this._iconBuilder.addIconAndGetReference(\n            allLocaleResources[resId][seenLocale],\n            !Utilities._writeImageUrls,\n            false,\n          );\n          this._localeBuilder.addLocaleString(seenLocale, formattedValue, packageReference);\n        } else {\n          this._localeBuilder.addLocaleString(seenLocale, formattedValue, allLocaleResources[resId][seenLocale]);\n        }\n      }\n    }\n\n    // Return the string for the default language that will be written into the main manifest file\n    const valueObtained: string = Utilities.isNullOrUndefined(defaultValue)\n      ? allLocaleResources[resId][defaultLocale]\n      : defaultValue;\n    return maxLength == Constants.MaxResourceStringLengthAny\n      ? valueObtained\n      : Utilities.truncateString(valueObtained, maxLength);\n  }\n\n  private _addConstantResourceForAllSeenLocales(\n    value: string,\n    resourceTemplate: string,\n    index1: number,\n    index2: number,\n    index3: number,\n    index4: number,\n    index5: number,\n    index6: number,\n  ): void {\n    const defaultLocale: string = this._xmlManifest.getDefaultLocale().toLocaleLowerCase();\n\n    for (let seenLocale in this._xmlManifest.getLocalesSeen()) {\n      if (seenLocale !== defaultLocale) {\n        let formattedValue: string = Converter._formatResourceStringWithVariableNumberParameters(\n          resourceTemplate,\n          index1,\n          index2,\n          index3,\n          index4,\n          index5,\n          index6,\n        );\n        this._localeBuilder.addLocaleString(seenLocale, formattedValue, value);\n      }\n    }\n  }\n\n  private static _incrementCurrentRibbonIndex(context: ConversionContext): void {\n    // Keep track of a count of the ribbon index for purposes of the localization indexed strings\n    if (context.getCurrentRibbonIndex() === ConversionContext.UnsetIndex) {\n      context.setCurrentRibbonIndex(0);\n    } else {\n      context.setCurrentRibbonIndex(context.getCurrentRibbonIndex() + 1);\n    }\n  }\n\n  private static _formatResourceStringWithVariableNumberParameters(\n    resourceTemplate: string,\n    index1: number = undefined,\n    index2: number = undefined,\n    index3: number = undefined,\n    index4: number = undefined,\n    index5: number = undefined,\n    index6: number = undefined,\n  ): string {\n    if (Utilities.isNullOrUndefined(index1) || index1 === ConversionContext.UnsetIndex) {\n      return resourceTemplate;\n    } else if (Utilities.isNullOrUndefined(index2) || index2 === ConversionContext.UnsetIndex) {\n      return util.format(resourceTemplate, index1);\n    } else if (Utilities.isNullOrUndefined(index3) || index3 === ConversionContext.UnsetIndex) {\n      return util.format(resourceTemplate, index1, index2);\n    } else if (Utilities.isNullOrUndefined(index4) || index4 === ConversionContext.UnsetIndex) {\n      return util.format(resourceTemplate, index1, index2, index3);\n    } else if (Utilities.isNullOrUndefined(index5) || index5 === ConversionContext.UnsetIndex) {\n      return util.format(resourceTemplate, index1, index2, index3, index4);\n    } else if (Utilities.isNullOrUndefined(index6) || index6 === ConversionContext.UnsetIndex) {\n      return util.format(resourceTemplate, index1, index2, index3, index4, index5);\n    } else {\n      return util.format(resourceTemplate, index1, index2, index3, index4, index5, index6);\n    }\n  }\n\n  private _addRuntimeExecuteAction(\n    runtime: MOS.Runtimes,\n    action: MOS.ExtensionRuntimesActionsItem,\n    runtimeKey: string,\n  ): void {\n    Utilities.assert(\n      action.type == MOS.ExtensionRuntimesActionsItemType.ExecuteFunction,\n      \"Expected an executeFunction type of action.\",\n    );\n\n    const runtimeActionKey: string = Converter._generateExecuteActionKey(runtimeKey, action.id);\n\n    // If an ExecuteFunction action with this same actionId already is in this runtime then we don't add it\n    if (\n      Utilities.isNullOrUndefined(this._addedExecuteFunctions[runtimeActionKey]) ||\n      !this._addedExecuteFunctions[runtimeActionKey]\n    ) {\n      runtime.actions.push(action);\n      this._addedExecuteFunctions[runtimeActionKey] = true;\n      Utilities.log(\"Added action %s for key: %s\", action.id, runtimeActionKey);\n    } else {\n      Utilities.log(\n        \"Skipped adding action %s for key: %s because an identical one already exists.\",\n        action.id,\n        runtimeActionKey,\n      );\n    }\n  }\n\n  private static _getVersionOverrideHostTypeFromOsfManifestHostType(manifestHostType: OSF.ManifestHostType): string {\n    switch (manifestHostType) {\n      case OSF.ManifestHostType.Document:\n        return Constants.InputDocument;\n      case OSF.ManifestHostType.Workbook:\n        return Constants.InputWorkbook;\n      case OSF.ManifestHostType.Presentation:\n        return Constants.InputPresentation;\n      case OSF.ManifestHostType.Mailbox:\n        return Constants.InputMailHost;\n      default:\n        throw \"unsupported manifest host type: \" + manifestHostType;\n    }\n  }\n\n  private static _getCapabilityVersionFromNumericVersion(overrideText: string): string {\n    switch (overrideText) {\n      case OSF.VersionOverridesNumber.V1_0.toString():\n        return Constants.MosV100;\n      case OSF.VersionOverridesNumber.V1_1.toString():\n        return Constants.MosV101;\n      default:\n        Utilities.logError(\"Unrecognized override version: \" + overrideText);\n        return \"\";\n    }\n  }\n\n  private static _getNumericOverrideVersionFromString(overrideText: string): OSF.VersionOverridesNumber {\n    switch (overrideText) {\n      case OSF.VersionOverridesNumber.V1_0.toString():\n        return OSF.VersionOverridesNumber.V1_0;\n      case OSF.VersionOverridesNumber.V1_1.toString():\n        return OSF.VersionOverridesNumber.V1_1;\n      default:\n        Utilities.logError(\"Unrecognized override version: \" + overrideText);\n        return null;\n    }\n  }\n\n  private static _getRequirementsScopeFromManifestHostType(manifestHostType: string): MOS.Scopes {\n    switch (manifestHostType) {\n      case OSF.ManifestHostType.Mailbox:\n        return MOS.Scopes.Mail;\n      case OSF.ManifestHostType.Workbook:\n        return MOS.Scopes.Workbook;\n      case OSF.ManifestHostType.Document:\n        return MOS.Scopes.Document;\n      case OSF.ManifestHostType.Presentation:\n        return MOS.Scopes.Presentation;\n      default:\n        Utilities.logError(\"Unsupported manifestHostType \" + manifestHostType);\n    }\n  }\n\n  private static _mosSendModeFromXmlSendMode(sendMode: string): MOS.OptionsSendMode {\n    switch (sendMode.toLowerCase()) {\n      case Constants.InputSendModeBlock:\n        return MOS.OptionsSendMode.Block;\n      case Constants.InputSendModePromptUser:\n        return MOS.OptionsSendMode.PromptUser;\n      case Constants.InputSendModeSoftBlock:\n        return MOS.OptionsSendMode.SoftBlock;\n      default:\n        Utilities.logError(\"Unsupported sendMode: '%s'. Setting to null.\", sendMode);\n        return null;\n    }\n  }\n\n  private static _mosPermissionfromXmlPermission(permission: number, appType: OSF.OfficeAppType): string {\n    if (appType === OSF.OfficeAppType.ContentApp || appType === OSF.OfficeAppType.TaskPaneApp) {\n      // Content App Permissions: [Restricted | ReadDocument | ReadAllDocument | WriteDocument | ReadWriteDocument]\n      switch (permission) {\n        case OSF.OsfControlPermission.Restricted:\n          return Constants.DocumentRestrictedUser;\n        case OSF.OsfControlPermission.ReadDocument:\n          return Constants.DocumentReadUser;\n        case OSF.OsfControlPermission.WriteDocument:\n          return Constants.DocumentWriteUser;\n        case OSF.OsfControlPermission.ReadAllDocument:\n          return Constants.DocumentReadAllUser; // TODO: Need to get the correct name in metaos WI:6247317\n        case OSF.OsfControlPermission.ReadWriteDocument:\n          return Constants.DocumentReadWriteUser; // TODO:Need to get the correct name in metaos WI:6247317\n        default:\n          Utilities.logError(\"Unknown <Permission> found for ContentApp/TaskpaneApp: \" + permission);\n      }\n    } else if (appType === OSF.OfficeAppType.MailApp) {\n      // MailApp Permissions: [Restricted | ReadItem | ReadWriteItem | ReadWriteMailbox]\n      switch (permission) {\n        case OSF.OsfControlPermission.Restricted:\n          return Constants.MailboxItemRestrictedUser;\n        case OSF.OsfControlPermission.ReadItem:\n          return Constants.MailboxItemReadUser;\n        case OSF.OsfControlPermission.ReadWriteItem:\n          return Constants.MailboxItemReadWriteUser;\n        case OSF.OsfControlPermission.ReadWriteMailbox:\n          return Constants.MailboxReadWriteUser;\n        default:\n          Utilities.logError(\"Unknown <Permission> found for MailApp: \" + permission);\n      }\n    }\n  }\n\n  private static _setVersionOverrideNumberAndCapabilitiesInContext(\n    context: ConversionContext,\n    xmlManifest: any,\n    hostType: string,\n    versionOverridesIndex: string,\n  ): void {\n    let capabilities: MOS.Capabilities[] = null;\n    let versionOverride: Object = null;\n    let versionOverrideIndexNumeric: OSF.VersionOverridesNumber = null;\n\n    if (Converter._isWXP(hostType)) {\n      versionOverride = xmlManifest._versionOverrides[hostType];\n    } else {\n      versionOverride = xmlManifest._versionOverrides[hostType][versionOverridesIndex];\n      versionOverrideIndexNumeric = Converter._getNumericOverrideVersionFromString(versionOverridesIndex);\n    }\n\n    if (\n      !Utilities.isNullOrUndefined(versionOverride) &&\n      !Utilities.isNullOrUndefined(versionOverride[Constants.InputRequirements]) &&\n      !Utilities.isNullOrUndefined(versionOverride[Constants.InputRequirements][Constants.InputSets])\n    ) {\n      capabilities = Converter._getCapabilitiesFromLegacyRequirementSets(\n        versionOverride[Constants.InputRequirements][Constants.InputSets],\n      );\n    }\n\n    // Set implicit capabilty for the versionOverride\n    let capability: MOS.Capabilities = this._getImplicitCapabilityBasedOnVersionOverrideForHost(\n      hostType,\n      versionOverridesIndex,\n    );\n    if (!Utilities.isNullOrUndefined(capability)) {\n      if (Utilities.isNullOrUndefined(capabilities)) {\n        capabilities = [];\n      }\n      capabilities.push(capability);\n    }\n\n    // Merge the added capabilities\n    let requirements: MOS.RequirementsExtensionElement = new MOS.RequirementsExtensionElement();\n    Converter._mergeInVersionOverrideRequirements(capabilities, requirements);\n\n    // If there is an override present in the manifest then we set the capabilities and this override in the context\n    // so that subsequent population will understand and be able to set requirements correctly.\n    if (!Utilities.isNullOrUndefined(versionOverride)) {\n      context.setCurrentVersionOverrideAndCapabilities(versionOverrideIndexNumeric, requirements.capabilities);\n    }\n  }\n\n  private static _clearVersionOverrideNumberAndCapabilitiesInContext(context: ConversionContext): void {\n    context.setCurrentVersionOverrideAndCapabilities(null, null);\n  }\n\n  private static _legacyLaunchEventToMosEventType(legacyEventType: string): string {\n    switch (legacyEventType) {\n      case \"OnNewMessageCompose\":\n        return \"newMessageComposeCreated\";\n      case \"OnNewAppointmentOrganizer\":\n        return \"newAppointmentOrganizerCreated\";\n      case \"OnMessageAttachmentsChanged\":\n        return \"messageAttachmentsChanged\";\n      case \"OnAppointmentAttachmentsChanged\":\n        return \"appointmentAttachmentsChanged\";\n      case \"OnMessageRecipientsChanged\":\n        return \"messageRecipientsChanged\";\n      case \"OnAppointmentAttendeesChanged\":\n        return \"appointmentAttendeesChanged\";\n      case \"OnAppointmentTimeChanged\":\n        return \"appointmentTimeChanged\";\n      case \"OnAppointmentRecurrenceChanged\":\n        return \"appointmentRecurrenceChanged\";\n      case \"OnInfoBarDismissClicked\":\n        return \"infoBarDismissClicked\";\n      case \"OnMessageSend\":\n        return \"messageSending\";\n      case \"OnAppointmentSend\":\n        return \"appointmentSending\";\n      case \"OnOpenDocument\":\n        return \"documentOpen\";\n      case \"OnMessageCompose\":\n        return \"messageComposeOpened\";\n      case \"OnAppointmentOrganizer\":\n        return \"appointmentOrganizerOpened\";\n      default:\n        Utilities.logError(\"Unrecognized autorun even type: \" + legacyEventType);\n    }\n\n    return legacyEventType;\n  }\n\n  static _generateExecuteActionKey(runtimeKey: string, actionId: string): string {\n    return runtimeKey + actionId;\n  }\n\n  static _generateRuntimeLookupKey(\n    url: string,\n    lifetime: MOS.RuntimesLifetime,\n    capabilities: MOS.Capabilities[],\n    formFactor: string = null,\n    source: RuntimeSource = null\n  ): string {\n    // Currently we are building the key for the Runtime using the URL, lifetime and Capabilities\n    // URL: URL is the primary thing which is required for the Runtime this has to be unqiue\n    // Lifetime: As we can have the same URL with Lifetime Long(SharedRuntime) and Short\n    // Capabilities: A URL can be found inside a VersionOverride 1_0 (Like Capability MailBox 1.3) and the same URL can be found for VersionOverrde 1_1(Mailbox 1.5)\n\n    let resultKey: string = url + lifetime.toString();\n\n    if (source === RuntimeSource.DefaultSettingSourceLocations) {\n      resultKey += \"_ContentRuntime_\";\n    }\n\n    if (!Utilities.isNullOrUndefined(formFactor)) {\n      resultKey = resultKey + formFactor;\n    }\n\n    if (!Utilities.isNullOrUndefined(capabilities)) {\n      Converter._sortCapabilitiesAlphabatically(capabilities);\n      for (let capability of capabilities) {\n        resultKey = resultKey + (capability.name + capability.minVersion);\n      }\n    }\n\n    return resultKey;\n  }\n\n  static _sortCapabilitiesAlphabatically(capabilities: MOS.Capabilities[]): void {\n    if (!Utilities.isNullOrUndefined(capabilities)) {\n      capabilities.sort(function (c1, c2) {\n        if (c1.name < c2.name) {\n          return -1;\n        }\n\n        if (c1.name > c2.name) {\n          return 1;\n        }\n\n        return 0;\n      });\n    }\n  }\n\n  static _getImplicitCapabilityBasedOnVersionOverrideForHost(\n    hostType: string,\n    versionOverridesIndex: string,\n  ): MOS.Capabilities {\n    let capability: MOS.Capabilities = null;\n    // The requirementsets are taken from the public document specified here: https://docs.microsoft.com/en-us/javascript/api/manifest/versionoverrides?view=excel-js-preview#variant-schemas\n    if (hostType === Constants.InputMailHost) {\n      if (versionOverridesIndex === OSF.VersionOverridesNumber.V1_0.toString()) {\n        capability = new MOS.Capabilities();\n        capability.name = Constants.InputMailBoxCapability;\n        capability.minVersion = \"1.3\";\n      } else if (versionOverridesIndex === OSF.VersionOverridesNumber.V1_1.toString()) {\n        capability = new MOS.Capabilities();\n        capability.name = Constants.InputMailBoxCapability;\n        capability.minVersion = \"1.5\";\n      }\n    } else if (Converter._isWXP(hostType)) {\n      if (versionOverridesIndex === OSF.VersionOverridesNumber.V1_0.toString()) {\n        capability = new MOS.Capabilities();\n        capability.name = Constants.InputAddinCommandCapability;\n        capability.minVersion = \"1.1\";\n      }\n    } else {\n      Utilities.logError(\n        \"Skipping adding VersionOverride capability for the host as unsupported host type: %s\",\n        hostType,\n      );\n    }\n\n    return capability;\n  }\n\n  static _isWXP(hostType: string): boolean {\n    return (\n      hostType === Constants.InputDocument ||\n      hostType === Constants.InputPresentation ||\n      hostType === Constants.InputWorkbook\n    );\n  }\n\n  static _getMailHostVersionOVerrides(): string[] {\n    let versionOverrides = [];\n\n    const values = Object.values(OSF.VersionOverridesNumber);\n    // We should fill the array in reverse array as we need to iterate from maximum version to minimum in order to maintain the order\n    values\n      .slice()\n      .reverse()\n      .forEach((value) => {\n        if (!isNaN(Number(value)) && Number(value) !== OSF.VersionOverridesNumber.Max) {\n          versionOverrides.push(value.toString());\n        }\n      });\n\n    return versionOverrides;\n  }\n\n  static _oSFFormFactorToInputFormFactor(osfFormFactor: string): string {\n\n    switch(osfFormFactor) {\n      case OSF.FormFactor.Default:\n      case OSF.FormFactor.Desktop:\n        return Constants.InputDesktopFormFactor;\n        break;\n      case OSF.FormFactor.Phone:\n        return Constants.InputMobileFormFactor;\n        break;\n      case OSF.FormFactor.Tablet:\n        return Constants.InputTabletFormFactor;\n        break;\n      default:\n        return Constants.InputDesktopFormFactor;\n        break;\n    }\n  }\n\n  static _inputFormFactorToMOSFormFactor(inputFormFactor: string): MOS.FormFactors {\n    if (inputFormFactor === Constants.InputDesktopFormFactor) {\n      return MOS.FormFactors.Desktop;\n    } else if (inputFormFactor === Constants.InputMobileFormFactor) {\n      return MOS.FormFactors.Mobile;\n    } else {\n      Utilities.logError(\"Unrecognized or unused form factor: \" + inputFormFactor);\n      return MOS.FormFactors.Desktop;\n    }\n  }\n\n  static _fixVersionFormat(versionString: string) {\n  \n    // Return this as is if it can't be parsed as a version string\n    if (Utilities.isNullOrUndefined(versionString)) {\n      return versionString;\n    }\n\n    // If the version is a four part format like this \"1.0.1.4\", then we cut the last\n    // segment off to match the mos manifest version format http://semver.org which is\n    // three segments:  \"1.0.1\" etc.\n    var parts:string[] = versionString.split(\".\");\n    if (parts.length == 4) {\n      const newVersionString: string = parts[0] + \".\" + parts[1] + \".\" + parts[2];\n      Utilities.log(\"Rewriting version from %s to %s.\", versionString, newVersionString);\n      return newVersionString;\n    }\n\n    // If the incoming version string is not in the four part dot format then we just\n    // return it as is and the developer will need to hand edit it according to what they want.\n    Utilities.logError(\"Leaving version as %s but this will needed to be edited to conform to the format described in http://semver.org\", versionString);\n    return versionString;\n  }\n}"]}