export declare class RequirementsExtensionElement implements IRequirementsExtensionElement {
    capabilities: Capabilities[];
    scopes: Scopes[];
    formFactors: FormFactors[];
    constructor(data?: IRequirementsExtensionElement);
    init(_data?: any): void;
    static fromJS(data: any): RequirementsExtensionElement;
    toJSON(data?: any): any;
}
export interface IRequirementsExtensionElement {
    capabilities: Capabilities[];
    scopes: Scopes[];
    formFactors: FormFactors[];
}
export declare class ExtensionRuntimesActionsItem implements IExtensionRuntimesActionsItem {
    id: string;
    type: ExtensionRuntimesActionsItemType;
    displayName: string;
    pinnable: boolean;
    view: string;
    multiselect: boolean;
    supportsNoItemContext: boolean;
    constructor(data?: IExtensionRuntimesActionsItem);
    init(_data?: any): void;
    static fromJS(data: any): ExtensionRuntimesActionsItem;
    toJSON(data?: any): any;
}
export interface IExtensionRuntimesActionsItem {
    id: string;
    type: ExtensionRuntimesActionsItemType;
    displayName: string;
    pinnable: boolean;
    view: string;
    multiselect: boolean;
    supportsNoItemContext: boolean;
}
export declare class ExtensionRibbonsArrayTabsItem implements IExtensionRibbonsArrayTabsItem {
    id: string;
    label: string;
    position: Position;
    builtInTabId: string;
    groups: ExtensionRibbonsCustomTabGroupsItem[];
    customMobileRibbonGroups: ExtensionRibbonsCustomMobileGroupItem[];
    constructor(data?: IExtensionRibbonsArrayTabsItem);
    init(_data?: any): void;
    static fromJS(data: any): ExtensionRibbonsArrayTabsItem;
    toJSON(data?: any): any;
}
export interface IExtensionRibbonsArrayTabsItem {
    id: string;
    label: string;
    position: Position;
    builtInTabId: string;
    groups: ExtensionRibbonsCustomTabGroupsItem[];
    customMobileRibbonGroups: ExtensionRibbonsCustomMobileGroupItem[];
}
export declare class ExtensionRibbonsCustomTabGroupsItem implements IExtensionRibbonsCustomTabGroupsItem {
    id: string;
    label: string;
    icons: ExtensionCommonIcon[];
    controls: ExtensionCommonCustomGroupControlsItem[];
    builtInGroupId: string;
    constructor(data?: IExtensionRibbonsCustomTabGroupsItem);
    init(_data?: any): void;
    static fromJS(data: any): ExtensionRibbonsCustomTabGroupsItem;
    toJSON(data?: any): any;
}
export interface IExtensionRibbonsCustomTabGroupsItem {
    id: string;
    label: string;
    icons: ExtensionCommonIcon[];
    controls: ExtensionCommonCustomGroupControlsItem[];
    builtInGroupId: string;
}
export declare class ExtensionCommonCustomGroup implements IExtensionCommonCustomGroup {
    id: string;
    label: string;
    icons: ExtensionCommonIcon[];
    controls: ExtensionCommonCustomGroupControlsItem[];
    constructor(data?: IExtensionCommonCustomGroup);
    init(_data?: any): void;
    static fromJS(data: any): ExtensionCommonCustomGroup;
    toJSON(data?: any): any;
}
export interface IExtensionCommonCustomGroup {
    id: string;
    label: string;
    icons: ExtensionCommonIcon[];
    controls: ExtensionCommonCustomGroupControlsItem[];
}
export declare class ExtensionCommonCustomGroupControlsItem implements IExtensionCommonCustomGroupControlsItem {
    id: string;
    type: ExtensionCommonCustomGroupControlsItemType;
    builtInControlId: string;
    label: string;
    icons: ExtensionCommonIcon[];
    supertip: ExtensionCommonSuperToolTip;
    actionId: string;
    overriddenByRibbonApi: boolean;
    enabled: boolean;
    items: ExtensionCommonCustomControlMenuItem[];
    constructor(data?: IExtensionCommonCustomGroupControlsItem);
    init(_data?: any): void;
    static fromJS(data: any): ExtensionCommonCustomGroupControlsItem;
    toJSON(data?: any): any;
}
export interface IExtensionCommonCustomGroupControlsItem {
    id: string;
    type: ExtensionCommonCustomGroupControlsItemType;
    builtInControlId: string;
    label: string;
    icons: ExtensionCommonIcon[];
    supertip: ExtensionCommonSuperToolTip;
    actionId: string;
    overriddenByRibbonApi: boolean;
    enabled: boolean;
    items: ExtensionCommonCustomControlMenuItem[];
}
export declare class ExtensionRibbonsCustomMobileGroupItem implements IExtensionRibbonsCustomMobileGroupItem {
    id: string;
    label: string;
    controls: ExtensionRibbonsCustomMobileControlButtonItem[];
    constructor(data?: IExtensionRibbonsCustomMobileGroupItem);
    init(_data?: any): void;
    static fromJS(data: any): ExtensionRibbonsCustomMobileGroupItem;
    toJSON(data?: any): any;
}
export interface IExtensionRibbonsCustomMobileGroupItem {
    id: string;
    label: string;
    controls: ExtensionRibbonsCustomMobileControlButtonItem[];
}
export declare class ExtensionCommonCustomControlMenu implements IExtensionCommonCustomControlMenu {
    id: string;
    type: ExtensionCommonCustomControlMenuType;
    label: string;
    icons: ExtensionCommonIcon[];
    supertip: ExtensionCommonSuperToolTip;
    items: ExtensionCommonCustomControlMenuItem[];
    overriddenByRibbonApi: boolean;
    constructor(data?: IExtensionCommonCustomControlMenu);
    init(_data?: any): void;
    static fromJS(data: any): ExtensionCommonCustomControlMenu;
    toJSON(data?: any): any;
}
export interface IExtensionCommonCustomControlMenu {
    id: string;
    type: ExtensionCommonCustomControlMenuType;
    label: string;
    icons: ExtensionCommonIcon[];
    supertip: ExtensionCommonSuperToolTip;
    items: ExtensionCommonCustomControlMenuItem[];
    overriddenByRibbonApi: boolean;
}
export declare class ExtensionCommonCustomControlMenuItem implements IExtensionCommonCustomControlMenuItem {
    id: string;
    type: ExtensionCommonCustomControlMenuItemType;
    label: string;
    icons: ExtensionCommonIcon[];
    supertip: ExtensionCommonSuperToolTip;
    actionId: string;
    enabled: boolean;
    overriddenByRibbonApi: boolean;
    constructor(data?: IExtensionCommonCustomControlMenuItem);
    init(_data?: any): void;
    static fromJS(data: any): ExtensionCommonCustomControlMenuItem;
    toJSON(data?: any): any;
}
export interface IExtensionCommonCustomControlMenuItem {
    id: string;
    type: ExtensionCommonCustomControlMenuItemType;
    label: string;
    icons: ExtensionCommonIcon[];
    supertip: ExtensionCommonSuperToolTip;
    actionId: string;
    enabled: boolean;
    overriddenByRibbonApi: boolean;
}
export declare class ExtensionRibbonsCustomMobileControlButtonItem implements IExtensionRibbonsCustomMobileControlButtonItem {
    id: string;
    type: ExtensionRibbonsCustomMobileControlButtonItemType;
    label: string;
    icons: ExtensionCustomMobileIcon[];
    actionId: string;
    constructor(data?: IExtensionRibbonsCustomMobileControlButtonItem);
    init(_data?: any): void;
    static fromJS(data: any): ExtensionRibbonsCustomMobileControlButtonItem;
    toJSON(data?: any): any;
}
export interface IExtensionRibbonsCustomMobileControlButtonItem {
    id: string;
    type: ExtensionRibbonsCustomMobileControlButtonItemType;
    label: string;
    icons: ExtensionCustomMobileIcon[];
    actionId: string;
}
export declare class ExtensionCustomMobileIcon implements IExtensionCustomMobileIcon {
    size: number;
    url: string;
    scale: number;
    constructor(data?: IExtensionCustomMobileIcon);
    init(_data?: any): void;
    static fromJS(data: any): ExtensionCustomMobileIcon;
    toJSON(data?: any): any;
}
export interface IExtensionCustomMobileIcon {
    size: number;
    url: string;
    scale: number;
}
export declare class ExtensionCommonSuperToolTip implements IExtensionCommonSuperToolTip {
    title: string;
    description: string;
    constructor(data?: IExtensionCommonSuperToolTip);
    init(_data?: any): void;
    static fromJS(data: any): ExtensionCommonSuperToolTip;
    toJSON(data?: any): any;
}
export interface IExtensionCommonSuperToolTip {
    title: string;
    description: string;
}
export declare class ExtensionCommonIcon implements IExtensionCommonIcon {
    size: number;
    url: string;
    constructor(data?: IExtensionCommonIcon);
    init(_data?: any): void;
    static fromJS(data: any): ExtensionCommonIcon;
    toJSON(data?: any): any;
}
export interface IExtensionCommonIcon {
    size: number;
    url: string;
}
export declare class ExtensionRuntimeCode implements IExtensionRuntimeCode {
    page: string;
    script: string;
    constructor(data?: IExtensionRuntimeCode);
    init(_data?: any): void;
    static fromJS(data: any): ExtensionRuntimeCode;
    toJSON(data?: any): any;
}
export interface IExtensionRuntimeCode {
    page: string;
    script: string;
}
export declare class DashboardCard implements IDashboardCard {
    id: string;
    displayName: string;
    description: string;
    pickerGroupId: string;
    icon: DashboardCardIcon;
    contentSource: DashboardCardContentSource;
    defaultSize: DashboardCardDefaultSize;
    constructor(data?: IDashboardCard);
    init(_data?: any): void;
    static fromJS(data: any): DashboardCard;
    toJSON(data?: any): any;
}
export interface IDashboardCard {
    id: string;
    displayName: string;
    description: string;
    pickerGroupId: string;
    icon: DashboardCardIcon;
    contentSource: DashboardCardContentSource;
    defaultSize: DashboardCardDefaultSize;
}
export declare class DashboardCardIcon implements IDashboardCardIcon {
    iconUrl: string;
    officeUIFabricIconName: string;
    constructor(data?: IDashboardCardIcon);
    init(_data?: any): void;
    static fromJS(data: any): DashboardCardIcon;
    toJSON(data?: any): any;
}
export interface IDashboardCardIcon {
    iconUrl: string;
    officeUIFabricIconName: string;
}
export declare class DashboardCardContentSource implements IDashboardCardContentSource {
    sourceType: DashboardCardContentSourceSourceType;
    botConfiguration: BotConfiguration;
    constructor(data?: IDashboardCardContentSource);
    init(_data?: any): void;
    static fromJS(data: any): DashboardCardContentSource;
    toJSON(data?: any): any;
}
export interface IDashboardCardContentSource {
    sourceType: DashboardCardContentSourceSourceType;
    botConfiguration: BotConfiguration;
}
export declare class MosManifest implements IMosManifest {
    $schema: string;
    manifestVersion: string;
    version: string;
    id: string;
    localizationInfo: LocalizationInfo;
    developer: Developer;
    name: Name;
    description: Description;
    icons: Icons;
    accentColor: string;
    configurableTabs: ConfigurableTabs[];
    staticTabs: StaticTabs[];
    bots: Bots[];
    connectors: Connectors[];
    subscriptionOffer: SubscriptionOffer;
    composeExtensions: ComposeExtensions[];
    permissions: Permissions[];
    devicePermissions: DevicePermissions[];
    validDomains: string[];
    webApplicationInfo: WebApplicationInfo;
    graphConnector: GraphConnector;
    showLoadingIndicator: boolean;
    isFullScreen: boolean;
    activities: Activities;
    configurableProperties: ConfigurableProperties[];
    supportedChannelTypes: SupportedChannelTypes[];
    defaultBlockUntilAdminAction: boolean;
    publisherDocsUrl: string;
    defaultInstallScope: MosManifestDefaultInstallScope;
    defaultGroupCapability: DefaultGroupCapability;
    meetingExtensionDefinition: MeetingExtensionDefinition;
    authorization: Authorization;
    extensions: Extensions[];
    dashboardCards: DashboardCard[];
    constructor(data?: IMosManifest);
    init(_data?: any): void;
    static fromJS(data: any): MosManifest;
    toJSON(data?: any): any;
}
export interface IMosManifest {
    $schema: string;
    manifestVersion: string;
    version: string;
    id: string;
    localizationInfo: LocalizationInfo;
    developer: Developer;
    name: Name;
    description: Description;
    icons: Icons;
    accentColor: string;
    configurableTabs: ConfigurableTabs[];
    staticTabs: StaticTabs[];
    bots: Bots[];
    connectors: Connectors[];
    subscriptionOffer: SubscriptionOffer;
    composeExtensions: ComposeExtensions[];
    permissions: Permissions[];
    devicePermissions: DevicePermissions[];
    validDomains: string[];
    webApplicationInfo: WebApplicationInfo;
    graphConnector: GraphConnector;
    showLoadingIndicator: boolean;
    isFullScreen: boolean;
    activities: Activities;
    configurableProperties: ConfigurableProperties[];
    supportedChannelTypes: SupportedChannelTypes[];
    defaultBlockUntilAdminAction: boolean;
    publisherDocsUrl: string;
    defaultInstallScope: MosManifestDefaultInstallScope;
    defaultGroupCapability: DefaultGroupCapability;
    meetingExtensionDefinition: MeetingExtensionDefinition;
    authorization: Authorization;
    extensions: Extensions[];
    dashboardCards: DashboardCard[];
}
export declare class Capabilities implements ICapabilities {
    name: string;
    minVersion: string;
    maxVersion: string;
    constructor(data?: ICapabilities);
    init(_data?: any): void;
    static fromJS(data: any): Capabilities;
    toJSON(data?: any): any;
}
export interface ICapabilities {
    name: string;
    minVersion: string;
    maxVersion: string;
}
export declare enum Scopes {
    Mail = "mail",
    Workbook = "workbook",
    Document = "document",
    Presentation = "presentation"
}
export declare enum FormFactors {
    Desktop = "desktop",
    Mobile = "mobile"
}
export declare enum ExtensionRuntimesActionsItemType {
    ExecuteFunction = "executeFunction",
    OpenPage = "openPage"
}
export declare class Position implements IPosition {
    builtInTabId: string;
    align: PositionAlign;
    constructor(data?: IPosition);
    init(_data?: any): void;
    static fromJS(data: any): Position;
    toJSON(data?: any): any;
}
export interface IPosition {
    builtInTabId: string;
    align: PositionAlign;
}
export declare enum ExtensionCommonCustomGroupControlsItemType {
    Button = "button",
    Menu = "menu"
}
export declare enum ExtensionCommonCustomControlMenuType {
    Menu = "menu"
}
export declare enum ExtensionCommonCustomControlMenuItemType {
    MenuItem = "menuItem"
}
export declare enum ExtensionRibbonsCustomMobileControlButtonItemType {
    MobileButton = "mobileButton"
}
export declare enum DashboardCardDefaultSize {
    Medium = "medium",
    Large = "large"
}
export declare enum DashboardCardContentSourceSourceType {
    Bot = "bot"
}
export declare class BotConfiguration implements IBotConfiguration {
    botId: string;
    constructor(data?: IBotConfiguration);
    init(_data?: any): void;
    static fromJS(data: any): BotConfiguration;
    toJSON(data?: any): any;
}
export interface IBotConfiguration {
    botId: string;
}
export declare class LocalizationInfo implements ILocalizationInfo {
    defaultLanguageTag: string;
    additionalLanguages: AdditionalLanguages[];
    constructor(data?: ILocalizationInfo);
    init(_data?: any): void;
    static fromJS(data: any): LocalizationInfo;
    toJSON(data?: any): any;
}
export interface ILocalizationInfo {
    defaultLanguageTag: string;
    additionalLanguages: AdditionalLanguages[];
}
export declare class Developer implements IDeveloper {
    name: string;
    mpnId: string;
    websiteUrl: string;
    privacyUrl: string;
    termsOfUseUrl: string;
    constructor(data?: IDeveloper);
    init(_data?: any): void;
    static fromJS(data: any): Developer;
    toJSON(data?: any): any;
}
export interface IDeveloper {
    name: string;
    mpnId: string;
    websiteUrl: string;
    privacyUrl: string;
    termsOfUseUrl: string;
}
export declare class Name implements IName {
    short: string;
    full: string;
    constructor(data?: IName);
    init(_data?: any): void;
    static fromJS(data: any): Name;
    toJSON(data?: any): any;
}
export interface IName {
    short: string;
    full: string;
}
export declare class Description implements IDescription {
    short: string;
    full: string;
    constructor(data?: IDescription);
    init(_data?: any): void;
    static fromJS(data: any): Description;
    toJSON(data?: any): any;
}
export interface IDescription {
    short: string;
    full: string;
}
export declare class Icons implements IIcons {
    outline: string;
    color: string;
    constructor(data?: IIcons);
    init(_data?: any): void;
    static fromJS(data: any): Icons;
    toJSON(data?: any): any;
}
export interface IIcons {
    outline: string;
    color: string;
}
export declare class ConfigurableTabs implements IConfigurableTabs {
    configurationUrl: string;
    canUpdateConfiguration: boolean;
    scopes: Scopes2[];
    meetingSurfaces: MeetingSurfaces[];
    context: Context[];
    sharePointPreviewImage: string;
    supportedSharePointHosts: SupportedSharePointHosts[];
    constructor(data?: IConfigurableTabs);
    init(_data?: any): void;
    static fromJS(data: any): ConfigurableTabs;
    toJSON(data?: any): any;
}
export interface IConfigurableTabs {
    configurationUrl: string;
    canUpdateConfiguration: boolean;
    scopes: Scopes2[];
    meetingSurfaces: MeetingSurfaces[];
    context: Context[];
    sharePointPreviewImage: string;
    supportedSharePointHosts: SupportedSharePointHosts[];
}
export declare class StaticTabs implements IStaticTabs {
    entityId: string;
    name: string;
    contentUrl: string;
    contentBotId: string;
    websiteUrl: string;
    searchUrl: string;
    scopes: Scopes3[];
    context: Context2[];
    constructor(data?: IStaticTabs);
    init(_data?: any): void;
    static fromJS(data: any): StaticTabs;
    toJSON(data?: any): any;
}
export interface IStaticTabs {
    entityId: string;
    name: string;
    contentUrl: string;
    contentBotId: string;
    websiteUrl: string;
    searchUrl: string;
    scopes: Scopes3[];
    context: Context2[];
}
export declare class Bots implements IBots {
    botId: string;
    configuration: Configuration;
    needsChannelSelector: boolean;
    isNotificationOnly: boolean;
    supportsFiles: boolean;
    supportsCalling: boolean;
    supportsVideo: boolean;
    scopes: Scopes4[];
    commandLists: CommandLists[];
    constructor(data?: IBots);
    init(_data?: any): void;
    static fromJS(data: any): Bots;
    toJSON(data?: any): any;
}
export interface IBots {
    botId: string;
    configuration: Configuration;
    needsChannelSelector: boolean;
    isNotificationOnly: boolean;
    supportsFiles: boolean;
    supportsCalling: boolean;
    supportsVideo: boolean;
    scopes: Scopes4[];
    commandLists: CommandLists[];
}
export declare class Connectors implements IConnectors {
    connectorId: string;
    configurationUrl: string;
    scopes: Scopes5[];
    constructor(data?: IConnectors);
    init(_data?: any): void;
    static fromJS(data: any): Connectors;
    toJSON(data?: any): any;
}
export interface IConnectors {
    connectorId: string;
    configurationUrl: string;
    scopes: Scopes5[];
}
export declare class SubscriptionOffer implements ISubscriptionOffer {
    offerId: string;
    constructor(data?: ISubscriptionOffer);
    init(_data?: any): void;
    static fromJS(data: any): SubscriptionOffer;
    toJSON(data?: any): any;
}
export interface ISubscriptionOffer {
    offerId: string;
}
export declare class ComposeExtensions implements IComposeExtensions {
    botId: string;
    composeExtensionType: ComposeExtensionsComposeExtensionType;
    authorization: Authorization2;
    apiSpecificationFile: string;
    canUpdateConfiguration: boolean | undefined;
    commands: Commands[];
    messageHandlers: MessageHandlers[];
    constructor(data?: IComposeExtensions);
    init(_data?: any): void;
    static fromJS(data: any): ComposeExtensions;
    toJSON(data?: any): any;
}
export interface IComposeExtensions {
    botId: string;
    composeExtensionType: ComposeExtensionsComposeExtensionType;
    authorization: Authorization2;
    apiSpecificationFile: string;
    canUpdateConfiguration: boolean | undefined;
    commands: Commands[];
    messageHandlers: MessageHandlers[];
}
export declare enum Permissions {
    Identity = "identity",
    MessageTeamMembers = "messageTeamMembers"
}
export declare enum DevicePermissions {
    Geolocation = "geolocation",
    Media = "media",
    Notifications = "notifications",
    Midi = "midi",
    OpenExternal = "openExternal"
}
export declare class WebApplicationInfo implements IWebApplicationInfo {
    id: string;
    resource: string;
    constructor(data?: IWebApplicationInfo);
    init(_data?: any): void;
    static fromJS(data: any): WebApplicationInfo;
    toJSON(data?: any): any;
}
export interface IWebApplicationInfo {
    id: string;
    resource: string;
}
export declare class GraphConnector implements IGraphConnector {
    notificationUrl: string;
    constructor(data?: IGraphConnector);
    init(_data?: any): void;
    static fromJS(data: any): GraphConnector;
    toJSON(data?: any): any;
}
export interface IGraphConnector {
    notificationUrl: string;
}
export declare class Activities implements IActivities {
    activityTypes: ActivityTypes[];
    constructor(data?: IActivities);
    init(_data?: any): void;
    static fromJS(data: any): Activities;
    toJSON(data?: any): any;
}
export interface IActivities {
    activityTypes: ActivityTypes[];
}
export declare enum ConfigurableProperties {
    Name = "name",
    ShortDescription = "shortDescription",
    LongDescription = "longDescription",
    SmallImageUrl = "smallImageUrl",
    LargeImageUrl = "largeImageUrl",
    AccentColor = "accentColor",
    DeveloperUrl = "developerUrl",
    PrivacyUrl = "privacyUrl",
    TermsOfUseUrl = "termsOfUseUrl"
}
export declare enum SupportedChannelTypes {
    SharedChannels = "sharedChannels",
    PrivateChannels = "privateChannels"
}
export declare enum MosManifestDefaultInstallScope {
    Personal = "personal",
    Team = "team",
    GroupChat = "groupChat",
    Meetings = "meetings"
}
export declare class DefaultGroupCapability implements IDefaultGroupCapability {
    team: DefaultGroupCapabilityTeam;
    groupchat: DefaultGroupCapabilityGroupchat;
    meetings: DefaultGroupCapabilityMeetings;
    constructor(data?: IDefaultGroupCapability);
    init(_data?: any): void;
    static fromJS(data: any): DefaultGroupCapability;
    toJSON(data?: any): any;
}
export interface IDefaultGroupCapability {
    team: DefaultGroupCapabilityTeam;
    groupchat: DefaultGroupCapabilityGroupchat;
    meetings: DefaultGroupCapabilityMeetings;
}
export declare class MeetingExtensionDefinition implements IMeetingExtensionDefinition {
    scenes: Scenes[];
    supportsStreaming: boolean;
    supportsAnonymousGuestUsers: boolean;
    constructor(data?: IMeetingExtensionDefinition);
    init(_data?: any): void;
    static fromJS(data: any): MeetingExtensionDefinition;
    toJSON(data?: any): any;
}
export interface IMeetingExtensionDefinition {
    scenes: Scenes[];
    supportsStreaming: boolean;
    supportsAnonymousGuestUsers: boolean;
}
export declare class Authorization implements IAuthorization {
    permissions: Permissions2;
    constructor(data?: IAuthorization);
    init(_data?: any): void;
    static fromJS(data: any): Authorization;
    toJSON(data?: any): any;
}
export interface IAuthorization {
    permissions: Permissions2;
}
export declare class Extensions implements IExtensions {
    requirements: RequirementsExtensionElement;
    runtimes: Runtimes[];
    ribbons: Ribbons[];
    autoRunEvents: AutoRunEvents[];
    alternates: Alternates[];
    audienceClaimUrl: string;
    contentRuntimes: ContentRuntimes[];
    getStartedMessages: GetStartedMessages[];
    contextMenus: ContextMenus[];
    constructor(data?: IExtensions);
    init(_data?: any): void;
    static fromJS(data: any): Extensions;
    toJSON(data?: any): any;
}
export interface IExtensions {
    requirements: RequirementsExtensionElement;
    runtimes: Runtimes[];
    ribbons: Ribbons[];
    autoRunEvents: AutoRunEvents[];
    alternates: Alternates[];
    audienceClaimUrl: string;
    contentRuntimes: ContentRuntimes[];
    getStartedMessages: GetStartedMessages[];
    contextMenus: ContextMenus[];
}
export declare enum PositionAlign {
    After = "after",
    Before = "before"
}
export declare class AdditionalLanguages implements IAdditionalLanguages {
    languageTag: string;
    file: string;
    constructor(data?: IAdditionalLanguages);
    init(_data?: any): void;
    static fromJS(data: any): AdditionalLanguages;
    toJSON(data?: any): any;
}
export interface IAdditionalLanguages {
    languageTag: string;
    file: string;
}
export declare enum Scopes2 {
    Team = "team",
    GroupChat = "groupChat"
}
export declare enum MeetingSurfaces {
    SidePanel = "sidePanel",
    Stage = "stage"
}
export declare enum Context {
    PersonalTab = "personalTab",
    ChannelTab = "channelTab",
    PrivateChatTab = "privateChatTab",
    MeetingChatTab = "meetingChatTab",
    MeetingDetailsTab = "meetingDetailsTab",
    MeetingSidePanel = "meetingSidePanel",
    MeetingStage = "meetingStage"
}
export declare enum SupportedSharePointHosts {
    SharePointFullPage = "sharePointFullPage",
    SharePointWebPart = "sharePointWebPart"
}
export declare enum Scopes3 {
    Team = "team",
    Personal = "personal",
    GroupChat = "groupChat"
}
export declare enum Context2 {
    PersonalTab = "personalTab",
    ChannelTab = "channelTab",
    PrivateChatTab = "privateChatTab",
    MeetingChatTab = "meetingChatTab",
    MeetingDetailsTab = "meetingDetailsTab",
    MeetingSidePanel = "meetingSidePanel",
    MeetingStage = "meetingStage",
    TeamLevelApp = "teamLevelApp"
}
export declare class Configuration implements IConfiguration {
    team: Team;
    groupChat: Team;
    constructor(data?: IConfiguration);
    init(_data?: any): void;
    static fromJS(data: any): Configuration;
    toJSON(data?: any): any;
}
export interface IConfiguration {
    team: Team;
    groupChat: Team;
}
export declare enum Scopes4 {
    Team = "team",
    Personal = "personal",
    GroupChat = "groupChat"
}
export declare class CommandLists implements ICommandLists {
    scopes: Scopes6[];
    commands: Commands2[];
    constructor(data?: ICommandLists);
    init(_data?: any): void;
    static fromJS(data: any): CommandLists;
    toJSON(data?: any): any;
}
export interface ICommandLists {
    scopes: Scopes6[];
    commands: Commands2[];
}
export declare enum Scopes5 {
    Team = "team"
}
export declare enum ComposeExtensionsComposeExtensionType {
    BotBased = "botBased",
    ApiBased = "apiBased"
}
export declare class Authorization2 implements IAuthorization2 {
    authType: Authorization2AuthType;
    microsoftEntraConfiguration: MicrosoftEntraConfiguration;
    apiSecretServiceAuthConfiguration: ApiSecretServiceAuthConfiguration;
    constructor(data?: IAuthorization2);
    init(_data?: any): void;
    static fromJS(data: any): Authorization2;
    toJSON(data?: any): any;
}
export interface IAuthorization2 {
    authType: Authorization2AuthType;
    microsoftEntraConfiguration: MicrosoftEntraConfiguration;
    apiSecretServiceAuthConfiguration: ApiSecretServiceAuthConfiguration;
}
export declare class Commands implements ICommands {
    id: string;
    type: CommandsType;
    samplePrompts: SamplePrompts[];
    apiResponseRenderingTemplateFile: string;
    context: Context3[];
    title: string;
    description: string;
    initialRun: boolean;
    fetchTask: boolean;
    semanticDescription: string;
    parameters: Parameters[];
    taskInfo: TaskInfo;
    constructor(data?: ICommands);
    init(_data?: any): void;
    static fromJS(data: any): Commands;
    toJSON(data?: any): any;
}
export interface ICommands {
    id: string;
    type: CommandsType;
    samplePrompts: SamplePrompts[];
    apiResponseRenderingTemplateFile: string;
    context: Context3[];
    title: string;
    description: string;
    initialRun: boolean;
    fetchTask: boolean;
    semanticDescription: string;
    parameters: Parameters[];
    taskInfo: TaskInfo;
}
export declare class MessageHandlers implements IMessageHandlers {
    type: MessageHandlersType;
    value: Value;
    constructor(data?: IMessageHandlers);
    init(_data?: any): void;
    static fromJS(data: any): MessageHandlers;
    toJSON(data?: any): any;
}
export interface IMessageHandlers {
    type: MessageHandlersType;
    value: Value;
}
export declare class ActivityTypes implements IActivityTypes {
    type: string;
    description: string;
    templateText: string;
    constructor(data?: IActivityTypes);
    init(_data?: any): void;
    static fromJS(data: any): ActivityTypes;
    toJSON(data?: any): any;
}
export interface IActivityTypes {
    type: string;
    description: string;
    templateText: string;
}
export declare enum DefaultGroupCapabilityTeam {
    Tab = "tab",
    Bot = "bot",
    Connector = "connector"
}
export declare enum DefaultGroupCapabilityGroupchat {
    Tab = "tab",
    Bot = "bot",
    Connector = "connector"
}
export declare enum DefaultGroupCapabilityMeetings {
    Tab = "tab",
    Bot = "bot",
    Connector = "connector"
}
export declare class Scenes implements IScenes {
    id: string;
    name: string;
    file: string;
    preview: string;
    maxAudience: number;
    seatsReservedForOrganizersOrPresenters: number;
    constructor(data?: IScenes);
    init(_data?: any): void;
    static fromJS(data: any): Scenes;
    toJSON(data?: any): any;
}
export interface IScenes {
    id: string;
    name: string;
    file: string;
    preview: string;
    maxAudience: number;
    seatsReservedForOrganizersOrPresenters: number;
}
export declare class Permissions2 implements IPermissions2 {
    resourceSpecific: ResourceSpecific[];
    constructor(data?: IPermissions2);
    init(_data?: any): void;
    static fromJS(data: any): Permissions2;
    toJSON(data?: any): any;
}
export interface IPermissions2 {
    resourceSpecific: ResourceSpecific[];
}
export declare class Runtimes implements IRuntimes {
    requirements: RequirementsExtensionElement;
    id: string;
    type: RuntimesType;
    code: ExtensionRuntimeCode;
    lifetime: RuntimesLifetime;
    actions: ExtensionRuntimesActionsItem[];
    constructor(data?: IRuntimes);
    init(_data?: any): void;
    static fromJS(data: any): Runtimes;
    toJSON(data?: any): any;
}
export interface IRuntimes {
    requirements: RequirementsExtensionElement;
    id: string;
    type: RuntimesType;
    code: ExtensionRuntimeCode;
    lifetime: RuntimesLifetime;
    actions: ExtensionRuntimesActionsItem[];
}
export declare class Ribbons implements IRibbons {
    requirements: RequirementsExtensionElement;
    contexts: Contexts[];
    tabs: ExtensionRibbonsArrayTabsItem[];
    constructor(data?: IRibbons);
    init(_data?: any): void;
    static fromJS(data: any): Ribbons;
    toJSON(data?: any): any;
}
export interface IRibbons {
    requirements: RequirementsExtensionElement;
    contexts: Contexts[];
    tabs: ExtensionRibbonsArrayTabsItem[];
}
export declare class AutoRunEvents implements IAutoRunEvents {
    requirements: RequirementsExtensionElement;
    events: Events[];
    constructor(data?: IAutoRunEvents);
    init(_data?: any): void;
    static fromJS(data: any): AutoRunEvents;
    toJSON(data?: any): any;
}
export interface IAutoRunEvents {
    requirements: RequirementsExtensionElement;
    events: Events[];
}
export declare class Alternates implements IAlternates {
    requirements: RequirementsExtensionElement;
    prefer: Prefer;
    hide: Hide;
    alternateIcons: AlternateIcons;
    constructor(data?: IAlternates);
    init(_data?: any): void;
    static fromJS(data: any): Alternates;
    toJSON(data?: any): any;
}
export interface IAlternates {
    requirements: RequirementsExtensionElement;
    prefer: Prefer;
    hide: Hide;
    alternateIcons: AlternateIcons;
}
export declare class ContentRuntimes implements IContentRuntimes {
    requirements: RequirementsExtensionElement;
    id: string;
    code: ExtensionRuntimeCode;
    requestedHeight: number;
    requestedWidth: number;
    disableSnapshot: boolean;
    constructor(data?: IContentRuntimes);
    init(_data?: any): void;
    static fromJS(data: any): ContentRuntimes;
    toJSON(data?: any): any;
}
export interface IContentRuntimes {
    requirements: RequirementsExtensionElement;
    id: string;
    code: ExtensionRuntimeCode;
    requestedHeight: number;
    requestedWidth: number;
    disableSnapshot: boolean;
}
export declare class GetStartedMessages implements IGetStartedMessages {
    requirements: RequirementsExtensionElement;
    title: string;
    description: string;
    learnMoreUrl: string;
    constructor(data?: IGetStartedMessages);
    init(_data?: any): void;
    static fromJS(data: any): GetStartedMessages;
    toJSON(data?: any): any;
}
export interface IGetStartedMessages {
    requirements: RequirementsExtensionElement;
    title: string;
    description: string;
    learnMoreUrl: string;
}
export declare class ContextMenus implements IContextMenus {
    requirements: RequirementsExtensionElement;
    menus: Menus[];
    constructor(data?: IContextMenus);
    init(_data?: any): void;
    static fromJS(data: any): ContextMenus;
    toJSON(data?: any): any;
}
export interface IContextMenus {
    requirements: RequirementsExtensionElement;
    menus: Menus[];
}
export declare class Team implements ITeam {
    fetchTask: boolean;
    taskInfo: TaskInfo;
    constructor(data?: ITeam);
    init(_data?: any): void;
    static fromJS(data: any): Team;
    toJSON(data?: any): any;
}
export interface ITeam {
    fetchTask: boolean;
    taskInfo: TaskInfo;
}
export declare enum Scopes6 {
    Team = "team",
    Personal = "personal",
    GroupChat = "groupChat"
}
export declare class Commands2 implements ICommands2 {
    title: string;
    description: string;
    constructor(data?: ICommands2);
    init(_data?: any): void;
    static fromJS(data: any): Commands2;
    toJSON(data?: any): any;
}
export interface ICommands2 {
    title: string;
    description: string;
}
export declare enum Authorization2AuthType {
    None = "none",
    ApiSecretServiceAuth = "apiSecretServiceAuth",
    MicrosoftEntra = "microsoftEntra"
}
export declare class MicrosoftEntraConfiguration implements IMicrosoftEntraConfiguration {
    supportsSingleSignOn: boolean;
    constructor(data?: IMicrosoftEntraConfiguration);
    init(_data?: any): void;
    static fromJS(data: any): MicrosoftEntraConfiguration;
    toJSON(data?: any): any;
}
export interface IMicrosoftEntraConfiguration {
    supportsSingleSignOn: boolean;
}
export declare class ApiSecretServiceAuthConfiguration implements IApiSecretServiceAuthConfiguration {
    apiSecretRegistrationId: string;
    constructor(data?: IApiSecretServiceAuthConfiguration);
    init(_data?: any): void;
    static fromJS(data: any): ApiSecretServiceAuthConfiguration;
    toJSON(data?: any): any;
}
export interface IApiSecretServiceAuthConfiguration {
    apiSecretRegistrationId: string;
}
export declare enum CommandsType {
    Query = "query",
    Action = "action"
}
export declare class SamplePrompts implements ISamplePrompts {
    text: string;
    constructor(data?: ISamplePrompts);
    init(_data?: any): void;
    static fromJS(data: any): SamplePrompts;
    toJSON(data?: any): any;
}
export interface ISamplePrompts {
    text: string;
}
export declare enum Context3 {
    Compose = "compose",
    CommandBox = "commandBox",
    Message = "message"
}
export declare class Parameters implements IParameters {
    name: string;
    inputType: ParametersInputType;
    title: string;
    description: string;
    value: string;
    isRequired: boolean;
    semanticDescription: string;
    choices: Choices[];
    constructor(data?: IParameters);
    init(_data?: any): void;
    static fromJS(data: any): Parameters;
    toJSON(data?: any): any;
}
export interface IParameters {
    name: string;
    inputType: ParametersInputType;
    title: string;
    description: string;
    value: string;
    isRequired: boolean;
    semanticDescription: string;
    choices: Choices[];
}
export declare class TaskInfo implements ITaskInfo {
    title: string;
    width: string;
    height: string;
    url: string;
    constructor(data?: ITaskInfo);
    init(_data?: any): void;
    static fromJS(data: any): TaskInfo;
    toJSON(data?: any): any;
}
export interface ITaskInfo {
    title: string;
    width: string;
    height: string;
    url: string;
}
export declare enum MessageHandlersType {
    Link = "link"
}
export declare class Value implements IValue {
    domains: string[];
    supportsAnonymizedPayloads: boolean;
    constructor(data?: IValue);
    init(_data?: any): void;
    static fromJS(data: any): Value;
    toJSON(data?: any): any;
}
export interface IValue {
    domains: string[];
    supportsAnonymizedPayloads: boolean;
}
export declare class ResourceSpecific implements IResourceSpecific {
    name: string;
    type: ResourceSpecificType;
    constructor(data?: IResourceSpecific);
    init(_data?: any): void;
    static fromJS(data: any): ResourceSpecific;
    toJSON(data?: any): any;
}
export interface IResourceSpecific {
    name: string;
    type: ResourceSpecificType;
}
export declare enum RuntimesType {
    General = "general"
}
export declare enum RuntimesLifetime {
    Short = "short",
    Long = "long"
}
export declare enum Contexts {
    MailRead = "mailRead",
    MailCompose = "mailCompose",
    MeetingDetailsOrganizer = "meetingDetailsOrganizer",
    MeetingDetailsAttendee = "meetingDetailsAttendee",
    OnlineMeetingDetailsOrganizer = "onlineMeetingDetailsOrganizer",
    LogEventMeetingDetailsAttendee = "logEventMeetingDetailsAttendee",
    Default = "default"
}
export declare class Events implements IEvents {
    type: string;
    actionId: string;
    options: Options;
    constructor(data?: IEvents);
    init(_data?: any): void;
    static fromJS(data: any): Events;
    toJSON(data?: any): any;
}
export interface IEvents {
    type: string;
    actionId: string;
    options: Options;
}
export declare class Prefer implements IPrefer {
    comAddin: ComAddin;
    xllCustomFunctions: XllCustomFunctions;
    constructor(data?: IPrefer);
    init(_data?: any): void;
    static fromJS(data: any): Prefer;
    toJSON(data?: any): any;
}
export interface IPrefer {
    comAddin: ComAddin;
    xllCustomFunctions: XllCustomFunctions;
}
export declare class Hide implements IHide {
    storeOfficeAddin: StoreOfficeAddin;
    customOfficeAddin: CustomOfficeAddin;
    constructor(data?: IHide);
    init(_data?: any): void;
    static fromJS(data: any): Hide;
    toJSON(data?: any): any;
}
export interface IHide {
    storeOfficeAddin: StoreOfficeAddin;
    customOfficeAddin: CustomOfficeAddin;
}
export declare class AlternateIcons implements IAlternateIcons {
    icon: ExtensionCommonIcon;
    highResolutionIcon: ExtensionCommonIcon;
    constructor(data?: IAlternateIcons);
    init(_data?: any): void;
    static fromJS(data: any): AlternateIcons;
    toJSON(data?: any): any;
}
export interface IAlternateIcons {
    icon: ExtensionCommonIcon;
    highResolutionIcon: ExtensionCommonIcon;
}
export declare class Menus implements IMenus {
    entryPoint: MenusEntryPoint;
    controls: ExtensionCommonCustomGroupControlsItem[];
    constructor(data?: IMenus);
    init(_data?: any): void;
    static fromJS(data: any): Menus;
    toJSON(data?: any): any;
}
export interface IMenus {
    entryPoint: MenusEntryPoint;
    controls: ExtensionCommonCustomGroupControlsItem[];
}
export declare enum ParametersInputType {
    Text = "text",
    Textarea = "textarea",
    Number = "number",
    Date = "date",
    Time = "time",
    Toggle = "toggle",
    Choiceset = "choiceset"
}
export declare class Choices implements IChoices {
    title: string;
    value: string;
    constructor(data?: IChoices);
    init(_data?: any): void;
    static fromJS(data: any): Choices;
    toJSON(data?: any): any;
}
export interface IChoices {
    title: string;
    value: string;
}
export declare enum ResourceSpecificType {
    Application = "Application",
    Delegated = "Delegated"
}
export declare class Options implements IOptions {
    sendMode: OptionsSendMode;
    constructor(data?: IOptions);
    init(_data?: any): void;
    static fromJS(data: any): Options;
    toJSON(data?: any): any;
}
export interface IOptions {
    sendMode: OptionsSendMode;
}
export declare class ComAddin implements IComAddin {
    progId: string;
    constructor(data?: IComAddin);
    init(_data?: any): void;
    static fromJS(data: any): ComAddin;
    toJSON(data?: any): any;
}
export interface IComAddin {
    progId: string;
}
export declare class XllCustomFunctions implements IXllCustomFunctions {
    fileName: string;
    constructor(data?: IXllCustomFunctions);
    init(_data?: any): void;
    static fromJS(data: any): XllCustomFunctions;
    toJSON(data?: any): any;
}
export interface IXllCustomFunctions {
    fileName: string;
}
export declare class StoreOfficeAddin implements IStoreOfficeAddin {
    officeAddinId: string;
    assetId: string;
    constructor(data?: IStoreOfficeAddin);
    init(_data?: any): void;
    static fromJS(data: any): StoreOfficeAddin;
    toJSON(data?: any): any;
}
export interface IStoreOfficeAddin {
    officeAddinId: string;
    assetId: string;
}
export declare class CustomOfficeAddin implements ICustomOfficeAddin {
    officeAddinId: string;
    constructor(data?: ICustomOfficeAddin);
    init(_data?: any): void;
    static fromJS(data: any): CustomOfficeAddin;
    toJSON(data?: any): any;
}
export interface ICustomOfficeAddin {
    officeAddinId: string;
}
export declare enum MenusEntryPoint {
    Text = "text",
    Cell = "cell"
}
export declare enum OptionsSendMode {
    PromptUser = "promptUser",
    SoftBlock = "softBlock",
    Block = "block"
}
//# sourceMappingURL=mosManifest-previous.d.ts.map