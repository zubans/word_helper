"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultGroupCapability = exports.MosManifestDefaultInstallScope = exports.SupportedChannelTypes = exports.ConfigurableProperties = exports.Activities = exports.GraphConnector = exports.WebApplicationInfo = exports.DevicePermissions = exports.Permissions = exports.ComposeExtensions = exports.SubscriptionOffer = exports.Connectors = exports.Bots = exports.StaticTabs = exports.ConfigurableTabs = exports.Icons = exports.Description = exports.Name = exports.Developer = exports.LocalizationInfo = exports.BotConfiguration = exports.DashboardCardContentSourceSourceType = exports.DashboardCardDefaultSize = exports.ExtensionRibbonsCustomMobileControlButtonItemType = exports.ExtensionCommonCustomControlMenuItemType = exports.ExtensionCommonCustomControlMenuType = exports.ExtensionCommonCustomGroupControlsItemType = exports.Position = exports.ExtensionRuntimesActionsItemType = exports.FormFactors = exports.Scopes = exports.Capabilities = exports.MosManifest = exports.DashboardCardContentSource = exports.DashboardCardIcon = exports.DashboardCard = exports.ExtensionRuntimeCode = exports.ExtensionCommonIcon = exports.ExtensionCommonSuperToolTip = exports.ExtensionCustomMobileIcon = exports.ExtensionRibbonsCustomMobileControlButtonItem = exports.ExtensionCommonCustomControlMenuItem = exports.ExtensionCommonCustomControlMenu = exports.ExtensionRibbonsCustomMobileGroupItem = exports.ExtensionCommonCustomGroupControlsItem = exports.ExtensionCommonCustomGroup = exports.ExtensionRibbonsCustomTabGroupsItem = exports.ExtensionRibbonsArrayTabsItem = exports.ExtensionRuntimesActionsItem = exports.RequirementsExtensionElement = void 0;
exports.Events = exports.Contexts = exports.RuntimesLifetime = exports.RuntimesType = exports.ResourceSpecific = exports.Value = exports.MessageHandlersType = exports.TaskInfo = exports.Parameters = exports.Context3 = exports.SamplePrompts = exports.CommandsType = exports.ApiSecretServiceAuthConfiguration = exports.MicrosoftEntraConfiguration = exports.Authorization2AuthType = exports.Commands2 = exports.Scopes6 = exports.Team = exports.ContextMenus = exports.GetStartedMessages = exports.ContentRuntimes = exports.Alternates = exports.AutoRunEvents = exports.Ribbons = exports.Runtimes = exports.Permissions2 = exports.Scenes = exports.DefaultGroupCapabilityMeetings = exports.DefaultGroupCapabilityGroupchat = exports.DefaultGroupCapabilityTeam = exports.ActivityTypes = exports.MessageHandlers = exports.Commands = exports.Authorization2 = exports.ComposeExtensionsComposeExtensionType = exports.Scopes5 = exports.CommandLists = exports.Scopes4 = exports.Configuration = exports.Context2 = exports.Scopes3 = exports.SupportedSharePointHosts = exports.Context = exports.MeetingSurfaces = exports.Scopes2 = exports.AdditionalLanguages = exports.PositionAlign = exports.Extensions = exports.Authorization = exports.MeetingExtensionDefinition = void 0;
exports.OptionsSendMode = exports.MenusEntryPoint = exports.CustomOfficeAddin = exports.StoreOfficeAddin = exports.XllCustomFunctions = exports.ComAddin = exports.Options = exports.ResourceSpecificType = exports.Choices = exports.ParametersInputType = exports.Menus = exports.AlternateIcons = exports.Hide = exports.Prefer = void 0;
class RequirementsExtensionElement {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["capabilities"])) {
                this.capabilities = [];
                for (let item of _data["capabilities"])
                    this.capabilities.push(Capabilities.fromJS(item));
            }
            if (Array.isArray(_data["scopes"])) {
                this.scopes = [];
                for (let item of _data["scopes"])
                    this.scopes.push(item);
            }
            if (Array.isArray(_data["formFactors"])) {
                this.formFactors = [];
                for (let item of _data["formFactors"])
                    this.formFactors.push(item);
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new RequirementsExtensionElement();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.capabilities)) {
            data["capabilities"] = [];
            for (let item of this.capabilities)
                data["capabilities"].push(item.toJSON());
        }
        if (Array.isArray(this.scopes)) {
            data["scopes"] = [];
            for (let item of this.scopes)
                data["scopes"].push(item);
        }
        if (Array.isArray(this.formFactors)) {
            data["formFactors"] = [];
            for (let item of this.formFactors)
                data["formFactors"].push(item);
        }
        return data;
    }
}
exports.RequirementsExtensionElement = RequirementsExtensionElement;
class ExtensionRuntimesActionsItem {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.multiselect = false;
            this.supportsNoItemContext = false;
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.type = _data["type"];
            this.displayName = _data["displayName"];
            this.pinnable = _data["pinnable"];
            this.view = _data["view"];
            this.multiselect = _data["multiselect"] !== undefined ? _data["multiselect"] : false;
            this.supportsNoItemContext = _data["supportsNoItemContext"] !== undefined ? _data["supportsNoItemContext"] : false;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ExtensionRuntimesActionsItem();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["type"] = this.type;
        data["displayName"] = this.displayName;
        data["pinnable"] = this.pinnable;
        data["view"] = this.view;
        data["multiselect"] = this.multiselect;
        data["supportsNoItemContext"] = this.supportsNoItemContext;
        return data;
    }
}
exports.ExtensionRuntimesActionsItem = ExtensionRuntimesActionsItem;
class ExtensionRibbonsArrayTabsItem {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.label = _data["label"];
            this.position = _data["position"] ? Position.fromJS(_data["position"]) : undefined;
            this.builtInTabId = _data["builtInTabId"];
            if (Array.isArray(_data["groups"])) {
                this.groups = [];
                for (let item of _data["groups"])
                    this.groups.push(ExtensionRibbonsCustomTabGroupsItem.fromJS(item));
            }
            if (Array.isArray(_data["customMobileRibbonGroups"])) {
                this.customMobileRibbonGroups = [];
                for (let item of _data["customMobileRibbonGroups"])
                    this.customMobileRibbonGroups.push(ExtensionRibbonsCustomMobileGroupItem.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ExtensionRibbonsArrayTabsItem();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["label"] = this.label;
        data["position"] = this.position ? this.position.toJSON() : undefined;
        data["builtInTabId"] = this.builtInTabId;
        if (Array.isArray(this.groups)) {
            data["groups"] = [];
            for (let item of this.groups)
                data["groups"].push(item.toJSON());
        }
        if (Array.isArray(this.customMobileRibbonGroups)) {
            data["customMobileRibbonGroups"] = [];
            for (let item of this.customMobileRibbonGroups)
                data["customMobileRibbonGroups"].push(item.toJSON());
        }
        return data;
    }
}
exports.ExtensionRibbonsArrayTabsItem = ExtensionRibbonsArrayTabsItem;
class ExtensionRibbonsCustomTabGroupsItem {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.label = _data["label"];
            if (Array.isArray(_data["icons"])) {
                this.icons = [];
                for (let item of _data["icons"])
                    this.icons.push(ExtensionCommonIcon.fromJS(item));
            }
            if (Array.isArray(_data["controls"])) {
                this.controls = [];
                for (let item of _data["controls"])
                    this.controls.push(ExtensionCommonCustomGroupControlsItem.fromJS(item));
            }
            this.builtInGroupId = _data["builtInGroupId"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ExtensionRibbonsCustomTabGroupsItem();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["label"] = this.label;
        if (Array.isArray(this.icons)) {
            data["icons"] = [];
            for (let item of this.icons)
                data["icons"].push(item.toJSON());
        }
        if (Array.isArray(this.controls)) {
            data["controls"] = [];
            for (let item of this.controls)
                data["controls"].push(item.toJSON());
        }
        data["builtInGroupId"] = this.builtInGroupId;
        return data;
    }
}
exports.ExtensionRibbonsCustomTabGroupsItem = ExtensionRibbonsCustomTabGroupsItem;
class ExtensionCommonCustomGroup {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.controls = [];
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.label = _data["label"];
            if (Array.isArray(_data["icons"])) {
                this.icons = [];
                for (let item of _data["icons"])
                    this.icons.push(ExtensionCommonIcon.fromJS(item));
            }
            if (Array.isArray(_data["controls"])) {
                this.controls = [];
                for (let item of _data["controls"])
                    this.controls.push(ExtensionCommonCustomGroupControlsItem.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ExtensionCommonCustomGroup();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["label"] = this.label;
        if (Array.isArray(this.icons)) {
            data["icons"] = [];
            for (let item of this.icons)
                data["icons"].push(item.toJSON());
        }
        if (Array.isArray(this.controls)) {
            data["controls"] = [];
            for (let item of this.controls)
                data["controls"].push(item.toJSON());
        }
        return data;
    }
}
exports.ExtensionCommonCustomGroup = ExtensionCommonCustomGroup;
class ExtensionCommonCustomGroupControlsItem {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.icons = [];
            this.supertip = new ExtensionCommonSuperToolTip();
            this.overriddenByRibbonApi = false;
            this.enabled = true;
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.type = _data["type"];
            this.builtInControlId = _data["builtInControlId"];
            this.label = _data["label"];
            if (Array.isArray(_data["icons"])) {
                this.icons = [];
                for (let item of _data["icons"])
                    this.icons.push(ExtensionCommonIcon.fromJS(item));
            }
            this.supertip = _data["supertip"] ? ExtensionCommonSuperToolTip.fromJS(_data["supertip"]) : new ExtensionCommonSuperToolTip();
            this.actionId = _data["actionId"];
            this.overriddenByRibbonApi = _data["overriddenByRibbonApi"] !== undefined ? _data["overriddenByRibbonApi"] : false;
            this.enabled = _data["enabled"] !== undefined ? _data["enabled"] : true;
            if (Array.isArray(_data["items"])) {
                this.items = [];
                for (let item of _data["items"])
                    this.items.push(ExtensionCommonCustomControlMenuItem.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ExtensionCommonCustomGroupControlsItem();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["type"] = this.type;
        data["builtInControlId"] = this.builtInControlId;
        data["label"] = this.label;
        if (Array.isArray(this.icons)) {
            data["icons"] = [];
            for (let item of this.icons)
                data["icons"].push(item.toJSON());
        }
        data["supertip"] = this.supertip ? this.supertip.toJSON() : undefined;
        data["actionId"] = this.actionId;
        data["overriddenByRibbonApi"] = this.overriddenByRibbonApi;
        data["enabled"] = this.enabled;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}
exports.ExtensionCommonCustomGroupControlsItem = ExtensionCommonCustomGroupControlsItem;
class ExtensionRibbonsCustomMobileGroupItem {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.controls = [];
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.label = _data["label"];
            if (Array.isArray(_data["controls"])) {
                this.controls = [];
                for (let item of _data["controls"])
                    this.controls.push(ExtensionRibbonsCustomMobileControlButtonItem.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ExtensionRibbonsCustomMobileGroupItem();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["label"] = this.label;
        if (Array.isArray(this.controls)) {
            data["controls"] = [];
            for (let item of this.controls)
                data["controls"].push(item.toJSON());
        }
        return data;
    }
}
exports.ExtensionRibbonsCustomMobileGroupItem = ExtensionRibbonsCustomMobileGroupItem;
class ExtensionCommonCustomControlMenu {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.icons = [];
            this.supertip = new ExtensionCommonSuperToolTip();
            this.items = [];
            this.overriddenByRibbonApi = false;
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.type = _data["type"];
            this.label = _data["label"];
            if (Array.isArray(_data["icons"])) {
                this.icons = [];
                for (let item of _data["icons"])
                    this.icons.push(ExtensionCommonIcon.fromJS(item));
            }
            this.supertip = _data["supertip"] ? ExtensionCommonSuperToolTip.fromJS(_data["supertip"]) : new ExtensionCommonSuperToolTip();
            if (Array.isArray(_data["items"])) {
                this.items = [];
                for (let item of _data["items"])
                    this.items.push(ExtensionCommonCustomControlMenuItem.fromJS(item));
            }
            this.overriddenByRibbonApi = _data["overriddenByRibbonApi"] !== undefined ? _data["overriddenByRibbonApi"] : false;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ExtensionCommonCustomControlMenu();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["type"] = this.type;
        data["label"] = this.label;
        if (Array.isArray(this.icons)) {
            data["icons"] = [];
            for (let item of this.icons)
                data["icons"].push(item.toJSON());
        }
        data["supertip"] = this.supertip ? this.supertip.toJSON() : undefined;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["overriddenByRibbonApi"] = this.overriddenByRibbonApi;
        return data;
    }
}
exports.ExtensionCommonCustomControlMenu = ExtensionCommonCustomControlMenu;
class ExtensionCommonCustomControlMenuItem {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.supertip = new ExtensionCommonSuperToolTip();
            this.enabled = true;
            this.overriddenByRibbonApi = false;
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.type = _data["type"];
            this.label = _data["label"];
            if (Array.isArray(_data["icons"])) {
                this.icons = [];
                for (let item of _data["icons"])
                    this.icons.push(ExtensionCommonIcon.fromJS(item));
            }
            this.supertip = _data["supertip"] ? ExtensionCommonSuperToolTip.fromJS(_data["supertip"]) : new ExtensionCommonSuperToolTip();
            this.actionId = _data["actionId"];
            this.enabled = _data["enabled"] !== undefined ? _data["enabled"] : true;
            this.overriddenByRibbonApi = _data["overriddenByRibbonApi"] !== undefined ? _data["overriddenByRibbonApi"] : false;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ExtensionCommonCustomControlMenuItem();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["type"] = this.type;
        data["label"] = this.label;
        if (Array.isArray(this.icons)) {
            data["icons"] = [];
            for (let item of this.icons)
                data["icons"].push(item.toJSON());
        }
        data["supertip"] = this.supertip ? this.supertip.toJSON() : undefined;
        data["actionId"] = this.actionId;
        data["enabled"] = this.enabled;
        data["overriddenByRibbonApi"] = this.overriddenByRibbonApi;
        return data;
    }
}
exports.ExtensionCommonCustomControlMenuItem = ExtensionCommonCustomControlMenuItem;
class ExtensionRibbonsCustomMobileControlButtonItem {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.icons = [];
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.type = _data["type"];
            this.label = _data["label"];
            if (Array.isArray(_data["icons"])) {
                this.icons = [];
                for (let item of _data["icons"])
                    this.icons.push(ExtensionCustomMobileIcon.fromJS(item));
            }
            this.actionId = _data["actionId"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ExtensionRibbonsCustomMobileControlButtonItem();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["type"] = this.type;
        data["label"] = this.label;
        if (Array.isArray(this.icons)) {
            data["icons"] = [];
            for (let item of this.icons)
                data["icons"].push(item.toJSON());
        }
        data["actionId"] = this.actionId;
        return data;
    }
}
exports.ExtensionRibbonsCustomMobileControlButtonItem = ExtensionRibbonsCustomMobileControlButtonItem;
class ExtensionCustomMobileIcon {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.size = _data["size"];
            this.url = _data["url"];
            this.scale = _data["scale"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ExtensionCustomMobileIcon();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["size"] = this.size;
        data["url"] = this.url;
        data["scale"] = this.scale;
        return data;
    }
}
exports.ExtensionCustomMobileIcon = ExtensionCustomMobileIcon;
class ExtensionCommonSuperToolTip {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.title = _data["title"];
            this.description = _data["description"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ExtensionCommonSuperToolTip();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["description"] = this.description;
        return data;
    }
}
exports.ExtensionCommonSuperToolTip = ExtensionCommonSuperToolTip;
class ExtensionCommonIcon {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.size = _data["size"];
            this.url = _data["url"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ExtensionCommonIcon();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["size"] = this.size;
        data["url"] = this.url;
        return data;
    }
}
exports.ExtensionCommonIcon = ExtensionCommonIcon;
class ExtensionRuntimeCode {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.page = _data["page"];
            this.script = _data["script"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ExtensionRuntimeCode();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["page"] = this.page;
        data["script"] = this.script;
        return data;
    }
}
exports.ExtensionRuntimeCode = ExtensionRuntimeCode;
class DashboardCard {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.contentSource = new DashboardCardContentSource();
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.displayName = _data["displayName"];
            this.description = _data["description"];
            this.pickerGroupId = _data["pickerGroupId"];
            this.icon = _data["icon"] ? DashboardCardIcon.fromJS(_data["icon"]) : undefined;
            this.contentSource = _data["contentSource"] ? DashboardCardContentSource.fromJS(_data["contentSource"]) : new DashboardCardContentSource();
            this.defaultSize = _data["defaultSize"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DashboardCard();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["pickerGroupId"] = this.pickerGroupId;
        data["icon"] = this.icon ? this.icon.toJSON() : undefined;
        data["contentSource"] = this.contentSource ? this.contentSource.toJSON() : undefined;
        data["defaultSize"] = this.defaultSize;
        return data;
    }
}
exports.DashboardCard = DashboardCard;
class DashboardCardIcon {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.iconUrl = _data["iconUrl"];
            this.officeUIFabricIconName = _data["officeUIFabricIconName"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DashboardCardIcon();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["iconUrl"] = this.iconUrl;
        data["officeUIFabricIconName"] = this.officeUIFabricIconName;
        return data;
    }
}
exports.DashboardCardIcon = DashboardCardIcon;
class DashboardCardContentSource {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.sourceType = _data["sourceType"];
            this.botConfiguration = _data["botConfiguration"] ? BotConfiguration.fromJS(_data["botConfiguration"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DashboardCardContentSource();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["sourceType"] = this.sourceType;
        data["botConfiguration"] = this.botConfiguration ? this.botConfiguration.toJSON() : undefined;
        return data;
    }
}
exports.DashboardCardContentSource = DashboardCardContentSource;
class MosManifest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.developer = new Developer();
            this.name = new Name();
            this.description = new Description();
            this.icons = new Icons();
            this.showLoadingIndicator = false;
            this.isFullScreen = false;
            this.defaultBlockUntilAdminAction = false;
        }
    }
    init(_data) {
        if (_data) {
            this.$schema = _data["$schema"];
            this.manifestVersion = _data["manifestVersion"];
            this.version = _data["version"];
            this.id = _data["id"];
            this.localizationInfo = _data["localizationInfo"] ? LocalizationInfo.fromJS(_data["localizationInfo"]) : undefined;
            this.developer = _data["developer"] ? Developer.fromJS(_data["developer"]) : new Developer();
            this.name = _data["name"] ? Name.fromJS(_data["name"]) : new Name();
            this.description = _data["description"] ? Description.fromJS(_data["description"]) : new Description();
            this.icons = _data["icons"] ? Icons.fromJS(_data["icons"]) : new Icons();
            this.accentColor = _data["accentColor"];
            if (Array.isArray(_data["configurableTabs"])) {
                this.configurableTabs = [];
                for (let item of _data["configurableTabs"])
                    this.configurableTabs.push(ConfigurableTabs.fromJS(item));
            }
            if (Array.isArray(_data["staticTabs"])) {
                this.staticTabs = [];
                for (let item of _data["staticTabs"])
                    this.staticTabs.push(StaticTabs.fromJS(item));
            }
            if (Array.isArray(_data["bots"])) {
                this.bots = [];
                for (let item of _data["bots"])
                    this.bots.push(Bots.fromJS(item));
            }
            if (Array.isArray(_data["connectors"])) {
                this.connectors = [];
                for (let item of _data["connectors"])
                    this.connectors.push(Connectors.fromJS(item));
            }
            this.subscriptionOffer = _data["subscriptionOffer"] ? SubscriptionOffer.fromJS(_data["subscriptionOffer"]) : undefined;
            if (Array.isArray(_data["composeExtensions"])) {
                this.composeExtensions = [];
                for (let item of _data["composeExtensions"])
                    this.composeExtensions.push(ComposeExtensions.fromJS(item));
            }
            if (Array.isArray(_data["permissions"])) {
                this.permissions = [];
                for (let item of _data["permissions"])
                    this.permissions.push(item);
            }
            if (Array.isArray(_data["devicePermissions"])) {
                this.devicePermissions = [];
                for (let item of _data["devicePermissions"])
                    this.devicePermissions.push(item);
            }
            if (Array.isArray(_data["validDomains"])) {
                this.validDomains = [];
                for (let item of _data["validDomains"])
                    this.validDomains.push(item);
            }
            this.webApplicationInfo = _data["webApplicationInfo"] ? WebApplicationInfo.fromJS(_data["webApplicationInfo"]) : undefined;
            this.graphConnector = _data["graphConnector"] ? GraphConnector.fromJS(_data["graphConnector"]) : undefined;
            this.showLoadingIndicator = _data["showLoadingIndicator"] !== undefined ? _data["showLoadingIndicator"] : false;
            this.isFullScreen = _data["isFullScreen"] !== undefined ? _data["isFullScreen"] : false;
            this.activities = _data["activities"] ? Activities.fromJS(_data["activities"]) : undefined;
            if (Array.isArray(_data["configurableProperties"])) {
                this.configurableProperties = [];
                for (let item of _data["configurableProperties"])
                    this.configurableProperties.push(item);
            }
            if (Array.isArray(_data["supportedChannelTypes"])) {
                this.supportedChannelTypes = [];
                for (let item of _data["supportedChannelTypes"])
                    this.supportedChannelTypes.push(item);
            }
            this.defaultBlockUntilAdminAction = _data["defaultBlockUntilAdminAction"] !== undefined ? _data["defaultBlockUntilAdminAction"] : false;
            this.publisherDocsUrl = _data["publisherDocsUrl"];
            this.defaultInstallScope = _data["defaultInstallScope"];
            this.defaultGroupCapability = _data["defaultGroupCapability"] ? DefaultGroupCapability.fromJS(_data["defaultGroupCapability"]) : undefined;
            this.meetingExtensionDefinition = _data["meetingExtensionDefinition"] ? MeetingExtensionDefinition.fromJS(_data["meetingExtensionDefinition"]) : undefined;
            this.authorization = _data["authorization"] ? Authorization.fromJS(_data["authorization"]) : undefined;
            if (Array.isArray(_data["extensions"])) {
                this.extensions = [];
                for (let item of _data["extensions"])
                    this.extensions.push(Extensions.fromJS(item));
            }
            if (Array.isArray(_data["dashboardCards"])) {
                this.dashboardCards = [];
                for (let item of _data["dashboardCards"])
                    this.dashboardCards.push(DashboardCard.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new MosManifest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["$schema"] = this.$schema;
        data["manifestVersion"] = this.manifestVersion;
        data["version"] = this.version;
        data["id"] = this.id;
        data["localizationInfo"] = this.localizationInfo ? this.localizationInfo.toJSON() : undefined;
        data["developer"] = this.developer ? this.developer.toJSON() : undefined;
        data["name"] = this.name ? this.name.toJSON() : undefined;
        data["description"] = this.description ? this.description.toJSON() : undefined;
        data["icons"] = this.icons ? this.icons.toJSON() : undefined;
        data["accentColor"] = this.accentColor;
        if (Array.isArray(this.configurableTabs)) {
            data["configurableTabs"] = [];
            for (let item of this.configurableTabs)
                data["configurableTabs"].push(item.toJSON());
        }
        if (Array.isArray(this.staticTabs)) {
            data["staticTabs"] = [];
            for (let item of this.staticTabs)
                data["staticTabs"].push(item.toJSON());
        }
        if (Array.isArray(this.bots)) {
            data["bots"] = [];
            for (let item of this.bots)
                data["bots"].push(item.toJSON());
        }
        if (Array.isArray(this.connectors)) {
            data["connectors"] = [];
            for (let item of this.connectors)
                data["connectors"].push(item.toJSON());
        }
        data["subscriptionOffer"] = this.subscriptionOffer ? this.subscriptionOffer.toJSON() : undefined;
        if (Array.isArray(this.composeExtensions)) {
            data["composeExtensions"] = [];
            for (let item of this.composeExtensions)
                data["composeExtensions"].push(item.toJSON());
        }
        if (Array.isArray(this.permissions)) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item);
        }
        if (Array.isArray(this.devicePermissions)) {
            data["devicePermissions"] = [];
            for (let item of this.devicePermissions)
                data["devicePermissions"].push(item);
        }
        if (Array.isArray(this.validDomains)) {
            data["validDomains"] = [];
            for (let item of this.validDomains)
                data["validDomains"].push(item);
        }
        data["webApplicationInfo"] = this.webApplicationInfo ? this.webApplicationInfo.toJSON() : undefined;
        data["graphConnector"] = this.graphConnector ? this.graphConnector.toJSON() : undefined;
        data["showLoadingIndicator"] = this.showLoadingIndicator;
        data["isFullScreen"] = this.isFullScreen;
        data["activities"] = this.activities ? this.activities.toJSON() : undefined;
        if (Array.isArray(this.configurableProperties)) {
            data["configurableProperties"] = [];
            for (let item of this.configurableProperties)
                data["configurableProperties"].push(item);
        }
        if (Array.isArray(this.supportedChannelTypes)) {
            data["supportedChannelTypes"] = [];
            for (let item of this.supportedChannelTypes)
                data["supportedChannelTypes"].push(item);
        }
        data["defaultBlockUntilAdminAction"] = this.defaultBlockUntilAdminAction;
        data["publisherDocsUrl"] = this.publisherDocsUrl;
        data["defaultInstallScope"] = this.defaultInstallScope;
        data["defaultGroupCapability"] = this.defaultGroupCapability ? this.defaultGroupCapability.toJSON() : undefined;
        data["meetingExtensionDefinition"] = this.meetingExtensionDefinition ? this.meetingExtensionDefinition.toJSON() : undefined;
        data["authorization"] = this.authorization ? this.authorization.toJSON() : undefined;
        if (Array.isArray(this.extensions)) {
            data["extensions"] = [];
            for (let item of this.extensions)
                data["extensions"].push(item.toJSON());
        }
        if (Array.isArray(this.dashboardCards)) {
            data["dashboardCards"] = [];
            for (let item of this.dashboardCards)
                data["dashboardCards"].push(item.toJSON());
        }
        return data;
    }
}
exports.MosManifest = MosManifest;
class Capabilities {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.name = _data["name"];
            this.minVersion = _data["minVersion"];
            this.maxVersion = _data["maxVersion"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Capabilities();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["minVersion"] = this.minVersion;
        data["maxVersion"] = this.maxVersion;
        return data;
    }
}
exports.Capabilities = Capabilities;
var Scopes;
(function (Scopes) {
    Scopes["Mail"] = "mail";
    Scopes["Workbook"] = "workbook";
    Scopes["Document"] = "document";
    Scopes["Presentation"] = "presentation";
})(Scopes || (exports.Scopes = Scopes = {}));
var FormFactors;
(function (FormFactors) {
    FormFactors["Desktop"] = "desktop";
    FormFactors["Mobile"] = "mobile";
})(FormFactors || (exports.FormFactors = FormFactors = {}));
var ExtensionRuntimesActionsItemType;
(function (ExtensionRuntimesActionsItemType) {
    ExtensionRuntimesActionsItemType["ExecuteFunction"] = "executeFunction";
    ExtensionRuntimesActionsItemType["OpenPage"] = "openPage";
})(ExtensionRuntimesActionsItemType || (exports.ExtensionRuntimesActionsItemType = ExtensionRuntimesActionsItemType = {}));
class Position {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.builtInTabId = _data["builtInTabId"];
            this.align = _data["align"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Position();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["builtInTabId"] = this.builtInTabId;
        data["align"] = this.align;
        return data;
    }
}
exports.Position = Position;
var ExtensionCommonCustomGroupControlsItemType;
(function (ExtensionCommonCustomGroupControlsItemType) {
    ExtensionCommonCustomGroupControlsItemType["Button"] = "button";
    ExtensionCommonCustomGroupControlsItemType["Menu"] = "menu";
})(ExtensionCommonCustomGroupControlsItemType || (exports.ExtensionCommonCustomGroupControlsItemType = ExtensionCommonCustomGroupControlsItemType = {}));
var ExtensionCommonCustomControlMenuType;
(function (ExtensionCommonCustomControlMenuType) {
    ExtensionCommonCustomControlMenuType["Menu"] = "menu";
})(ExtensionCommonCustomControlMenuType || (exports.ExtensionCommonCustomControlMenuType = ExtensionCommonCustomControlMenuType = {}));
var ExtensionCommonCustomControlMenuItemType;
(function (ExtensionCommonCustomControlMenuItemType) {
    ExtensionCommonCustomControlMenuItemType["MenuItem"] = "menuItem";
})(ExtensionCommonCustomControlMenuItemType || (exports.ExtensionCommonCustomControlMenuItemType = ExtensionCommonCustomControlMenuItemType = {}));
var ExtensionRibbonsCustomMobileControlButtonItemType;
(function (ExtensionRibbonsCustomMobileControlButtonItemType) {
    ExtensionRibbonsCustomMobileControlButtonItemType["MobileButton"] = "mobileButton";
})(ExtensionRibbonsCustomMobileControlButtonItemType || (exports.ExtensionRibbonsCustomMobileControlButtonItemType = ExtensionRibbonsCustomMobileControlButtonItemType = {}));
var DashboardCardDefaultSize;
(function (DashboardCardDefaultSize) {
    DashboardCardDefaultSize["Medium"] = "medium";
    DashboardCardDefaultSize["Large"] = "large";
})(DashboardCardDefaultSize || (exports.DashboardCardDefaultSize = DashboardCardDefaultSize = {}));
var DashboardCardContentSourceSourceType;
(function (DashboardCardContentSourceSourceType) {
    DashboardCardContentSourceSourceType["Bot"] = "bot";
})(DashboardCardContentSourceSourceType || (exports.DashboardCardContentSourceSourceType = DashboardCardContentSourceSourceType = {}));
class BotConfiguration {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.botId = _data["botId"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new BotConfiguration();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["botId"] = this.botId;
        return data;
    }
}
exports.BotConfiguration = BotConfiguration;
class LocalizationInfo {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.defaultLanguageTag = _data["defaultLanguageTag"];
            if (Array.isArray(_data["additionalLanguages"])) {
                this.additionalLanguages = [];
                for (let item of _data["additionalLanguages"])
                    this.additionalLanguages.push(AdditionalLanguages.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new LocalizationInfo();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["defaultLanguageTag"] = this.defaultLanguageTag;
        if (Array.isArray(this.additionalLanguages)) {
            data["additionalLanguages"] = [];
            for (let item of this.additionalLanguages)
                data["additionalLanguages"].push(item.toJSON());
        }
        return data;
    }
}
exports.LocalizationInfo = LocalizationInfo;
class Developer {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.name = _data["name"];
            this.mpnId = _data["mpnId"];
            this.websiteUrl = _data["websiteUrl"];
            this.privacyUrl = _data["privacyUrl"];
            this.termsOfUseUrl = _data["termsOfUseUrl"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Developer();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["mpnId"] = this.mpnId;
        data["websiteUrl"] = this.websiteUrl;
        data["privacyUrl"] = this.privacyUrl;
        data["termsOfUseUrl"] = this.termsOfUseUrl;
        return data;
    }
}
exports.Developer = Developer;
class Name {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.short = _data["short"];
            this.full = _data["full"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Name();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["short"] = this.short;
        data["full"] = this.full;
        return data;
    }
}
exports.Name = Name;
class Description {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.short = _data["short"];
            this.full = _data["full"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Description();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["short"] = this.short;
        data["full"] = this.full;
        return data;
    }
}
exports.Description = Description;
class Icons {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.outline = _data["outline"];
            this.color = _data["color"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Icons();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["outline"] = this.outline;
        data["color"] = this.color;
        return data;
    }
}
exports.Icons = Icons;
class ConfigurableTabs {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.canUpdateConfiguration = true;
            this.scopes = [];
        }
    }
    init(_data) {
        if (_data) {
            this.configurationUrl = _data["configurationUrl"];
            this.canUpdateConfiguration = _data["canUpdateConfiguration"] !== undefined ? _data["canUpdateConfiguration"] : true;
            if (Array.isArray(_data["scopes"])) {
                this.scopes = [];
                for (let item of _data["scopes"])
                    this.scopes.push(item);
            }
            if (Array.isArray(_data["meetingSurfaces"])) {
                this.meetingSurfaces = [];
                for (let item of _data["meetingSurfaces"])
                    this.meetingSurfaces.push(item);
            }
            if (Array.isArray(_data["context"])) {
                this.context = [];
                for (let item of _data["context"])
                    this.context.push(item);
            }
            this.sharePointPreviewImage = _data["sharePointPreviewImage"];
            if (Array.isArray(_data["supportedSharePointHosts"])) {
                this.supportedSharePointHosts = [];
                for (let item of _data["supportedSharePointHosts"])
                    this.supportedSharePointHosts.push(item);
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ConfigurableTabs();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["configurationUrl"] = this.configurationUrl;
        data["canUpdateConfiguration"] = this.canUpdateConfiguration;
        if (Array.isArray(this.scopes)) {
            data["scopes"] = [];
            for (let item of this.scopes)
                data["scopes"].push(item);
        }
        if (Array.isArray(this.meetingSurfaces)) {
            data["meetingSurfaces"] = [];
            for (let item of this.meetingSurfaces)
                data["meetingSurfaces"].push(item);
        }
        if (Array.isArray(this.context)) {
            data["context"] = [];
            for (let item of this.context)
                data["context"].push(item);
        }
        data["sharePointPreviewImage"] = this.sharePointPreviewImage;
        if (Array.isArray(this.supportedSharePointHosts)) {
            data["supportedSharePointHosts"] = [];
            for (let item of this.supportedSharePointHosts)
                data["supportedSharePointHosts"].push(item);
        }
        return data;
    }
}
exports.ConfigurableTabs = ConfigurableTabs;
class StaticTabs {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.scopes = [];
        }
    }
    init(_data) {
        if (_data) {
            this.entityId = _data["entityId"];
            this.name = _data["name"];
            this.contentUrl = _data["contentUrl"];
            this.contentBotId = _data["contentBotId"];
            this.websiteUrl = _data["websiteUrl"];
            this.searchUrl = _data["searchUrl"];
            if (Array.isArray(_data["scopes"])) {
                this.scopes = [];
                for (let item of _data["scopes"])
                    this.scopes.push(item);
            }
            if (Array.isArray(_data["context"])) {
                this.context = [];
                for (let item of _data["context"])
                    this.context.push(item);
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new StaticTabs();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["entityId"] = this.entityId;
        data["name"] = this.name;
        data["contentUrl"] = this.contentUrl;
        data["contentBotId"] = this.contentBotId;
        data["websiteUrl"] = this.websiteUrl;
        data["searchUrl"] = this.searchUrl;
        if (Array.isArray(this.scopes)) {
            data["scopes"] = [];
            for (let item of this.scopes)
                data["scopes"].push(item);
        }
        if (Array.isArray(this.context)) {
            data["context"] = [];
            for (let item of this.context)
                data["context"].push(item);
        }
        return data;
    }
}
exports.StaticTabs = StaticTabs;
class Bots {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.needsChannelSelector = false;
            this.isNotificationOnly = false;
            this.supportsFiles = false;
            this.supportsCalling = false;
            this.supportsVideo = false;
            this.scopes = [];
        }
    }
    init(_data) {
        if (_data) {
            this.botId = _data["botId"];
            this.configuration = _data["configuration"] ? Configuration.fromJS(_data["configuration"]) : undefined;
            this.needsChannelSelector = _data["needsChannelSelector"] !== undefined ? _data["needsChannelSelector"] : false;
            this.isNotificationOnly = _data["isNotificationOnly"] !== undefined ? _data["isNotificationOnly"] : false;
            this.supportsFiles = _data["supportsFiles"] !== undefined ? _data["supportsFiles"] : false;
            this.supportsCalling = _data["supportsCalling"] !== undefined ? _data["supportsCalling"] : false;
            this.supportsVideo = _data["supportsVideo"] !== undefined ? _data["supportsVideo"] : false;
            if (Array.isArray(_data["scopes"])) {
                this.scopes = [];
                for (let item of _data["scopes"])
                    this.scopes.push(item);
            }
            if (Array.isArray(_data["commandLists"])) {
                this.commandLists = [];
                for (let item of _data["commandLists"])
                    this.commandLists.push(CommandLists.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Bots();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["botId"] = this.botId;
        data["configuration"] = this.configuration ? this.configuration.toJSON() : undefined;
        data["needsChannelSelector"] = this.needsChannelSelector;
        data["isNotificationOnly"] = this.isNotificationOnly;
        data["supportsFiles"] = this.supportsFiles;
        data["supportsCalling"] = this.supportsCalling;
        data["supportsVideo"] = this.supportsVideo;
        if (Array.isArray(this.scopes)) {
            data["scopes"] = [];
            for (let item of this.scopes)
                data["scopes"].push(item);
        }
        if (Array.isArray(this.commandLists)) {
            data["commandLists"] = [];
            for (let item of this.commandLists)
                data["commandLists"].push(item.toJSON());
        }
        return data;
    }
}
exports.Bots = Bots;
class Connectors {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.scopes = [];
        }
    }
    init(_data) {
        if (_data) {
            this.connectorId = _data["connectorId"];
            this.configurationUrl = _data["configurationUrl"];
            if (Array.isArray(_data["scopes"])) {
                this.scopes = [];
                for (let item of _data["scopes"])
                    this.scopes.push(item);
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Connectors();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["connectorId"] = this.connectorId;
        data["configurationUrl"] = this.configurationUrl;
        if (Array.isArray(this.scopes)) {
            data["scopes"] = [];
            for (let item of this.scopes)
                data["scopes"].push(item);
        }
        return data;
    }
}
exports.Connectors = Connectors;
class SubscriptionOffer {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.offerId = _data["offerId"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new SubscriptionOffer();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["offerId"] = this.offerId;
        return data;
    }
}
exports.SubscriptionOffer = SubscriptionOffer;
class ComposeExtensions {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.canUpdateConfiguration = null;
        }
    }
    init(_data) {
        if (_data) {
            this.botId = _data["botId"];
            this.composeExtensionType = _data["composeExtensionType"];
            this.authorization = _data["authorization"] ? Authorization2.fromJS(_data["authorization"]) : undefined;
            this.apiSpecificationFile = _data["apiSpecificationFile"];
            this.canUpdateConfiguration = _data["canUpdateConfiguration"] !== undefined ? _data["canUpdateConfiguration"] : null;
            if (Array.isArray(_data["commands"])) {
                this.commands = [];
                for (let item of _data["commands"])
                    this.commands.push(Commands.fromJS(item));
            }
            if (Array.isArray(_data["messageHandlers"])) {
                this.messageHandlers = [];
                for (let item of _data["messageHandlers"])
                    this.messageHandlers.push(MessageHandlers.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ComposeExtensions();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["botId"] = this.botId;
        data["composeExtensionType"] = this.composeExtensionType;
        data["authorization"] = this.authorization ? this.authorization.toJSON() : undefined;
        data["apiSpecificationFile"] = this.apiSpecificationFile;
        data["canUpdateConfiguration"] = this.canUpdateConfiguration;
        if (Array.isArray(this.commands)) {
            data["commands"] = [];
            for (let item of this.commands)
                data["commands"].push(item.toJSON());
        }
        if (Array.isArray(this.messageHandlers)) {
            data["messageHandlers"] = [];
            for (let item of this.messageHandlers)
                data["messageHandlers"].push(item.toJSON());
        }
        return data;
    }
}
exports.ComposeExtensions = ComposeExtensions;
var Permissions;
(function (Permissions) {
    Permissions["Identity"] = "identity";
    Permissions["MessageTeamMembers"] = "messageTeamMembers";
})(Permissions || (exports.Permissions = Permissions = {}));
var DevicePermissions;
(function (DevicePermissions) {
    DevicePermissions["Geolocation"] = "geolocation";
    DevicePermissions["Media"] = "media";
    DevicePermissions["Notifications"] = "notifications";
    DevicePermissions["Midi"] = "midi";
    DevicePermissions["OpenExternal"] = "openExternal";
})(DevicePermissions || (exports.DevicePermissions = DevicePermissions = {}));
class WebApplicationInfo {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.resource = _data["resource"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new WebApplicationInfo();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["resource"] = this.resource;
        return data;
    }
}
exports.WebApplicationInfo = WebApplicationInfo;
class GraphConnector {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.notificationUrl = _data["notificationUrl"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new GraphConnector();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["notificationUrl"] = this.notificationUrl;
        return data;
    }
}
exports.GraphConnector = GraphConnector;
class Activities {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["activityTypes"])) {
                this.activityTypes = [];
                for (let item of _data["activityTypes"])
                    this.activityTypes.push(ActivityTypes.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Activities();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.activityTypes)) {
            data["activityTypes"] = [];
            for (let item of this.activityTypes)
                data["activityTypes"].push(item.toJSON());
        }
        return data;
    }
}
exports.Activities = Activities;
var ConfigurableProperties;
(function (ConfigurableProperties) {
    ConfigurableProperties["Name"] = "name";
    ConfigurableProperties["ShortDescription"] = "shortDescription";
    ConfigurableProperties["LongDescription"] = "longDescription";
    ConfigurableProperties["SmallImageUrl"] = "smallImageUrl";
    ConfigurableProperties["LargeImageUrl"] = "largeImageUrl";
    ConfigurableProperties["AccentColor"] = "accentColor";
    ConfigurableProperties["DeveloperUrl"] = "developerUrl";
    ConfigurableProperties["PrivacyUrl"] = "privacyUrl";
    ConfigurableProperties["TermsOfUseUrl"] = "termsOfUseUrl";
})(ConfigurableProperties || (exports.ConfigurableProperties = ConfigurableProperties = {}));
var SupportedChannelTypes;
(function (SupportedChannelTypes) {
    SupportedChannelTypes["SharedChannels"] = "sharedChannels";
    SupportedChannelTypes["PrivateChannels"] = "privateChannels";
})(SupportedChannelTypes || (exports.SupportedChannelTypes = SupportedChannelTypes = {}));
var MosManifestDefaultInstallScope;
(function (MosManifestDefaultInstallScope) {
    MosManifestDefaultInstallScope["Personal"] = "personal";
    MosManifestDefaultInstallScope["Team"] = "team";
    MosManifestDefaultInstallScope["GroupChat"] = "groupChat";
    MosManifestDefaultInstallScope["Meetings"] = "meetings";
})(MosManifestDefaultInstallScope || (exports.MosManifestDefaultInstallScope = MosManifestDefaultInstallScope = {}));
class DefaultGroupCapability {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.team = _data["team"];
            this.groupchat = _data["groupchat"];
            this.meetings = _data["meetings"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DefaultGroupCapability();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["team"] = this.team;
        data["groupchat"] = this.groupchat;
        data["meetings"] = this.meetings;
        return data;
    }
}
exports.DefaultGroupCapability = DefaultGroupCapability;
class MeetingExtensionDefinition {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.supportsStreaming = false;
            this.supportsAnonymousGuestUsers = false;
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["scenes"])) {
                this.scenes = [];
                for (let item of _data["scenes"])
                    this.scenes.push(Scenes.fromJS(item));
            }
            this.supportsStreaming = _data["supportsStreaming"] !== undefined ? _data["supportsStreaming"] : false;
            this.supportsAnonymousGuestUsers = _data["supportsAnonymousGuestUsers"] !== undefined ? _data["supportsAnonymousGuestUsers"] : false;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new MeetingExtensionDefinition();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.scenes)) {
            data["scenes"] = [];
            for (let item of this.scenes)
                data["scenes"].push(item.toJSON());
        }
        data["supportsStreaming"] = this.supportsStreaming;
        data["supportsAnonymousGuestUsers"] = this.supportsAnonymousGuestUsers;
        return data;
    }
}
exports.MeetingExtensionDefinition = MeetingExtensionDefinition;
class Authorization {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.permissions = _data["permissions"] ? Permissions2.fromJS(_data["permissions"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Authorization();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["permissions"] = this.permissions ? this.permissions.toJSON() : undefined;
        return data;
    }
}
exports.Authorization = Authorization;
class Extensions {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.requirements = _data["requirements"] ? RequirementsExtensionElement.fromJS(_data["requirements"]) : undefined;
            if (Array.isArray(_data["runtimes"])) {
                this.runtimes = [];
                for (let item of _data["runtimes"])
                    this.runtimes.push(Runtimes.fromJS(item));
            }
            if (Array.isArray(_data["ribbons"])) {
                this.ribbons = [];
                for (let item of _data["ribbons"])
                    this.ribbons.push(Ribbons.fromJS(item));
            }
            if (Array.isArray(_data["autoRunEvents"])) {
                this.autoRunEvents = [];
                for (let item of _data["autoRunEvents"])
                    this.autoRunEvents.push(AutoRunEvents.fromJS(item));
            }
            if (Array.isArray(_data["alternates"])) {
                this.alternates = [];
                for (let item of _data["alternates"])
                    this.alternates.push(Alternates.fromJS(item));
            }
            this.audienceClaimUrl = _data["audienceClaimUrl"];
            if (Array.isArray(_data["contentRuntimes"])) {
                this.contentRuntimes = [];
                for (let item of _data["contentRuntimes"])
                    this.contentRuntimes.push(ContentRuntimes.fromJS(item));
            }
            if (Array.isArray(_data["getStartedMessages"])) {
                this.getStartedMessages = [];
                for (let item of _data["getStartedMessages"])
                    this.getStartedMessages.push(GetStartedMessages.fromJS(item));
            }
            if (Array.isArray(_data["contextMenus"])) {
                this.contextMenus = [];
                for (let item of _data["contextMenus"])
                    this.contextMenus.push(ContextMenus.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Extensions();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["requirements"] = this.requirements ? this.requirements.toJSON() : undefined;
        if (Array.isArray(this.runtimes)) {
            data["runtimes"] = [];
            for (let item of this.runtimes)
                data["runtimes"].push(item.toJSON());
        }
        if (Array.isArray(this.ribbons)) {
            data["ribbons"] = [];
            for (let item of this.ribbons)
                data["ribbons"].push(item.toJSON());
        }
        if (Array.isArray(this.autoRunEvents)) {
            data["autoRunEvents"] = [];
            for (let item of this.autoRunEvents)
                data["autoRunEvents"].push(item.toJSON());
        }
        if (Array.isArray(this.alternates)) {
            data["alternates"] = [];
            for (let item of this.alternates)
                data["alternates"].push(item.toJSON());
        }
        data["audienceClaimUrl"] = this.audienceClaimUrl;
        if (Array.isArray(this.contentRuntimes)) {
            data["contentRuntimes"] = [];
            for (let item of this.contentRuntimes)
                data["contentRuntimes"].push(item.toJSON());
        }
        if (Array.isArray(this.getStartedMessages)) {
            data["getStartedMessages"] = [];
            for (let item of this.getStartedMessages)
                data["getStartedMessages"].push(item.toJSON());
        }
        if (Array.isArray(this.contextMenus)) {
            data["contextMenus"] = [];
            for (let item of this.contextMenus)
                data["contextMenus"].push(item.toJSON());
        }
        return data;
    }
}
exports.Extensions = Extensions;
var PositionAlign;
(function (PositionAlign) {
    PositionAlign["After"] = "after";
    PositionAlign["Before"] = "before";
})(PositionAlign || (exports.PositionAlign = PositionAlign = {}));
class AdditionalLanguages {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.languageTag = _data["languageTag"];
            this.file = _data["file"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new AdditionalLanguages();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["languageTag"] = this.languageTag;
        data["file"] = this.file;
        return data;
    }
}
exports.AdditionalLanguages = AdditionalLanguages;
var Scopes2;
(function (Scopes2) {
    Scopes2["Team"] = "team";
    Scopes2["GroupChat"] = "groupChat";
})(Scopes2 || (exports.Scopes2 = Scopes2 = {}));
var MeetingSurfaces;
(function (MeetingSurfaces) {
    MeetingSurfaces["SidePanel"] = "sidePanel";
    MeetingSurfaces["Stage"] = "stage";
})(MeetingSurfaces || (exports.MeetingSurfaces = MeetingSurfaces = {}));
var Context;
(function (Context) {
    Context["PersonalTab"] = "personalTab";
    Context["ChannelTab"] = "channelTab";
    Context["PrivateChatTab"] = "privateChatTab";
    Context["MeetingChatTab"] = "meetingChatTab";
    Context["MeetingDetailsTab"] = "meetingDetailsTab";
    Context["MeetingSidePanel"] = "meetingSidePanel";
    Context["MeetingStage"] = "meetingStage";
})(Context || (exports.Context = Context = {}));
var SupportedSharePointHosts;
(function (SupportedSharePointHosts) {
    SupportedSharePointHosts["SharePointFullPage"] = "sharePointFullPage";
    SupportedSharePointHosts["SharePointWebPart"] = "sharePointWebPart";
})(SupportedSharePointHosts || (exports.SupportedSharePointHosts = SupportedSharePointHosts = {}));
var Scopes3;
(function (Scopes3) {
    Scopes3["Team"] = "team";
    Scopes3["Personal"] = "personal";
    Scopes3["GroupChat"] = "groupChat";
})(Scopes3 || (exports.Scopes3 = Scopes3 = {}));
var Context2;
(function (Context2) {
    Context2["PersonalTab"] = "personalTab";
    Context2["ChannelTab"] = "channelTab";
    Context2["PrivateChatTab"] = "privateChatTab";
    Context2["MeetingChatTab"] = "meetingChatTab";
    Context2["MeetingDetailsTab"] = "meetingDetailsTab";
    Context2["MeetingSidePanel"] = "meetingSidePanel";
    Context2["MeetingStage"] = "meetingStage";
    Context2["TeamLevelApp"] = "teamLevelApp";
})(Context2 || (exports.Context2 = Context2 = {}));
class Configuration {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.team = _data["team"] ? Team.fromJS(_data["team"]) : undefined;
            this.groupChat = _data["groupChat"] ? Team.fromJS(_data["groupChat"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Configuration();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["team"] = this.team ? this.team.toJSON() : undefined;
        data["groupChat"] = this.groupChat ? this.groupChat.toJSON() : undefined;
        return data;
    }
}
exports.Configuration = Configuration;
var Scopes4;
(function (Scopes4) {
    Scopes4["Team"] = "team";
    Scopes4["Personal"] = "personal";
    Scopes4["GroupChat"] = "groupChat";
})(Scopes4 || (exports.Scopes4 = Scopes4 = {}));
class CommandLists {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.scopes = [];
            this.commands = [];
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["scopes"])) {
                this.scopes = [];
                for (let item of _data["scopes"])
                    this.scopes.push(item);
            }
            if (Array.isArray(_data["commands"])) {
                this.commands = [];
                for (let item of _data["commands"])
                    this.commands.push(Commands2.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new CommandLists();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.scopes)) {
            data["scopes"] = [];
            for (let item of this.scopes)
                data["scopes"].push(item);
        }
        if (Array.isArray(this.commands)) {
            data["commands"] = [];
            for (let item of this.commands)
                data["commands"].push(item.toJSON());
        }
        return data;
    }
}
exports.CommandLists = CommandLists;
var Scopes5;
(function (Scopes5) {
    Scopes5["Team"] = "team";
})(Scopes5 || (exports.Scopes5 = Scopes5 = {}));
var ComposeExtensionsComposeExtensionType;
(function (ComposeExtensionsComposeExtensionType) {
    ComposeExtensionsComposeExtensionType["BotBased"] = "botBased";
    ComposeExtensionsComposeExtensionType["ApiBased"] = "apiBased";
})(ComposeExtensionsComposeExtensionType || (exports.ComposeExtensionsComposeExtensionType = ComposeExtensionsComposeExtensionType = {}));
class Authorization2 {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.authType = _data["authType"];
            this.microsoftEntraConfiguration = _data["microsoftEntraConfiguration"] ? MicrosoftEntraConfiguration.fromJS(_data["microsoftEntraConfiguration"]) : undefined;
            this.apiSecretServiceAuthConfiguration = _data["apiSecretServiceAuthConfiguration"] ? ApiSecretServiceAuthConfiguration.fromJS(_data["apiSecretServiceAuthConfiguration"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Authorization2();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["authType"] = this.authType;
        data["microsoftEntraConfiguration"] = this.microsoftEntraConfiguration ? this.microsoftEntraConfiguration.toJSON() : undefined;
        data["apiSecretServiceAuthConfiguration"] = this.apiSecretServiceAuthConfiguration ? this.apiSecretServiceAuthConfiguration.toJSON() : undefined;
        return data;
    }
}
exports.Authorization2 = Authorization2;
class Commands {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.type = CommandsType.Query;
            this.initialRun = false;
            this.fetchTask = false;
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.type = _data["type"] !== undefined ? _data["type"] : CommandsType.Query;
            if (Array.isArray(_data["samplePrompts"])) {
                this.samplePrompts = [];
                for (let item of _data["samplePrompts"])
                    this.samplePrompts.push(SamplePrompts.fromJS(item));
            }
            this.apiResponseRenderingTemplateFile = _data["apiResponseRenderingTemplateFile"];
            if (Array.isArray(_data["context"])) {
                this.context = [];
                for (let item of _data["context"])
                    this.context.push(item);
            }
            this.title = _data["title"];
            this.description = _data["description"];
            this.initialRun = _data["initialRun"] !== undefined ? _data["initialRun"] : false;
            this.fetchTask = _data["fetchTask"] !== undefined ? _data["fetchTask"] : false;
            this.semanticDescription = _data["semanticDescription"];
            if (Array.isArray(_data["parameters"])) {
                this.parameters = [];
                for (let item of _data["parameters"])
                    this.parameters.push(Parameters.fromJS(item));
            }
            this.taskInfo = _data["taskInfo"] ? TaskInfo.fromJS(_data["taskInfo"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Commands();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["type"] = this.type;
        if (Array.isArray(this.samplePrompts)) {
            data["samplePrompts"] = [];
            for (let item of this.samplePrompts)
                data["samplePrompts"].push(item.toJSON());
        }
        data["apiResponseRenderingTemplateFile"] = this.apiResponseRenderingTemplateFile;
        if (Array.isArray(this.context)) {
            data["context"] = [];
            for (let item of this.context)
                data["context"].push(item);
        }
        data["title"] = this.title;
        data["description"] = this.description;
        data["initialRun"] = this.initialRun;
        data["fetchTask"] = this.fetchTask;
        data["semanticDescription"] = this.semanticDescription;
        if (Array.isArray(this.parameters)) {
            data["parameters"] = [];
            for (let item of this.parameters)
                data["parameters"].push(item.toJSON());
        }
        data["taskInfo"] = this.taskInfo ? this.taskInfo.toJSON() : undefined;
        return data;
    }
}
exports.Commands = Commands;
class MessageHandlers {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.value = new Value();
        }
    }
    init(_data) {
        if (_data) {
            this.type = _data["type"];
            this.value = _data["value"] ? Value.fromJS(_data["value"]) : new Value();
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new MessageHandlers();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["value"] = this.value ? this.value.toJSON() : undefined;
        return data;
    }
}
exports.MessageHandlers = MessageHandlers;
class ActivityTypes {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.type = _data["type"];
            this.description = _data["description"];
            this.templateText = _data["templateText"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ActivityTypes();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["description"] = this.description;
        data["templateText"] = this.templateText;
        return data;
    }
}
exports.ActivityTypes = ActivityTypes;
var DefaultGroupCapabilityTeam;
(function (DefaultGroupCapabilityTeam) {
    DefaultGroupCapabilityTeam["Tab"] = "tab";
    DefaultGroupCapabilityTeam["Bot"] = "bot";
    DefaultGroupCapabilityTeam["Connector"] = "connector";
})(DefaultGroupCapabilityTeam || (exports.DefaultGroupCapabilityTeam = DefaultGroupCapabilityTeam = {}));
var DefaultGroupCapabilityGroupchat;
(function (DefaultGroupCapabilityGroupchat) {
    DefaultGroupCapabilityGroupchat["Tab"] = "tab";
    DefaultGroupCapabilityGroupchat["Bot"] = "bot";
    DefaultGroupCapabilityGroupchat["Connector"] = "connector";
})(DefaultGroupCapabilityGroupchat || (exports.DefaultGroupCapabilityGroupchat = DefaultGroupCapabilityGroupchat = {}));
var DefaultGroupCapabilityMeetings;
(function (DefaultGroupCapabilityMeetings) {
    DefaultGroupCapabilityMeetings["Tab"] = "tab";
    DefaultGroupCapabilityMeetings["Bot"] = "bot";
    DefaultGroupCapabilityMeetings["Connector"] = "connector";
})(DefaultGroupCapabilityMeetings || (exports.DefaultGroupCapabilityMeetings = DefaultGroupCapabilityMeetings = {}));
class Scenes {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.file = _data["file"];
            this.preview = _data["preview"];
            this.maxAudience = _data["maxAudience"];
            this.seatsReservedForOrganizersOrPresenters = _data["seatsReservedForOrganizersOrPresenters"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Scenes();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["file"] = this.file;
        data["preview"] = this.preview;
        data["maxAudience"] = this.maxAudience;
        data["seatsReservedForOrganizersOrPresenters"] = this.seatsReservedForOrganizersOrPresenters;
        return data;
    }
}
exports.Scenes = Scenes;
class Permissions2 {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["resourceSpecific"])) {
                this.resourceSpecific = [];
                for (let item of _data["resourceSpecific"])
                    this.resourceSpecific.push(ResourceSpecific.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Permissions2();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.resourceSpecific)) {
            data["resourceSpecific"] = [];
            for (let item of this.resourceSpecific)
                data["resourceSpecific"].push(item.toJSON());
        }
        return data;
    }
}
exports.Permissions2 = Permissions2;
class Runtimes {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.type = RuntimesType.General;
            this.code = new ExtensionRuntimeCode();
            this.lifetime = RuntimesLifetime.Short;
        }
    }
    init(_data) {
        if (_data) {
            this.requirements = _data["requirements"] ? RequirementsExtensionElement.fromJS(_data["requirements"]) : undefined;
            this.id = _data["id"];
            this.type = _data["type"] !== undefined ? _data["type"] : RuntimesType.General;
            this.code = _data["code"] ? ExtensionRuntimeCode.fromJS(_data["code"]) : new ExtensionRuntimeCode();
            this.lifetime = _data["lifetime"] !== undefined ? _data["lifetime"] : RuntimesLifetime.Short;
            if (Array.isArray(_data["actions"])) {
                this.actions = [];
                for (let item of _data["actions"])
                    this.actions.push(ExtensionRuntimesActionsItem.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Runtimes();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["requirements"] = this.requirements ? this.requirements.toJSON() : undefined;
        data["id"] = this.id;
        data["type"] = this.type;
        data["code"] = this.code ? this.code.toJSON() : undefined;
        data["lifetime"] = this.lifetime;
        if (Array.isArray(this.actions)) {
            data["actions"] = [];
            for (let item of this.actions)
                data["actions"].push(item.toJSON());
        }
        return data;
    }
}
exports.Runtimes = Runtimes;
class Ribbons {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.tabs = [];
        }
    }
    init(_data) {
        if (_data) {
            this.requirements = _data["requirements"] ? RequirementsExtensionElement.fromJS(_data["requirements"]) : undefined;
            if (Array.isArray(_data["contexts"])) {
                this.contexts = [];
                for (let item of _data["contexts"])
                    this.contexts.push(item);
            }
            if (Array.isArray(_data["tabs"])) {
                this.tabs = [];
                for (let item of _data["tabs"])
                    this.tabs.push(ExtensionRibbonsArrayTabsItem.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Ribbons();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["requirements"] = this.requirements ? this.requirements.toJSON() : undefined;
        if (Array.isArray(this.contexts)) {
            data["contexts"] = [];
            for (let item of this.contexts)
                data["contexts"].push(item);
        }
        if (Array.isArray(this.tabs)) {
            data["tabs"] = [];
            for (let item of this.tabs)
                data["tabs"].push(item.toJSON());
        }
        return data;
    }
}
exports.Ribbons = Ribbons;
class AutoRunEvents {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.events = [];
        }
    }
    init(_data) {
        if (_data) {
            this.requirements = _data["requirements"] ? RequirementsExtensionElement.fromJS(_data["requirements"]) : undefined;
            if (Array.isArray(_data["events"])) {
                this.events = [];
                for (let item of _data["events"])
                    this.events.push(Events.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new AutoRunEvents();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["requirements"] = this.requirements ? this.requirements.toJSON() : undefined;
        if (Array.isArray(this.events)) {
            data["events"] = [];
            for (let item of this.events)
                data["events"].push(item.toJSON());
        }
        return data;
    }
}
exports.AutoRunEvents = AutoRunEvents;
class Alternates {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.requirements = _data["requirements"] ? RequirementsExtensionElement.fromJS(_data["requirements"]) : undefined;
            this.prefer = _data["prefer"] ? Prefer.fromJS(_data["prefer"]) : undefined;
            this.hide = _data["hide"] ? Hide.fromJS(_data["hide"]) : undefined;
            this.alternateIcons = _data["alternateIcons"] ? AlternateIcons.fromJS(_data["alternateIcons"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Alternates();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["requirements"] = this.requirements ? this.requirements.toJSON() : undefined;
        data["prefer"] = this.prefer ? this.prefer.toJSON() : undefined;
        data["hide"] = this.hide ? this.hide.toJSON() : undefined;
        data["alternateIcons"] = this.alternateIcons ? this.alternateIcons.toJSON() : undefined;
        return data;
    }
}
exports.Alternates = Alternates;
class ContentRuntimes {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.code = new ExtensionRuntimeCode();
            this.disableSnapshot = false;
        }
    }
    init(_data) {
        if (_data) {
            this.requirements = _data["requirements"] ? RequirementsExtensionElement.fromJS(_data["requirements"]) : undefined;
            this.id = _data["id"];
            this.code = _data["code"] ? ExtensionRuntimeCode.fromJS(_data["code"]) : new ExtensionRuntimeCode();
            this.requestedHeight = _data["requestedHeight"];
            this.requestedWidth = _data["requestedWidth"];
            this.disableSnapshot = _data["disableSnapshot"] !== undefined ? _data["disableSnapshot"] : false;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ContentRuntimes();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["requirements"] = this.requirements ? this.requirements.toJSON() : undefined;
        data["id"] = this.id;
        data["code"] = this.code ? this.code.toJSON() : undefined;
        data["requestedHeight"] = this.requestedHeight;
        data["requestedWidth"] = this.requestedWidth;
        data["disableSnapshot"] = this.disableSnapshot;
        return data;
    }
}
exports.ContentRuntimes = ContentRuntimes;
class GetStartedMessages {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.requirements = _data["requirements"] ? RequirementsExtensionElement.fromJS(_data["requirements"]) : undefined;
            this.title = _data["title"];
            this.description = _data["description"];
            this.learnMoreUrl = _data["learnMoreUrl"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new GetStartedMessages();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["requirements"] = this.requirements ? this.requirements.toJSON() : undefined;
        data["title"] = this.title;
        data["description"] = this.description;
        data["learnMoreUrl"] = this.learnMoreUrl;
        return data;
    }
}
exports.GetStartedMessages = GetStartedMessages;
class ContextMenus {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.menus = [];
        }
    }
    init(_data) {
        if (_data) {
            this.requirements = _data["requirements"] ? RequirementsExtensionElement.fromJS(_data["requirements"]) : undefined;
            if (Array.isArray(_data["menus"])) {
                this.menus = [];
                for (let item of _data["menus"])
                    this.menus.push(Menus.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ContextMenus();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["requirements"] = this.requirements ? this.requirements.toJSON() : undefined;
        if (Array.isArray(this.menus)) {
            data["menus"] = [];
            for (let item of this.menus)
                data["menus"].push(item.toJSON());
        }
        return data;
    }
}
exports.ContextMenus = ContextMenus;
class Team {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.fetchTask = _data["fetchTask"];
            this.taskInfo = _data["taskInfo"] ? TaskInfo.fromJS(_data["taskInfo"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Team();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["fetchTask"] = this.fetchTask;
        data["taskInfo"] = this.taskInfo ? this.taskInfo.toJSON() : undefined;
        return data;
    }
}
exports.Team = Team;
var Scopes6;
(function (Scopes6) {
    Scopes6["Team"] = "team";
    Scopes6["Personal"] = "personal";
    Scopes6["GroupChat"] = "groupChat";
})(Scopes6 || (exports.Scopes6 = Scopes6 = {}));
class Commands2 {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.title = _data["title"];
            this.description = _data["description"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Commands2();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["description"] = this.description;
        return data;
    }
}
exports.Commands2 = Commands2;
var Authorization2AuthType;
(function (Authorization2AuthType) {
    Authorization2AuthType["None"] = "none";
    Authorization2AuthType["ApiSecretServiceAuth"] = "apiSecretServiceAuth";
    Authorization2AuthType["MicrosoftEntra"] = "microsoftEntra";
})(Authorization2AuthType || (exports.Authorization2AuthType = Authorization2AuthType = {}));
class MicrosoftEntraConfiguration {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.supportsSingleSignOn = false;
        }
    }
    init(_data) {
        if (_data) {
            this.supportsSingleSignOn = _data["supportsSingleSignOn"] !== undefined ? _data["supportsSingleSignOn"] : false;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new MicrosoftEntraConfiguration();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["supportsSingleSignOn"] = this.supportsSingleSignOn;
        return data;
    }
}
exports.MicrosoftEntraConfiguration = MicrosoftEntraConfiguration;
class ApiSecretServiceAuthConfiguration {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.apiSecretRegistrationId = _data["apiSecretRegistrationId"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiSecretServiceAuthConfiguration();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["apiSecretRegistrationId"] = this.apiSecretRegistrationId;
        return data;
    }
}
exports.ApiSecretServiceAuthConfiguration = ApiSecretServiceAuthConfiguration;
var CommandsType;
(function (CommandsType) {
    CommandsType["Query"] = "query";
    CommandsType["Action"] = "action";
})(CommandsType || (exports.CommandsType = CommandsType = {}));
class SamplePrompts {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.text = _data["text"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new SamplePrompts();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["text"] = this.text;
        return data;
    }
}
exports.SamplePrompts = SamplePrompts;
var Context3;
(function (Context3) {
    Context3["Compose"] = "compose";
    Context3["CommandBox"] = "commandBox";
    Context3["Message"] = "message";
})(Context3 || (exports.Context3 = Context3 = {}));
class Parameters {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.inputType = ParametersInputType.Text;
            this.isRequired = false;
        }
    }
    init(_data) {
        if (_data) {
            this.name = _data["name"];
            this.inputType = _data["inputType"] !== undefined ? _data["inputType"] : ParametersInputType.Text;
            this.title = _data["title"];
            this.description = _data["description"];
            this.value = _data["value"];
            this.isRequired = _data["isRequired"] !== undefined ? _data["isRequired"] : false;
            this.semanticDescription = _data["semanticDescription"];
            if (Array.isArray(_data["choices"])) {
                this.choices = [];
                for (let item of _data["choices"])
                    this.choices.push(Choices.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Parameters();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["inputType"] = this.inputType;
        data["title"] = this.title;
        data["description"] = this.description;
        data["value"] = this.value;
        data["isRequired"] = this.isRequired;
        data["semanticDescription"] = this.semanticDescription;
        if (Array.isArray(this.choices)) {
            data["choices"] = [];
            for (let item of this.choices)
                data["choices"].push(item.toJSON());
        }
        return data;
    }
}
exports.Parameters = Parameters;
class TaskInfo {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.title = _data["title"];
            this.width = _data["width"];
            this.height = _data["height"];
            this.url = _data["url"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new TaskInfo();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["width"] = this.width;
        data["height"] = this.height;
        data["url"] = this.url;
        return data;
    }
}
exports.TaskInfo = TaskInfo;
var MessageHandlersType;
(function (MessageHandlersType) {
    MessageHandlersType["Link"] = "link";
})(MessageHandlersType || (exports.MessageHandlersType = MessageHandlersType = {}));
class Value {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.supportsAnonymizedPayloads = false;
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["domains"])) {
                this.domains = [];
                for (let item of _data["domains"])
                    this.domains.push(item);
            }
            this.supportsAnonymizedPayloads = _data["supportsAnonymizedPayloads"] !== undefined ? _data["supportsAnonymizedPayloads"] : false;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Value();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.domains)) {
            data["domains"] = [];
            for (let item of this.domains)
                data["domains"].push(item);
        }
        data["supportsAnonymizedPayloads"] = this.supportsAnonymizedPayloads;
        return data;
    }
}
exports.Value = Value;
class ResourceSpecific {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.name = _data["name"];
            this.type = _data["type"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ResourceSpecific();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["type"] = this.type;
        return data;
    }
}
exports.ResourceSpecific = ResourceSpecific;
var RuntimesType;
(function (RuntimesType) {
    RuntimesType["General"] = "general";
})(RuntimesType || (exports.RuntimesType = RuntimesType = {}));
var RuntimesLifetime;
(function (RuntimesLifetime) {
    RuntimesLifetime["Short"] = "short";
    RuntimesLifetime["Long"] = "long";
})(RuntimesLifetime || (exports.RuntimesLifetime = RuntimesLifetime = {}));
var Contexts;
(function (Contexts) {
    Contexts["MailRead"] = "mailRead";
    Contexts["MailCompose"] = "mailCompose";
    Contexts["MeetingDetailsOrganizer"] = "meetingDetailsOrganizer";
    Contexts["MeetingDetailsAttendee"] = "meetingDetailsAttendee";
    Contexts["OnlineMeetingDetailsOrganizer"] = "onlineMeetingDetailsOrganizer";
    Contexts["LogEventMeetingDetailsAttendee"] = "logEventMeetingDetailsAttendee";
    Contexts["Default"] = "default";
})(Contexts || (exports.Contexts = Contexts = {}));
class Events {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.type = _data["type"];
            this.actionId = _data["actionId"];
            this.options = _data["options"] ? Options.fromJS(_data["options"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Events();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["actionId"] = this.actionId;
        data["options"] = this.options ? this.options.toJSON() : undefined;
        return data;
    }
}
exports.Events = Events;
class Prefer {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.comAddin = _data["comAddin"] ? ComAddin.fromJS(_data["comAddin"]) : undefined;
            this.xllCustomFunctions = _data["xllCustomFunctions"] ? XllCustomFunctions.fromJS(_data["xllCustomFunctions"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Prefer();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["comAddin"] = this.comAddin ? this.comAddin.toJSON() : undefined;
        data["xllCustomFunctions"] = this.xllCustomFunctions ? this.xllCustomFunctions.toJSON() : undefined;
        return data;
    }
}
exports.Prefer = Prefer;
class Hide {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.storeOfficeAddin = _data["storeOfficeAddin"] ? StoreOfficeAddin.fromJS(_data["storeOfficeAddin"]) : undefined;
            this.customOfficeAddin = _data["customOfficeAddin"] ? CustomOfficeAddin.fromJS(_data["customOfficeAddin"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Hide();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["storeOfficeAddin"] = this.storeOfficeAddin ? this.storeOfficeAddin.toJSON() : undefined;
        data["customOfficeAddin"] = this.customOfficeAddin ? this.customOfficeAddin.toJSON() : undefined;
        return data;
    }
}
exports.Hide = Hide;
class AlternateIcons {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.icon = new ExtensionCommonIcon();
            this.highResolutionIcon = new ExtensionCommonIcon();
        }
    }
    init(_data) {
        if (_data) {
            this.icon = _data["icon"] ? ExtensionCommonIcon.fromJS(_data["icon"]) : new ExtensionCommonIcon();
            this.highResolutionIcon = _data["highResolutionIcon"] ? ExtensionCommonIcon.fromJS(_data["highResolutionIcon"]) : new ExtensionCommonIcon();
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new AlternateIcons();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["icon"] = this.icon ? this.icon.toJSON() : undefined;
        data["highResolutionIcon"] = this.highResolutionIcon ? this.highResolutionIcon.toJSON() : undefined;
        return data;
    }
}
exports.AlternateIcons = AlternateIcons;
class Menus {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.controls = [];
        }
    }
    init(_data) {
        if (_data) {
            this.entryPoint = _data["entryPoint"];
            if (Array.isArray(_data["controls"])) {
                this.controls = [];
                for (let item of _data["controls"])
                    this.controls.push(ExtensionCommonCustomGroupControlsItem.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Menus();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["entryPoint"] = this.entryPoint;
        if (Array.isArray(this.controls)) {
            data["controls"] = [];
            for (let item of this.controls)
                data["controls"].push(item.toJSON());
        }
        return data;
    }
}
exports.Menus = Menus;
var ParametersInputType;
(function (ParametersInputType) {
    ParametersInputType["Text"] = "text";
    ParametersInputType["Textarea"] = "textarea";
    ParametersInputType["Number"] = "number";
    ParametersInputType["Date"] = "date";
    ParametersInputType["Time"] = "time";
    ParametersInputType["Toggle"] = "toggle";
    ParametersInputType["Choiceset"] = "choiceset";
})(ParametersInputType || (exports.ParametersInputType = ParametersInputType = {}));
class Choices {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.title = _data["title"];
            this.value = _data["value"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Choices();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["value"] = this.value;
        return data;
    }
}
exports.Choices = Choices;
var ResourceSpecificType;
(function (ResourceSpecificType) {
    ResourceSpecificType["Application"] = "Application";
    ResourceSpecificType["Delegated"] = "Delegated";
})(ResourceSpecificType || (exports.ResourceSpecificType = ResourceSpecificType = {}));
class Options {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.sendMode = _data["sendMode"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Options();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["sendMode"] = this.sendMode;
        return data;
    }
}
exports.Options = Options;
class ComAddin {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.progId = _data["progId"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ComAddin();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["progId"] = this.progId;
        return data;
    }
}
exports.ComAddin = ComAddin;
class XllCustomFunctions {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.fileName = _data["fileName"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new XllCustomFunctions();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["fileName"] = this.fileName;
        return data;
    }
}
exports.XllCustomFunctions = XllCustomFunctions;
class StoreOfficeAddin {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.officeAddinId = _data["officeAddinId"];
            this.assetId = _data["assetId"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new StoreOfficeAddin();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["officeAddinId"] = this.officeAddinId;
        data["assetId"] = this.assetId;
        return data;
    }
}
exports.StoreOfficeAddin = StoreOfficeAddin;
class CustomOfficeAddin {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.officeAddinId = _data["officeAddinId"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new CustomOfficeAddin();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["officeAddinId"] = this.officeAddinId;
        return data;
    }
}
exports.CustomOfficeAddin = CustomOfficeAddin;
var MenusEntryPoint;
(function (MenusEntryPoint) {
    MenusEntryPoint["Text"] = "text";
    MenusEntryPoint["Cell"] = "cell";
})(MenusEntryPoint || (exports.MenusEntryPoint = MenusEntryPoint = {}));
var OptionsSendMode;
(function (OptionsSendMode) {
    OptionsSendMode["PromptUser"] = "promptUser";
    OptionsSendMode["SoftBlock"] = "softBlock";
    OptionsSendMode["Block"] = "block";
})(OptionsSendMode || (exports.OptionsSendMode = OptionsSendMode = {}));
//# sourceMappingURL=mosManifest-previous.js.map