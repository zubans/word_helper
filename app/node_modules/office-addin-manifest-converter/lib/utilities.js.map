{"version":3,"file":"utilities.js","sourceRoot":"","sources":["../src/utilities.ts"],"names":[],"mappings":"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","sourcesContent":["import { OSF } from \"../lib/osfmos\";\nimport { OfficeExt } from \"../lib/osfmos\";\nimport { Constants } from \"./constants\";\nimport * as fs from \"fs\";\nimport { assert } from \"console\";\n\nexport class Utilities {\n  static isNullOrUndefined(value: any): boolean {\n    return value === null || value === undefined;\n  }\n\n  static writeFile(path: string, contents: string, errorText: string, successText: string): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      fs.writeFile(path, contents, (err) => {\n        if (err) {\n          Utilities.logError(errorText, err);\n          reject(err);\n        } else {\n          Utilities.log(successText);\n          resolve();\n        }\n      });\n    });\n  }\n\n  static async writeFileSync(path: string, contents: string, successText: string) {\n    await fs.writeFileSync(path, contents);\n\n    Utilities.log(successText);\n  }\n\n  static ensureFolder(folderPath: string) {\n    if (!fs.existsSync(folderPath)) {\n      fs.mkdirSync(folderPath, { recursive: true });\n    }\n  }\n\n  static _inputXmlFilePath: string = \"\";\n  static setInputXmlFilePath(inputXmlFilePath: string) {\n    Utilities._inputXmlFilePath = inputXmlFilePath;\n  }\n\n  static _showDebugInfo: boolean = false;\n  static setShowDebugInfo(showDebugInfo: boolean) {\n    Utilities._showDebugInfo = showDebugInfo;\n  }\n\n  static _verboseLogging: boolean = false;\n  static setVerbosity(verbose: boolean) {\n    Utilities._verboseLogging = verbose;\n  }\n  static getVerbosity(): boolean {\n    return Utilities._verboseLogging;\n  }\n\n  static _downloadImages: boolean = false;\n  static setDownloadImages(downloadImages: boolean) {\n    Utilities._downloadImages = downloadImages;\n  }\n\n  static _writeImageUrls: boolean = false;\n  static setWriteImageUrls(writeImageUrls: boolean) {\n    Utilities._writeImageUrls = writeImageUrls;\n  }\n\n  static _schemaOverride: string = null;\n  static setSchemaOverride(schemaOverride: string): void {\n    Utilities._schemaOverride = schemaOverride;\n  }\n\n  static _schemaVersionOverride: string = null;\n  static setSchemaVersionOverride(schemaVersionOverride: string): void {\n    Utilities._schemaVersionOverride = schemaVersionOverride;\n  }\n\n  static log(message?: any, ...optionalParams): void {\n    if (Utilities._verboseLogging) {\n      console.log(Constants.LoggingPrefix + message, ...optionalParams);\n    }\n  }\n\n  static logWarning(message?: any, ...optionalParams): void {\n    if (Utilities._verboseLogging) {\n      console.error(Constants.LoggingPrefixWarning + message, ...optionalParams);\n    }\n  }\n\n  static logError(message?: any, ...optionalParams): void {\n    if (Utilities._verboseLogging) {\n      console.error(Constants.LoggingPrefixError + message, ...optionalParams);\n    }\n  }\n\n  static logDebug(message?: any, ...optionalParams): void {\n    if (Utilities._showDebugInfo) {\n      console.log(Constants.LoggingPrefix + message, ...optionalParams);\n    }\n  }\n\n  static assert(condition: boolean, message?: any, ...optionalParams): void {\n    if (Utilities._showDebugInfo) {\n      assert(condition, message, ...optionalParams);\n    }\n  }\n\n  static createLocaleFileName(locale: string): string {\n    return locale + Constants.JSONFileSuffix;\n  }\n\n  static truncateString(value: string, maxLength: number): string {\n    if (value.length <= maxLength) {\n      return value;\n    }\n\n    const insertLengths: number = Constants.TruncationText.length + Constants.EllipsisText.length;\n\n    if (maxLength <= insertLengths) {\n      if (maxLength <= Constants.EllipsisText.length) {\n        // Unable to truncate so we just return the value\n        return value;\n      }\n\n      // Return truncation with only ellipsis without <TRUNCATION> prefix\n      return value.substring(0, maxLength - Constants.EllipsisText.length) + Constants.EllipsisText;\n    }\n\n    return Constants.TruncationText + value.substring(0, maxLength - insertLengths) + Constants.EllipsisText;\n  }\n\n  static getLimitedString(value: string, maxLength: number, message: string) {\n    if (value.length > maxLength) {\n      Utilities.logWarning(message, maxLength);\n      return Utilities.truncateString(value, maxLength);\n    } else {\n      return value;\n    }\n  }\n\n  // There are locations in the OSF code where messages are logged using this AppTelemetry that may be relevant to the converter\n  // This defines it so that we will get those messages.\n  static setUpOSFAppTelemetry(): void {\n    if (Utilities.isNullOrUndefined(OSF[\"AppTelemetry\"])) {\n      OSF[\"AppTelemetry\"] = {};\n      OSF[\"AppTelemetry\"][\"logAppCommonMessage\"] = function (message: string) {\n        Utilities.log(message);\n      };\n    }\n  }\n\n  static async promiseAll(promises: Promise<void>[], resolve: any, reject: any, message: string) {\n    let failedPromises: Error[] = [];\n    await Promise.all(\n      promises.map((p) =>\n        p.catch((e) => {\n          failedPromises.push(e);\n        }),\n      ),\n    );\n\n    if (failedPromises.length > 0) {\n      reject(new Error(message)); //rejecting with first error\n    } else {\n      resolve();\n    }\n  }\n}\n"]}