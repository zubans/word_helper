{"version":3,"file":"main.js","sourceRoot":"","sources":["../src/main.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from \"fs\";\nimport path = require(\"path\");\nimport { Converter } from \"./converter\";\nimport { Constants } from \"./constants\";\nimport { Utilities } from \"./utilities\";\n\nfunction initialize() {\n  Utilities.setUpOSFAppTelemetry();\n}\n\nexport async function convert(\n  inputXmlFilePath: string,\n  outputJsonFolderPath: string,\n  imageDownload: boolean = false,\n  schemaOverride: string = null,\n  schemaVersionOverride: string = null,\n  verbose: boolean = false,\n): Promise<void> {\n  initialize();\n  Utilities.setInputXmlFilePath(inputXmlFilePath);\n\n  if (Utilities.isNullOrUndefined(imageDownload)) {\n    imageDownload = false;\n  }\n\n  Utilities.setDownloadImages(imageDownload);\n\n  // This option is currently always enabled and is no longer specified by the customer but kept internally for now\n  var imageUrls: boolean = true;\n\n  if (Utilities.isNullOrUndefined(imageUrls)) {\n    imageUrls = false;\n  }\n\n  Utilities.setWriteImageUrls(imageUrls);\n\n  if (Utilities.isNullOrUndefined(verbose)) {\n    verbose = false;\n  }\n\n  Utilities.setVerbosity(verbose);\n\n  if (!Utilities.isNullOrUndefined(schemaOverride)) {\n    Utilities.setSchemaOverride(schemaOverride);\n  }\n\n  if (!Utilities.isNullOrUndefined(schemaVersionOverride)) {\n    Utilities.setSchemaVersionOverride(schemaVersionOverride);\n  }\n\n  const inputXml: string = fs.readFileSync(inputXmlFilePath, \"utf8\");\n  let basename: string = path.basename(inputXmlFilePath);\n  if (path.extname(basename).toLowerCase() === \".xml\") {\n    basename = basename.slice(0, -4);\n  }\n\n  // In case no output folder is given, write to a new folder as the sibling of the input XML file\n  let outputFolder: string = outputJsonFolderPath;\n  if (Utilities.isNullOrUndefined(outputFolder) || outputFolder.trim().length == 0) {\n    outputFolder = path.dirname(inputXmlFilePath) + \"/\" + basename;\n  }\n\n  Utilities.ensureFolder(outputFolder);\n\n  const converter: Converter = new Converter(inputXml, \"en-US\");\n  await converter.convert();\n\n  await converter.downloadAndStoreIcons(outputFolder);\n\n  // Write the main manifest file\n  await writeMainManifestFile(converter, outputFolder);\n\n  // Write locale files\n  await writeLocaleFiles(converter, outputFolder);\n}\n\nasync function writeMainManifestFile(converter: Converter, outputJSONFolderPath: string) {\n  const manifestFilePath: string = outputJSONFolderPath + \"/\" + Constants.JSONManifestFileName;\n  Utilities.log(\"manifest file path: \" + manifestFilePath);\n  const jsonResult = converter.getJSON();\n\n  await Utilities.writeFile(\n    manifestFilePath,\n    JSON.stringify(jsonResult, null /* replacer */, 4 /* space */),\n    \"Error writing file\",\n    \"Successfully wrote file: \" + manifestFilePath,\n  );\n}\n\nfunction writeLocaleFiles(converter: Converter, outputJSONPath: string): Promise<void> {\n  return new Promise<void>(async (resolve, reject) => {\n    let locales: string[] = converter.getLocaleBuilder().getLocales();\n    let promises: Promise<void>[] = [];\n    Utilities.log(\"locales seen by legacy parser: \" + locales);\n    // Write file for each language that is present in the manifest\n    for (let i: number = 0; i < locales.length; i++) {\n      let locale: string = locales[i];\n      let localeFilePath: string = outputJSONPath + \"/\" + Utilities.createLocaleFileName(locale);\n      Utilities.log(\"locale file path: \" + localeFilePath);\n      promises.push(\n        Utilities.writeFile(\n          localeFilePath,\n          JSON.stringify(\n            converter.getLocaleBuilder().getLocaleFileResources(locale),\n            null /* replacer */,\n            4 /* space */,\n          ),\n          \"Error writing file\",\n          \"Successfully wrote file: \" + localeFilePath,\n        ),\n      );\n    }\n\n    await Utilities.promiseAll(promises, resolve, reject, \"writeLocalFiles:Failed\");\n  });\n}\n"]}