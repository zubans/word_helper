{"version":3,"file":"cli.js","sourceRoot":"","sources":["../src/cli.ts"],"names":[],"mappings":";;;;;;;;;;;;AAKA,yCAAoC;AACpC,+BAA+B;AAC/B,2CAAwC;AAIxC,MAAM,OAAO,GAAG,IAAI,mBAAO,EAAE,CAAC;AAE9B,OAAO;KACJ,IAAI,CAAC,iCAAiC,CAAC;KACvC,WAAW,CAAC,0DAA0D,CAAC;KACvE,KAAK,CAAC,8FAA8F,CAAC,CAAC;AAEzG,OAAO;KACJ,OAAO,CAAC,SAAS,CAAC;KAClB,QAAQ,CAAC,qBAAqB,CAAC;KAC/B,2BAA2B,CAAC,KAAK,CAAC;KAClC,MAAM,CAAC,0BAA0B,EAAE,wEAAwE,CAAC;KAC5G,MAAM,CAAC,sBAAsB,EAAE,kFAAkF,CAAC;KAKlH,MAAM,CAAC,eAAe,EAAE,iDAAiD,CAAC;KAC1E,MAAM,CAAC,aAAa,EAAE,8CAA8C,CAAC;KACrE,MAAM,CAAC,yBAAyB,EAAE,kLAAkL,CAAC;KACrN,MAAM,CAAC,qCAAqC,EAAE,gNAAgN,CAAC;KAC/P,MAAM,CAAC,CAAO,eAAuB,EAAE,OAAY,EAAiB,EAAE;IACrE,MAAM,OAAO,CAAC,eAAe,EAAE,OAAO,CAAC,CAAC;AAC1C,CAAC,CAAA,CAAC,CAAC;AAEL,OAAO,CAAC,KAAK,EAAE,CAAC;AAEhB,SAAe,OAAO,CAAC,eAAuB,EAAE,OAAY;;QAC1D,IAAI,CAAC;YACH,MAAM,MAAM,GAAW,OAAO,CAAC,MAAM,CAAC;YACtC,MAAM,aAAa,GAAY,qBAAS,CAAC,iBAAiB,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC;YAClH,MAAM,cAAc,GAAW,qBAAS,CAAC,iBAAiB,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC;YACnH,MAAM,qBAAqB,GAAW,qBAAS,CAAC,iBAAiB,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,qBAAqB,CAAC;YAGxI,MAAM,OAAO,GAAY,qBAAS,CAAC,iBAAiB,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC;YAChG,MAAM,GAAG,GAAY,qBAAS,CAAC,iBAAiB,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC;YAExF,qBAAS,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;YAChC,qBAAS,CAAC,QAAQ,CAAC,wBAAwB,GAAG,eAAe,GAAG,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;YAE/F,MAAM,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE,MAAM,EAAE,aAAa,EAAE,cAAc,EAAE,qBAAqB,EAAE,OAAO,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE;gBACrH,qBAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YACxB,CAAC,CAAC,CAAC;YAEH,qBAAS,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;QACvC,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,qBAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QAC1B,CAAC;IACH,CAAC;CAAA","sourcesContent":["#!/usr/bin/env node\n\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { Command } from \"commander\";\nimport * as main from \"./main\";\nimport { Utilities } from \"./utilities\";\n\n/* global process */\n\nconst program = new Command();\n\nprogram\n  .name(\"office-addin-manifest-converter\")\n  .description(\"CLI to the Office add-in manifest converter, XML to JSON\")\n  .usage(\"Usage: convert input-xml-manifest-path [--output <output-json-manifest-directory>] [-i] [-v]\");\n\nprogram\n  .command(\"convert\")\n  .argument(\"<xml-manifest-file>\")\n  .combineFlagAndOptionalValue(false) // boolean flags can be combined together, such as '-ivd'\n  .option(\"-o, --output <directory>\", \"path to the directory where the JSON manifest files will be written to\")\n  .option(\"-i, --image-download\", \"the root images color and outline should be downloaded into the output directory\")\n  // There was a change to stop supporting .file property on icons in the package so now we need to always\n  // write image urls except for top level app icons that are in the main part of the manifest.\n  // So, -u option is currently not used.\n  // .option('-u, --image-urls', 'insert urls instead of package relative references for images that come from inside of the extension element.')\n  .option(\"-v, --verbose\", \"extra log messages should be written to console\")\n  .option(\"-d, --debug\", \"show asserts and other debugging information\")\n  .option(\"--schema-override <url>\", \"the url that property $schema will be set to. Default is the latest public version schema that the converter supports. $schema and manifestVersion properties should be in sync.\")\n  .option(\"--schema-version-override <version>\", \"the version string that property manifestVersion will be set to. Default is the latest public version that the converter supports (ie \\\"1.17\\\" etc). $schema and manifestVersion properties should be in sync.\")\n  .action(async (xmlManifestFile: string, options: any): Promise<void> => {\n    await convert(xmlManifestFile, options);\n  });\n\nprogram.parse();\n\nasync function convert(xmlManifestFile: string, options: any) {\n  try {\n    const output: string = options.output;\n    const imageDownload: boolean = Utilities.isNullOrUndefined(options.imageDownload) ? false : options.imageDownload;\n    const schemaOverride: string = Utilities.isNullOrUndefined(options.schemaOverride) ? null : options.schemaOverride;\n    const schemaVersionOverride: string = Utilities.isNullOrUndefined(options.schemaVersionOverride) ? null : options.schemaVersionOverride;\n\n    // Also see comment above.  imageUrls are now always written by default\n    const verbose: boolean = Utilities.isNullOrUndefined(options.verbose) ? false : options.verbose;\n    const dbg: boolean = Utilities.isNullOrUndefined(options.debug) ? false : options.debug;\n\n    Utilities.setShowDebugInfo(dbg);\n    Utilities.logDebug(\"Command line: convert \" + xmlManifestFile + \" \" + JSON.stringify(options));\n\n    await main.convert(xmlManifestFile, output, imageDownload, schemaOverride, schemaVersionOverride, verbose).catch((e) => {\n      Utilities.logError(e);\n    });\n\n    Utilities.log(\"Convert is complete\");\n  } catch (err) {\n    Utilities.logError(err);\n  }\n}"]}