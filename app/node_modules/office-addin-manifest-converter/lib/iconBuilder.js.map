{"version":3,"file":"iconBuilder.js","sourceRoot":"","sources":["../src/iconBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["const fs = require(\"fs\");\nconst http = require(\"http\");\nconst https = require(\"https\");\n\nimport * as util from \"util\";\nimport { Constants } from \"./constants\";\nimport { Utilities } from \"./utilities\";\n\nexport class IconBuilder {\n  private _icons: {};\n\n  constructor() {\n    this._icons = {};\n  }\n\n  addIconAndGetReference(url: string, getShortNameAndStore: boolean, forRootIcon: boolean = false): string {\n    Utilities.assert(getShortNameAndStore || !forRootIcon, \"Root icon must have getShortNameAndStore to be true\");\n\n    // We either return the icon url or a short name which will be icon reference to an image in the package\n    if (!getShortNameAndStore) {\n      return url;\n    } else {\n      // if not download images, we need to preserve the root icon image file's folder path\n      let imageFile: string = decodeURIComponent(IconBuilder._getFolderPath(url));\n\n      if (!forRootIcon || Utilities._downloadImages) {\n        imageFile = decodeURIComponent(this._getLeafName(url).trim());\n        imageFile = imageFile.replace(Constants.InvalidCharacterInFileName, \"-\"); // replace characters invalid in file name with '-'\n        imageFile = this._getUniqueIconName(imageFile);\n      }\n\n      this._storeIcon(imageFile, url);\n      return imageFile;\n    }\n  }\n\n  private _storeIcon(iconName: string, url: string) {\n    this._icons[iconName] = url;\n  }\n\n  private static _getFolderPath(url: string): string {\n    try {\n      let realUrl: URL = new URL(url);\n      let path: string = realUrl.pathname;\n\n      if (!!path && path.charAt(0) == \"/\") {\n        path = path.substring(1);\n      }\n\n      if (!path) {\n        path = realUrl.hostname;\n      }\n\n      return path;\n    } catch (err) {\n      return url;\n    }\n  }\n\n  private _getLeafName(url: string): string {\n    let segments: string[] = url.split(\"/\");\n    Utilities.assert(segments.length > 2, \"valid url with segments\");\n\n    // If this is a url with a query string, then we strip off the query string and only keep the name\n    return segments[segments.length - 1].split(\"?\")[0];\n  }\n\n  private _getUniqueIconName(iconName: string): string {\n    // If this icon name isn't already taken then we just return it since it is unique\n    if (Utilities.isNullOrUndefined(this._icons[iconName])) {\n      return iconName;\n    } else {\n      for (var idx = 2; idx < 100; idx++) {\n        let suffix: string = \"\" + idx;\n\n        if (idx < 10) {\n          suffix = \"0\" + idx;\n        }\n\n        suffix = \"_\" + suffix;\n\n        if (Utilities.isNullOrUndefined(this._icons[iconName + suffix])) {\n          let fixedIconName: string = \"\";\n          let nameSegments: string[] = iconName.split(\".\");\n          if (nameSegments.length > 1) {\n            // We will assume that the last segment is the file type so we will put the number before that like\n            // \"foo\" + \"_4\" + \".\" + \"png\"  for foo_4.png etc.\n            fixedIconName =\n              iconName.substring(0, iconName.length - nameSegments[nameSegments.length - 1].length - 1) +\n              suffix +\n              \".\" +\n              nameSegments[nameSegments.length - 1];\n          }\n\n          // If we found a unique name then return it otherwise continue to try in the loop\n          if (Utilities.isNullOrUndefined(this._icons[fixedIconName])) {\n            return fixedIconName;\n          }\n        }\n      }\n\n      Utilities.logError(\"unable to find a non-conflicting icon name: \" + iconName);\n      Utilities.assert(false, \"unable to find a non-conflicting icon name: \" + iconName);\n      return null;\n    }\n  }\n\n  downloadAndStoreIcons(folderPath: string): Promise<void> {\n    return new Promise<void>(async (resolve, reject) => {\n      let promises = [];\n      for (var iconName in this._icons) {\n        if (Utilities._downloadImages) {\n          promises.push(this._downloadAndStoreIcon(iconName, folderPath));\n        } else {\n          Utilities.log(util.format(\"File download skipped for file: %s    url: %s\", iconName, this._icons[iconName]));\n        }\n      }\n\n      await Utilities.promiseAll(promises, resolve, reject, \"downloadAndStoreIcons: Failed\");\n    });\n  }\n\n  _downloadAndStoreIcon(iconName: string, folderPath: string): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      let iconUrl: string = this._icons[iconName];\n      let filePath: string = folderPath + \"/\" + iconName;\n      try {\n        const url = new URL(iconUrl);\n        let protocol = url.protocol == \"https:\" ? https : http;\n        protocol\n          .get(iconUrl, (res) => {\n            if (!res.headers[\"content-type\"] || res.headers[\"content-type\"].match(/image/)) {\n              const file = fs.createWriteStream(filePath);\n              res.pipe(file);\n\n              file.on(\"finish\", () => {\n                file.close();\n                Utilities.log(\"File downloaded: \", filePath + \", url: \" + iconUrl);\n              });\n              resolve();\n            } else {\n              this._createDefaultIconFile(\n                filePath,\n                \"Failed to get icon file \" + iconUrl + \" as image\",\n                resolve,\n                reject,\n              );\n            }\n          })\n          .on(\"error\", (err) => {\n            this._createDefaultIconFile(filePath, \"Failed to get icon file \" + iconUrl + \". \" + err, resolve, reject);\n          });\n      } catch (ex) {\n        this._createDefaultIconFile(\n          filePath,\n          \"Failed to get icon file \" + iconUrl + \". Exception: \" + ex,\n          resolve,\n          reject,\n        );\n      }\n    });\n  }\n\n  _createDefaultIconFile(filePath: string, message: string, resolve, reject): void {\n    Utilities.logError(message + \". Default icon will be used.\");\n    let defaultIconEncoded_32x32 =\n      \"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsIAAA7CARUoSoAAAAQ9SURBVFhHxVdfaFtVHP7uTdLaP2tdK7apBQNLU7SadtC1diyzuFXmgw8qY/qmDwrTPe5JQRF8EcSXISgTN6E+bEPFbaLYdesEpX90dEy7VZydoA2USWM7upE09/j7/e65aZrcJPcGYV/zu/fc73fO+b5z7jknjaEIuIsw9f2uoeoZuHxlGqtnnoKiv6anv0XvowM64w9VzcA6Rer0Xuza14vEvj6kvtpLNqpDVQYujL6Jx3d3Qd2m8a9ZVI7i3OhbOusPvg3cug00Jd8Hau8FLMsmqdyUfE9yfuHbwMRnL2JwdxwqTS/CMIRTGQuDu+KUe0me/cCXgeTiCmLpz2nk99CTLb6BOsTunMLS0qp+9gZfBqZGn0NsRx9UVk+9A9pIKrOO2EAffjz+jCa9wbOBa7/OYeiBWSATtAla9ryBZRPzhV8H5YY6ZjE/N2fX8QDPBq6e2Y+2WA+Uxar0IT0zHILZHrS3IHOUa+vqwdXT+6WNF3gyMHPxLJ58eA1Ib7x3sz0Eo+scjNg4zI5azRIywEj3LVz64awmysOTgdT3r6ChPUIzLWN1B3vjtUDroyEcwT/jL9t8BVQ0MPHFEezZ2UIj0+Ly4gsWIUN4ClkLCnuGtuLil0d0sjTKGqDZRGDhDZiN90vfOZHCLSg83Z1zgcpm430wr78ufZRDWQNjRw8jMdgtB01OXIuUh0UHlUKiP4rxY4c1546SBpZXgPDah0Bwi29xmQ2OUBPaUh9guczZVNLA1LED2P5YL9S6Hn2+OBeZK4IjThXow223D8Qx/ckBO+0CVwMLfy4huuUb6o+2F3/hFI7cTdwgLk88B1WDbfVf4wb16QZXA5dOPIvoI3Tk0vHqKl6kX0Kc1wLtiGhPHLOn3I/oIgNXJmcw/OB12gKUchUvUtfiFAXisLSh9QASHb/hl6kZO5WHIgPJ8RfQGonZR24+HHGvC9ERJ3Bf3Ofi2PM2kYdNBia/O4FEHxUyBSKu4iTiis3iNqgtHQiJeBaTYyc1ZyNnIEux+vMh1LV2khY1cOAmbliwFjNQ809IWMm0TpQQp+Au6lo6sTp9ULQc5AxMnHwXI4NhWTQ5uImzSF4VG1yntLiQ3Iz6HtnRJloOxMAdqtP8xztAfauQgnLitNrNcA2M7vMS/LVcSTyXq29B8+9viyZDDJw/+ir6Ew/ZRy6jgngRijipSFEgThxr9O+MkeZrwpg3V7KIZD+lSg1CVBTXNL93NT8MdW04bw0wSotLSKoRkfTHuLliwbhw/JAa7v6JnNVQkitQVBC3QYcMTztBrnKRivaDqzgROm0E05hYGIIZqE3RPBgwAiaRFKGAfQ/ynXm+U4R0XoJ4MwCTOI7NOapr6jL36fTL/ThlCpgKgdAyjOTfKXX5o23o3PovGdT/cArYsS5uQileQ49wA7pyXhuDftz9tdyM3oM3qv9x+v8A+A89FNxU0V8XUQAAAABJRU5ErkJggg==\";\n    let defaultIconDecoded = Buffer.from(defaultIconEncoded_32x32, \"base64\");\n    try {\n      fs.writeFileSync(filePath, defaultIconDecoded, \"binary\");\n      resolve();\n    } catch (err) {\n      Utilities.logError(\"Failed to create default icon file \" + filePath + \". Error is: \" + err);\n      reject();\n    }\n  }\n}\n"]}