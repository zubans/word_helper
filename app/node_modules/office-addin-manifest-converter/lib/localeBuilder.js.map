{"version":3,"file":"localeBuilder.js","sourceRoot":"","sources":["../src/localeBuilder.ts"],"names":[],"mappings":";;;AAAA,6CAA0C;AAC1C,2CAAwC;AAExC,MAAa,aAAa;IAGxB;QACE,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;IACrB,CAAC;IAED,eAAe,CAAC,MAAc,EAAE,GAAW,EAAE,KAAa;QACxD,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,WAAW,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IACrD,CAAC;IAED,sBAAsB,CAAC,MAAc;QACnC,MAAM,GAAG,aAAa,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;QAC/C,qBAAS,CAAC,MAAM,CACd,CAAC,qBAAS,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,EACnD,iDAAiD,GAAG,MAAM,CAC3D,CAAC;QACF,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,YAAY,EAAE,CAAC;IACnD,CAAC;IAED,UAAU;QACR,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACpC,CAAC;IAEO,aAAa,CAAC,MAAc;QAElC,MAAM,GAAG,aAAa,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;QAC/C,IAAI,UAAU,GAAe,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAEnD,IAAI,qBAAS,CAAC,iBAAiB,CAAC,UAAU,CAAC,EAAE,CAAC;YAC5C,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,IAAI,uBAAU,EAAE,CAAC;QACxD,CAAC;QAED,OAAO,UAAU,CAAC;IACpB,CAAC;IAED,MAAM,CAAC,eAAe,CAAC,MAAc;QACnC,IAAI,CAAC,qBAAS,CAAC,iBAAiB,CAAC,MAAM,CAAC,EAAE,CAAC;YACzC,OAAO,MAAM,CAAC,WAAW,EAAE,CAAC;QAC9B,CAAC;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;CACF;AA3CD,sCA2CC","sourcesContent":["import { LocaleFile } from \"./localeFile\";\nimport { Utilities } from \"./utilities\";\n\nexport class LocaleBuilder {\n  _locales: any;\n\n  constructor() {\n    this._locales = {};\n  }\n\n  addLocaleString(locale: string, key: string, value: string): void {\n    this.getLocaleFile(locale).addResource(key, value);\n  }\n\n  getLocaleFileResources(locale: string): object {\n    locale = LocaleBuilder.fixLocaleCasing(locale);\n    Utilities.assert(\n      !Utilities.isNullOrUndefined(this._locales[locale]),\n      \"requested locale should exist in the manifest: \" + locale,\n    );\n    return this.getLocaleFile(locale).getResources();\n  }\n\n  getLocales(): Array<string> {\n    return Object.keys(this._locales);\n  }\n\n  private getLocaleFile(locale: string): LocaleFile {\n    // Locales are case insensisive so we make sure that we store them that way\n    locale = LocaleBuilder.fixLocaleCasing(locale);\n    let localeFile: LocaleFile = this._locales[locale];\n\n    if (Utilities.isNullOrUndefined(localeFile)) {\n      localeFile = this._locales[locale] = new LocaleFile();\n    }\n\n    return localeFile;\n  }\n\n  static fixLocaleCasing(locale: string): string {\n    if (!Utilities.isNullOrUndefined(locale)) {\n      return locale.toLowerCase();\n    }\n\n    return locale;\n  }\n}\n"]}