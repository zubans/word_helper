{"version":3,"file":"index.esm5.js","sources":["../src/interfaces.ts","../src/specParserError.ts","../src/constants.ts","../src/utils.ts","../src/validators/validator.ts","../src/validators/copilotValidator.ts","../src/validators/smeValidator.ts","../src/validators/teamsAIValidator.ts","../src/validators/validatorFactory.ts","../src/specParser.browser.ts","../src/jsonDataGenerator.ts","../src/adaptiveCardGenerator.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\"use strict\";\n\nimport { IParameter } from \"@microsoft/teams-manifest\";\nimport { OpenAPIV3 } from \"openapi-types\";\n\n/**\n * An interface that represents the result of validating an OpenAPI specification file.\n */\nexport interface ValidateResult {\n  /**\n   * The validation status of the OpenAPI specification file.\n   */\n  status: ValidationStatus;\n\n  /**\n   * An array of warning results generated during validation.\n   */\n  warnings: WarningResult[];\n\n  /**\n   * An array of error results generated during validation.\n   */\n  errors: ErrorResult[];\n\n  specHash?: string;\n}\n\nexport interface SpecValidationResult {\n  /**\n   * An array of warning results generated during validation.\n   */\n  warnings: WarningResult[];\n\n  /**\n   * An array of error results generated during validation.\n   */\n  errors: ErrorResult[];\n}\n\n/**\n * An interface that represents a warning result generated during validation.\n */\nexport interface WarningResult {\n  /**\n   * The type of warning.\n   */\n  type: WarningType;\n\n  /**\n   * The content of the warning.\n   */\n  content: string;\n\n  /**\n   * data of the warning.\n   */\n  data?: any;\n}\n\n/**\n * An interface that represents an error result generated during validation.\n */\nexport interface ErrorResult {\n  /**\n   * The type of error.\n   */\n  type: ErrorType;\n\n  /**\n   * The content of the error.\n   */\n  content: string;\n\n  /**\n   * data of the error.\n   */\n  data?: any;\n}\n\nexport interface GenerateResult {\n  allSuccess: boolean;\n  warnings: WarningResult[];\n}\n\n/**\n * An enum that represents the types of errors that can occur during validation.\n */\nexport enum ErrorType {\n  SpecNotValid = \"spec-not-valid\",\n  RemoteRefNotSupported = \"remote-ref-not-supported\",\n  NoServerInformation = \"no-server-information\",\n  UrlProtocolNotSupported = \"url-protocol-not-supported\",\n  RelativeServerUrlNotSupported = \"relative-server-url-not-supported\",\n  NoSupportedApi = \"no-supported-api\",\n  NoExtraAPICanBeAdded = \"no-extra-api-can-be-added\",\n  AddedAPINotInOriginalSpec = \"added-api-not-in-original-spec\",\n  ResolveServerUrlFailed = \"resolve-server-url-failed\",\n  SwaggerNotSupported = \"swagger-not-supported\",\n  MultipleAuthNotSupported = \"multiple-auth-not-supported\",\n  SpecVersionNotSupported = \"spec-version-not-supported\",\n  CircularReferenceNotSupported = \"circular-reference-not-supported\",\n\n  ListFailed = \"list-failed\",\n  listSupportedAPIInfoFailed = \"list-supported-api-info-failed\",\n  FilterSpecFailed = \"filter-spec-failed\",\n  UpdateManifestFailed = \"update-manifest-failed\",\n  GenerateAdaptiveCardFailed = \"generate-adaptive-card-failed\",\n  GenerateFailed = \"generate-failed\",\n  ValidateFailed = \"validate-failed\",\n  GetSpecFailed = \"get-spec-failed\",\n\n  AuthTypeIsNotSupported = \"auth-type-is-not-supported\",\n  MissingOperationId = \"missing-operation-id\",\n  PostBodyContainMultipleMediaTypes = \"post-body-contain-multiple-media-types\",\n  ResponseContainMultipleMediaTypes = \"response-contain-multiple-media-types\",\n  ResponseJsonIsEmpty = \"response-json-is-empty\",\n  PostBodyContainsRequiredUnsupportedSchema = \"post-body-contains-required-unsupported-schema\",\n  ParamsContainRequiredUnsupportedSchema = \"params-contain-required-unsupported-schema\",\n  ExceededRequiredParamsLimit = \"exceeded-required-params-limit\",\n  NoParameter = \"no-parameter\",\n  NoAPIInfo = \"no-api-info\",\n  MethodNotAllowed = \"method-not-allowed\",\n  UrlPathNotExist = \"url-path-not-exist\",\n\n  Cancelled = \"cancelled\",\n  Unknown = \"unknown\",\n\n  AddAuthFailed = \"add-auth-failed\",\n}\n\n/**\n * An enum that represents the types of warnings that can occur during validation.\n */\nexport enum WarningType {\n  OperationIdMissing = \"operationid-missing\",\n  GenerateCardFailed = \"generate-card-failed\",\n  OperationOnlyContainsOptionalParam = \"operation-only-contains-optional-param\",\n  ConvertSwaggerToOpenAPI = \"convert-swagger-to-openapi\",\n  FuncDescriptionTooLong = \"function-description-too-long\",\n  OperationIdContainsSpecialCharacters = \"operationid-contains-special-characters\",\n  UnsupportedAuthType = \"unsupported-auth-type\",\n  GenerateJsonDataFailed = \"generate-json-data-failed\",\n  Unknown = \"unknown\",\n}\n\n/**\n * An enum that represents the validation status of an OpenAPI specification file.\n */\nexport enum ValidationStatus {\n  Valid,\n  Warning, // If there are any warnings, the file is still valid\n  Error, // If there are any errors, the file is not valid\n}\n\nexport interface TextBlockElement {\n  type: string;\n  text: string;\n  wrap: boolean;\n}\n\nexport interface ImageElement {\n  type: string;\n  url: string;\n  $when: string;\n}\n\nexport type AdaptiveCardBody = Array<TextBlockElement | ImageElement | ArrayElement>;\n\nexport interface ArrayElement {\n  type: string;\n  $data: string;\n  items: AdaptiveCardBody;\n}\n\nexport interface AdaptiveCard {\n  type: string;\n  $schema: string;\n  version: string;\n  body: AdaptiveCardBody;\n}\n\nexport interface PreviewCardTemplate {\n  title: string;\n  subtitle?: string;\n  image?: {\n    url: string;\n    alt?: string;\n    $when?: string;\n  };\n}\n\nexport interface WrappedAdaptiveCard {\n  version: string;\n  $schema?: string;\n  jsonPath?: string;\n  responseLayout: string;\n  responseCardTemplate: AdaptiveCard;\n  previewCardTemplate: PreviewCardTemplate;\n}\n\nexport interface CheckParamResult {\n  requiredNum: number;\n  optionalNum: number;\n  isValid: boolean;\n  reason: ErrorType[];\n}\n\nexport interface ParseOptions {\n  /**\n   * If true, the parser will not throw an error if an ID is missing the spec file.\n   */\n  allowMissingId?: boolean;\n\n  /**\n   * If true, the parser will allow parsing of Swagger specifications.\n   */\n  allowSwagger?: boolean;\n\n  /**\n   * If true, the parser will allow API Key authentication in the spec file.\n   */\n  allowAPIKeyAuth?: boolean;\n\n  /**\n   * If true, the parser will allow Bearer Token authentication in the spec file.\n   */\n  allowBearerTokenAuth?: boolean;\n\n  /**\n   * If true, the parser will allow multiple parameters in the spec file. Teams AI project would ignore this parameters and always true\n   */\n  allowMultipleParameters?: boolean;\n\n  /**\n   * If true, the parser will allow OAuth2 authentication in the spec file. Currently only support OAuth2 with auth code flow.\n   */\n  allowOauth2?: boolean;\n\n  /**\n   * An array of HTTP methods that the parser will allow in the spec file.\n   */\n  allowMethods?: string[];\n\n  /**\n   * If true, the parser will allow conversation starters in plugin file. Only take effect in Copilot project\n   */\n  allowConversationStarters?: boolean;\n\n  /**\n   * If true, the parser will allow response semantics in plugin file. Only take effect in Copilot project\n   */\n  allowResponseSemantics?: boolean;\n\n  /**\n   * If true, the paser will allow confirmation in plugin file. Only take effect in Copilot project\n   */\n  allowConfirmation?: boolean;\n\n  /**\n   * The type of project that the parser is being used for.\n   * Project can be SME/Copilot/TeamsAi\n   */\n  projectType?: ProjectType;\n\n  /**\n   * If true, we will generate files of plugin for GPT (Declarative Extensions in a Copilot Extension). Otherwise, we will generate files of plugin for Copilot.\n   */\n  isGptPlugin?: boolean;\n}\n\nexport enum ProjectType {\n  Copilot,\n  SME,\n  TeamsAi,\n}\n\nexport enum AdaptiveCardUpdateStrategy {\n  CreateNew, // Add a new adaptive card with a new name\n  KeepExisting, // Do nothing with the existing adaptive card\n}\n\nexport interface APIInfo {\n  method: string;\n  path: string;\n  title: string;\n  id: string;\n  parameters: IParameter[];\n  description: string;\n  warning?: WarningResult;\n}\n\nexport interface ListAPIInfo {\n  api: string;\n  server: string;\n  operationId: string;\n  isValid: boolean;\n  reason: ErrorType[];\n  auth?: AuthInfo;\n  summary?: string;\n  description?: string;\n}\n\nexport interface APIMap {\n  [key: string]: {\n    operation: OpenAPIV3.OperationObject;\n    isValid: boolean;\n    reason: ErrorType[];\n  };\n}\n\nexport interface APIValidationResult {\n  isValid: boolean;\n  reason: ErrorType[];\n}\n\nexport interface ListAPIResult {\n  allAPICount: number;\n  validAPICount: number;\n  APIs: ListAPIInfo[];\n}\n\nexport type AuthType = OpenAPIV3.SecuritySchemeObject | { type: \"multipleAuth\" };\n\nexport interface AuthInfo {\n  authScheme: AuthType;\n  name: string;\n}\n\nexport interface InvalidAPIInfo {\n  api: string;\n  reason: ErrorType[];\n}\n\nexport interface InferredProperties {\n  title?: string;\n  subtitle?: string;\n  imageUrl?: string;\n}\n\nexport interface ExistingPluginManifestInfo {\n  manifestPath: string;\n  specPath: string;\n}\n\nexport interface OperationAuthInfoMap {\n  [operationId: string]: AuthInfo;\n}\n\nexport interface FunctionClassificationMap {\n  [authType: string]: {\n    functionNames: string[];\n    authName: string;\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\"use strict\";\n\nimport { ErrorType } from \"./interfaces\";\n\nexport class SpecParserError extends Error {\n  public readonly errorType: ErrorType;\n\n  constructor(message: string, errorType: ErrorType) {\n    super(message);\n    this.errorType = errorType;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\"use strict\";\n\nexport class ConstantString {\n  static readonly CancelledMessage = \"Operation is cancelled.\";\n  static readonly NoServerInformation =\n    \"No server information is found in the OpenAPI description document.\";\n  static readonly RemoteRefNotSupported = \"Remote reference is not supported: %s.\";\n  static readonly MissingOperationId = \"Missing operationIds: %s.\";\n  static readonly NoSupportedApi =\n    \"No supported API is found in the OpenAPI description document: only GET and POST methods are supported, additionally, there can be at most one required parameter, and no auth is allowed.\";\n\n  static readonly AdditionalPropertiesNotSupported =\n    \"'additionalProperties' is not supported, and will be ignored.\";\n  static readonly SchemaNotSupported =\n    \"'oneOf', 'allOf', 'anyOf', and 'not' schema are not supported: %s.\";\n  static readonly UnknownSchema = \"Unknown schema: %s.\";\n\n  static readonly UrlProtocolNotSupported =\n    \"Server url is not correct: protocol %s is not supported, you should use https protocol instead.\";\n  static readonly RelativeServerUrlNotSupported =\n    \"Server url is not correct: relative server url is not supported.\";\n  static readonly ResolveServerUrlFailed =\n    \"Unable to resolve the server URL: please make sure that the environment variable %s is defined.\";\n  static readonly OperationOnlyContainsOptionalParam =\n    \"Operation %s contains multiple optional parameters. The first optional parameter is used for this command.\";\n  static readonly ConvertSwaggerToOpenAPI =\n    \"The Swagger 2.0 file has been converted to OpenAPI 3.0.\";\n\n  static readonly SwaggerNotSupported =\n    \"Swagger 2.0 is not supported. Please convert to OpenAPI 3.0 manually before proceeding.\";\n\n  static readonly SpecVersionNotSupported =\n    \"Unsupported OpenAPI version %s. Please use version 3.0.x.\";\n\n  static readonly MultipleAuthNotSupported =\n    \"Multiple authentication methods are unsupported. Ensure all selected APIs use identical authentication.\";\n\n  static readonly OperationIdContainsSpecialCharacters =\n    \"Operation id '%s' in OpenAPI description document contained special characters and was renamed to '%s'.\";\n\n  static readonly AuthTypeIsNotSupported =\n    \"Unsupported authorization type in API '%s'. No authorization will be used.\";\n\n  static readonly UnsupportedSchema = \"Unsupported schema in %s %s: %s\";\n  static readonly FuncDescriptionTooLong =\n    \"The description of the function '%s' is too long. The current length is %s characters, while the maximum allowed length is %s characters.\";\n\n  static readonly GenerateJsonDataFailed = \"Failed to generate JSON data for api: %s due to %s.\";\n\n  static readonly WrappedCardVersion = \"1.0\";\n  static readonly WrappedCardSchema =\n    \"https://developer.microsoft.com/json-schemas/teams/v1.19/MicrosoftTeams.ResponseRenderingTemplate.schema.json\";\n  static readonly WrappedCardResponseLayout = \"list\";\n\n  static readonly GetMethod = \"get\";\n  static readonly PostMethod = \"post\";\n  static readonly AdaptiveCardVersion = \"1.5\";\n  static readonly AdaptiveCardSchema = \"https://adaptivecards.io/schemas/adaptive-card.json\";\n  static readonly AdaptiveCardType = \"AdaptiveCard\";\n  static readonly TextBlockType = \"TextBlock\";\n  static readonly ImageType = \"Image\";\n  static readonly ContainerType = \"Container\";\n  static readonly RegistrationIdPostfix = \"REGISTRATION_ID\";\n  static readonly ResponseCodeFor20X = [\n    \"200\",\n    \"201\",\n    \"202\",\n    \"203\",\n    \"204\",\n    \"205\",\n    \"206\",\n    \"207\",\n    \"208\",\n    \"226\",\n    \"2XX\",\n    \"default\",\n  ];\n  static readonly AllOperationMethods = [\n    \"get\",\n    \"post\",\n    \"put\",\n    \"delete\",\n    \"patch\",\n    \"head\",\n    \"options\",\n    \"trace\",\n  ];\n\n  // TODO: update after investigating the usage of these constants.\n  static readonly WellknownResultNames = [\n    \"result\",\n    \"data\",\n    \"items\",\n    \"root\",\n    \"matches\",\n    \"queries\",\n    \"list\",\n    \"output\",\n  ];\n  static readonly WellknownTitleName = [\"title\", \"name\", \"summary\", \"caption\", \"subject\", \"label\"];\n  static readonly WellknownSubtitleName = [\n    \"subtitle\",\n    \"id\",\n    \"uid\",\n    \"description\",\n    \"desc\",\n    \"detail\",\n  ];\n  static readonly WellknownImageName = [\n    \"image\",\n    \"icon\",\n    \"avatar\",\n    \"picture\",\n    \"photo\",\n    \"logo\",\n    \"pic\",\n    \"thumbnail\",\n    \"img\",\n  ];\n\n  static readonly ShortDescriptionMaxLens = 80;\n  static readonly FullDescriptionMaxLens = 4000;\n  static readonly CommandDescriptionMaxLens = 128;\n  static readonly ParameterDescriptionMaxLens = 128;\n  static readonly ConversationStarterMaxLens = 50;\n  static readonly CommandTitleMaxLens = 32;\n  static readonly ParameterTitleMaxLens = 32;\n  static readonly SMERequiredParamsMaxNum = 5;\n  static readonly FunctionDescriptionMaxLens = 100;\n  static readonly DefaultPluginId = \"plugin_1\";\n  static readonly PluginManifestSchema =\n    \"https://developer.microsoft.com/json-schemas/copilot/plugin/v2.2/schema.json\";\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\"use strict\";\n\nimport { OpenAPIV3 } from \"openapi-types\";\nimport { ConstantString } from \"./constants\";\nimport {\n  AdaptiveCardBody,\n  ArrayElement,\n  AuthInfo,\n  AuthType,\n  ErrorResult,\n  ErrorType,\n  OperationAuthInfoMap,\n  ParseOptions,\n  ProjectType,\n} from \"./interfaces\";\nimport { IMessagingExtensionCommand, IParameter } from \"@microsoft/teams-manifest\";\nimport { SpecParserError } from \"./specParserError\";\n\nexport class Utils {\n  static isObjectSchema(schema: OpenAPIV3.SchemaObject): boolean {\n    return schema.type === \"object\" || (!schema.type && !!schema.properties);\n  }\n\n  static containMultipleMediaTypes(\n    bodyObject: OpenAPIV3.RequestBodyObject | OpenAPIV3.ResponseObject\n  ): boolean {\n    return Object.keys(bodyObject?.content || {}).length > 1;\n  }\n\n  static isBearerTokenAuth(authScheme: AuthType): boolean {\n    return authScheme.type === \"http\" && authScheme.scheme === \"bearer\";\n  }\n\n  static isAPIKeyAuth(authScheme: AuthType): boolean {\n    return authScheme.type === \"apiKey\";\n  }\n\n  static isAPIKeyAuthButNotInCookie(authScheme: AuthType): boolean {\n    return authScheme.type === \"apiKey\" && authScheme.in !== \"cookie\";\n  }\n\n  static isOAuthWithAuthCodeFlow(authScheme: AuthType): boolean {\n    return !!(\n      authScheme.type === \"oauth2\" &&\n      authScheme.flows &&\n      authScheme.flows.authorizationCode\n    );\n  }\n\n  static isNotSupportedAuth(authSchemeArray: AuthInfo[][]): boolean {\n    if (authSchemeArray.length === 0) {\n      return false;\n    }\n\n    if (authSchemeArray.length > 0 && authSchemeArray.every((auths) => auths.length > 1)) {\n      return true;\n    }\n\n    for (const auths of authSchemeArray) {\n      if (auths.length === 1) {\n        if (\n          Utils.isOAuthWithAuthCodeFlow(auths[0].authScheme) ||\n          Utils.isBearerTokenAuth(auths[0].authScheme) ||\n          Utils.isAPIKeyAuthButNotInCookie(auths[0].authScheme)\n        ) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  static getAuthArray(\n    securities: OpenAPIV3.SecurityRequirementObject[] | undefined,\n    spec: OpenAPIV3.Document\n  ): AuthInfo[][] {\n    const result: AuthInfo[][] = [];\n    const securitySchemas = spec.components?.securitySchemes;\n    const securitiesArr = securities ?? spec.security;\n    if (securitiesArr && securitySchemas) {\n      for (let i = 0; i < securitiesArr.length; i++) {\n        const security = securitiesArr[i];\n\n        const authArray: AuthInfo[] = [];\n        for (const name in security) {\n          const auth = securitySchemas[name] as OpenAPIV3.SecuritySchemeObject;\n          authArray.push({\n            authScheme: auth,\n            name: name,\n          });\n        }\n\n        if (authArray.length > 0) {\n          result.push(authArray);\n        }\n      }\n    }\n\n    result.sort((a, b) => a[0].name.localeCompare(b[0].name));\n\n    return result;\n  }\n\n  static getAuthMap(spec: OpenAPIV3.Document): OperationAuthInfoMap {\n    const authMap: OperationAuthInfoMap = {};\n\n    for (const url in spec.paths) {\n      for (const method in spec.paths[url]) {\n        const operation = (spec.paths[url] as any)[method] as OpenAPIV3.OperationObject;\n\n        const authArray = Utils.getAuthArray(operation.security, spec);\n\n        if (authArray && authArray.length > 0) {\n          const currentAuth = authArray[0][0];\n          authMap[operation.operationId!] = currentAuth;\n        }\n      }\n    }\n\n    return authMap;\n  }\n\n  static getAuthInfo(spec: OpenAPIV3.Document): AuthInfo | undefined {\n    let authInfo: AuthInfo | undefined = undefined;\n\n    for (const url in spec.paths) {\n      for (const method in spec.paths[url]) {\n        const operation = (spec.paths[url] as any)[method] as OpenAPIV3.OperationObject;\n\n        const authArray = Utils.getAuthArray(operation.security, spec);\n\n        if (authArray && authArray.length > 0) {\n          const currentAuth = authArray[0][0];\n          if (!authInfo) {\n            authInfo = authArray[0][0];\n          } else if (authInfo.name !== currentAuth.name) {\n            throw new SpecParserError(\n              ConstantString.MultipleAuthNotSupported,\n              ErrorType.MultipleAuthNotSupported\n            );\n          }\n        }\n      }\n    }\n\n    return authInfo;\n  }\n\n  static updateFirstLetter(str: string): string {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  }\n\n  static getResponseJson(\n    operationObject: OpenAPIV3.OperationObject | undefined,\n    allowMultipleMediaType = false\n  ): {\n    json: OpenAPIV3.MediaTypeObject;\n    multipleMediaType: boolean;\n  } {\n    let json: OpenAPIV3.MediaTypeObject = {};\n    let multipleMediaType = false;\n\n    for (const code of ConstantString.ResponseCodeFor20X) {\n      const responseObject = operationObject?.responses?.[code] as OpenAPIV3.ResponseObject;\n      if (!responseObject) {\n        continue;\n      }\n      multipleMediaType = Utils.containMultipleMediaTypes(responseObject);\n      if (!allowMultipleMediaType && multipleMediaType) {\n        json = {};\n        continue;\n      }\n      const mediaObj = Utils.getJsonContentType(responseObject);\n      if (Object.keys(mediaObj).length > 0) {\n        json = mediaObj;\n        return { json, multipleMediaType };\n      }\n    }\n\n    return { json, multipleMediaType };\n  }\n\n  static getJsonContentType(\n    responseObject: OpenAPIV3.ResponseObject | OpenAPIV3.RequestBodyObject\n  ): OpenAPIV3.MediaTypeObject {\n    if (responseObject.content) {\n      for (const contentType of Object.keys(responseObject.content)) {\n        // json media type can also be \"application/json; charset=utf-8\"\n        if (contentType.indexOf(\"application/json\") >= 0) {\n          return responseObject.content[contentType];\n        }\n      }\n    }\n    return {};\n  }\n\n  static convertPathToCamelCase(path: string): string {\n    const pathSegments = path.split(/[./{]/);\n    const camelCaseSegments = pathSegments.map((segment) => {\n      segment = segment.replace(/}/g, \"\");\n      return segment.charAt(0).toUpperCase() + segment.slice(1);\n    });\n    const camelCasePath = camelCaseSegments.join(\"\");\n    return camelCasePath;\n  }\n\n  static getUrlProtocol(urlString: string): string | undefined {\n    try {\n      const url = new URL(urlString);\n      return url.protocol;\n    } catch (err) {\n      return undefined;\n    }\n  }\n\n  static resolveEnv(str: string): string {\n    const placeHolderReg = /\\${{\\s*([a-zA-Z_][a-zA-Z0-9_]*)\\s*}}/g;\n    let matches = placeHolderReg.exec(str);\n    let newStr = str;\n    while (matches != null) {\n      const envVar = matches[1];\n      const envVal = process.env[envVar];\n      if (!envVal) {\n        throw new Error(Utils.format(ConstantString.ResolveServerUrlFailed, envVar));\n      } else {\n        newStr = newStr.replace(matches[0], envVal);\n      }\n      matches = placeHolderReg.exec(str);\n    }\n    return newStr;\n  }\n\n  static checkServerUrl(servers: OpenAPIV3.ServerObject[], allowHttp = false): ErrorResult[] {\n    const errors: ErrorResult[] = [];\n\n    let serverUrl;\n    try {\n      serverUrl = Utils.resolveEnv(servers[0].url);\n    } catch (err) {\n      errors.push({\n        type: ErrorType.ResolveServerUrlFailed,\n        content: (err as Error).message,\n        data: servers,\n      });\n      return errors;\n    }\n\n    const protocol = Utils.getUrlProtocol(serverUrl);\n    if (!protocol) {\n      // Relative server url is not supported\n      errors.push({\n        type: ErrorType.RelativeServerUrlNotSupported,\n        content: ConstantString.RelativeServerUrlNotSupported,\n        data: servers,\n      });\n    } else if (protocol !== \"https:\" && !(protocol === \"http:\" && allowHttp)) {\n      const protocolString = protocol.slice(0, -1);\n      errors.push({\n        type: ErrorType.UrlProtocolNotSupported,\n        content: Utils.format(ConstantString.UrlProtocolNotSupported, protocol.slice(0, -1)),\n        data: protocolString,\n      });\n    }\n\n    return errors;\n  }\n\n  static validateServer(spec: OpenAPIV3.Document, options: ParseOptions): ErrorResult[] {\n    const errors: ErrorResult[] = [];\n\n    let hasTopLevelServers = false;\n    let hasPathLevelServers = false;\n    let hasOperationLevelServers = false;\n\n    const allowHttp = options.projectType === ProjectType.Copilot;\n\n    if (spec.servers && spec.servers.length >= 1) {\n      hasTopLevelServers = true;\n\n      // for multiple server, we only use the first url\n      const serverErrors = Utils.checkServerUrl(spec.servers, allowHttp);\n      errors.push(...serverErrors);\n    }\n\n    const paths = spec.paths;\n    for (const path in paths) {\n      const methods = paths[path];\n\n      if (methods?.servers && methods.servers.length >= 1) {\n        hasPathLevelServers = true;\n        const serverErrors = Utils.checkServerUrl(methods.servers, allowHttp);\n\n        errors.push(...serverErrors);\n      }\n\n      for (const method in methods) {\n        const operationObject = (methods as any)[method] as OpenAPIV3.OperationObject;\n        if (options.allowMethods?.includes(method) && operationObject) {\n          if (operationObject?.servers && operationObject.servers.length >= 1) {\n            hasOperationLevelServers = true;\n            const serverErrors = Utils.checkServerUrl(operationObject.servers, allowHttp);\n            errors.push(...serverErrors);\n          }\n        }\n      }\n    }\n\n    if (!hasTopLevelServers && !hasPathLevelServers && !hasOperationLevelServers) {\n      errors.push({\n        type: ErrorType.NoServerInformation,\n        content: ConstantString.NoServerInformation,\n      });\n    }\n\n    return errors;\n  }\n\n  static isWellKnownName(name: string, wellknownNameList: string[]): boolean {\n    for (let i = 0; i < wellknownNameList.length; i++) {\n      name = name.replace(/_/g, \"\").replace(/-/g, \"\");\n      if (name.toLowerCase().includes(wellknownNameList[i])) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  static generateParametersFromSchema(\n    schema: OpenAPIV3.SchemaObject,\n    name: string,\n    allowMultipleParameters: boolean,\n    isRequired = false\n  ): [IParameter[], IParameter[]] {\n    const requiredParams: IParameter[] = [];\n    const optionalParams: IParameter[] = [];\n\n    if (\n      schema.type === \"string\" ||\n      schema.type === \"integer\" ||\n      schema.type === \"boolean\" ||\n      schema.type === \"number\"\n    ) {\n      const parameter: IParameter = {\n        name: name,\n        title: Utils.updateFirstLetter(name).slice(0, ConstantString.ParameterTitleMaxLens),\n        description: (schema.description ?? \"\").slice(\n          0,\n          ConstantString.ParameterDescriptionMaxLens\n        ),\n      };\n\n      if (allowMultipleParameters) {\n        Utils.updateParameterWithInputType(schema, parameter);\n      }\n\n      if (isRequired && schema.default === undefined) {\n        parameter.isRequired = true;\n        requiredParams.push(parameter);\n      } else {\n        optionalParams.push(parameter);\n      }\n    } else if (Utils.isObjectSchema(schema)) {\n      const { properties } = schema;\n      for (const property in properties) {\n        let isRequired = false;\n        if (schema.required && schema.required?.indexOf(property) >= 0) {\n          isRequired = true;\n        }\n        const [requiredP, optionalP] = Utils.generateParametersFromSchema(\n          properties[property] as OpenAPIV3.SchemaObject,\n          property,\n          allowMultipleParameters,\n          isRequired\n        );\n\n        requiredParams.push(...requiredP);\n        optionalParams.push(...optionalP);\n      }\n    }\n\n    return [requiredParams, optionalParams];\n  }\n\n  static updateParameterWithInputType(schema: OpenAPIV3.SchemaObject, param: IParameter): void {\n    if (schema.enum) {\n      param.inputType = \"choiceset\";\n      param.choices = [];\n      for (let i = 0; i < schema.enum.length; i++) {\n        param.choices.push({\n          title: schema.enum[i],\n          value: schema.enum[i],\n        });\n      }\n    } else if (schema.type === \"string\") {\n      param.inputType = \"text\";\n    } else if (schema.type === \"integer\" || schema.type === \"number\") {\n      param.inputType = \"number\";\n    } else if (schema.type === \"boolean\") {\n      param.inputType = \"toggle\";\n    }\n\n    if (schema.default) {\n      param.value = schema.default;\n    }\n  }\n\n  static parseApiInfo(\n    operationItem: OpenAPIV3.OperationObject,\n    options: ParseOptions\n  ): IMessagingExtensionCommand {\n    const requiredParams: IParameter[] = [];\n    const optionalParams: IParameter[] = [];\n    const paramObject = operationItem.parameters as OpenAPIV3.ParameterObject[];\n\n    if (paramObject) {\n      paramObject.forEach((param: OpenAPIV3.ParameterObject) => {\n        const parameter: IParameter = {\n          name: param.name,\n          title: Utils.updateFirstLetter(param.name).slice(0, ConstantString.ParameterTitleMaxLens),\n          description: (param.description ?? \"\").slice(\n            0,\n            ConstantString.ParameterDescriptionMaxLens\n          ),\n        };\n\n        const schema = param.schema as OpenAPIV3.SchemaObject;\n        if (options.allowMultipleParameters && schema) {\n          Utils.updateParameterWithInputType(schema, parameter);\n        }\n\n        if (param.in !== \"header\" && param.in !== \"cookie\") {\n          if (param.required && schema?.default === undefined) {\n            parameter.isRequired = true;\n            requiredParams.push(parameter);\n          } else {\n            optionalParams.push(parameter);\n          }\n        }\n      });\n    }\n\n    if (operationItem.requestBody) {\n      const requestBody = operationItem.requestBody as OpenAPIV3.RequestBodyObject;\n      const requestJson = requestBody.content[\"application/json\"];\n      if (Object.keys(requestJson).length !== 0) {\n        const schema = requestJson.schema as OpenAPIV3.SchemaObject;\n        const [requiredP, optionalP] = Utils.generateParametersFromSchema(\n          schema,\n          \"requestBody\",\n          !!options.allowMultipleParameters,\n          requestBody.required\n        );\n        requiredParams.push(...requiredP);\n        optionalParams.push(...optionalP);\n      }\n    }\n\n    const operationId = operationItem.operationId!;\n\n    const parameters = [...requiredParams, ...optionalParams];\n\n    const command: IMessagingExtensionCommand = {\n      context: [\"compose\"],\n      type: \"query\",\n      title: (operationItem.summary ?? \"\").slice(0, ConstantString.CommandTitleMaxLens),\n      id: operationId,\n      parameters: parameters,\n      description: (operationItem.description ?? \"\").slice(\n        0,\n        ConstantString.CommandDescriptionMaxLens\n      ),\n    };\n    return command;\n  }\n\n  static format(str: string, ...args: string[]): string {\n    let index = 0;\n    return str.replace(/%s/g, () => {\n      const arg = args[index++];\n      return arg !== undefined ? arg : \"\";\n    });\n  }\n\n  static getSafeRegistrationIdEnvName(authName: string): string {\n    if (!authName) {\n      return \"\";\n    }\n\n    let safeRegistrationIdEnvName = authName.toUpperCase().replace(/[^A-Z0-9_]/g, \"_\");\n\n    if (!safeRegistrationIdEnvName.match(/^[A-Z]/)) {\n      safeRegistrationIdEnvName = \"PREFIX_\" + safeRegistrationIdEnvName;\n    }\n\n    return safeRegistrationIdEnvName;\n  }\n\n  static getServerObject(\n    spec: OpenAPIV3.Document,\n    method: string,\n    path: string\n  ): OpenAPIV3.ServerObject | undefined {\n    const pathObj = spec.paths[path] as any;\n\n    const operationObject = pathObj[method] as OpenAPIV3.OperationObject;\n\n    const rootServer = spec.servers && spec.servers[0];\n    const methodServer = spec.paths[path]!.servers && spec.paths[path]!.servers![0];\n    const operationServer = operationObject.servers && operationObject.servers[0];\n\n    const serverUrl = operationServer || methodServer || rootServer;\n\n    return serverUrl;\n  }\n\n  static getAuthSchemaObject(\n    authType: string,\n    authParameters: any\n  ): OpenAPIV3.SecuritySchemeObject {\n    switch (authType) {\n      case \"oauth\":\n      case \"microsoft-entra\":\n        return {\n          type: \"oauth2\",\n          flows: {\n            authorizationCode: {\n              authorizationUrl: authParameters.authorizationUrl,\n              tokenUrl: authParameters.tokenUrl,\n              refreshUrl: authParameters.refreshUrl,\n              scopes: authParameters.scopes,\n            },\n          },\n        } as OpenAPIV3.OAuth2SecurityScheme;\n      case \"api-key\":\n        return {\n          type: \"apiKey\",\n          in: authParameters.in,\n          name: authParameters.name,\n        } as OpenAPIV3.ApiKeySecurityScheme;\n      case \"bearer-token\":\n      default:\n        return {\n          type: \"http\",\n          scheme: \"bearer\",\n        } as OpenAPIV3.HttpSecurityScheme;\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\"use strict\";\n\nimport { OpenAPIV3 } from \"openapi-types\";\nimport {\n  ParseOptions,\n  APIValidationResult,\n  ErrorType,\n  CheckParamResult,\n  ProjectType,\n  APIMap,\n  SpecValidationResult,\n  WarningType,\n  InvalidAPIInfo,\n} from \"../interfaces\";\nimport { Utils } from \"../utils\";\nimport { ConstantString } from \"../constants\";\n\nexport abstract class Validator {\n  projectType!: ProjectType;\n  spec!: OpenAPIV3.Document;\n  options!: ParseOptions;\n\n  private apiMap: APIMap | undefined;\n  private hasCircularReference = false;\n\n  abstract validateAPI(method: string, path: string): APIValidationResult;\n  abstract validateSpec(): SpecValidationResult;\n\n  protected checkCircularReference(): void {\n    try {\n      JSON.stringify(this.spec);\n    } catch (e) {\n      if ((e as Error).message.includes(\"Converting circular structure to JSON\")) {\n        this.hasCircularReference = true;\n      }\n    }\n  }\n\n  listAPIs(): APIMap {\n    if (this.apiMap) {\n      return this.apiMap;\n    }\n\n    const paths = this.spec.paths;\n    const result: APIMap = {};\n    for (const path in paths) {\n      const methods = paths[path];\n      for (const method in methods) {\n        const operationObject = (methods as any)[method] as OpenAPIV3.OperationObject;\n        if (this.options.allowMethods?.includes(method) && operationObject) {\n          const validateResult = this.validateAPI(method, path);\n          result[`${method.toUpperCase()} ${path}`] = {\n            operation: operationObject,\n            isValid: validateResult.isValid,\n            reason: validateResult.reason,\n          };\n        }\n      }\n    }\n\n    this.apiMap = result;\n    return result;\n  }\n\n  protected validateSpecVersion(): SpecValidationResult {\n    const result: SpecValidationResult = { errors: [], warnings: [] };\n\n    if (this.spec.openapi >= \"3.1.0\") {\n      result.errors.push({\n        type: ErrorType.SpecVersionNotSupported,\n        content: Utils.format(ConstantString.SpecVersionNotSupported, this.spec.openapi),\n        data: this.spec.openapi,\n      });\n    }\n\n    return result;\n  }\n\n  protected validateSpecServer(): SpecValidationResult {\n    const result: SpecValidationResult = { errors: [], warnings: [] };\n    const serverErrors = Utils.validateServer(this.spec, this.options);\n    result.errors.push(...serverErrors);\n    return result;\n  }\n\n  protected validateSpecNoSupportAPI(): SpecValidationResult {\n    const result: SpecValidationResult = { errors: [], warnings: [] };\n\n    const apiMap = this.listAPIs();\n\n    const validAPIs = Object.entries(apiMap).filter(([, value]) => value.isValid);\n    if (validAPIs.length === 0) {\n      const data = [];\n      for (const key in apiMap) {\n        const { reason } = apiMap[key];\n        const apiInvalidReason: InvalidAPIInfo = { api: key, reason: reason };\n        data.push(apiInvalidReason);\n      }\n\n      result.errors.push({\n        type: ErrorType.NoSupportedApi,\n        content: ConstantString.NoSupportedApi,\n        data,\n      });\n    }\n\n    return result;\n  }\n\n  protected validateSpecOperationId(): SpecValidationResult {\n    const result: SpecValidationResult = { errors: [], warnings: [] };\n    const apiMap = this.listAPIs();\n\n    // OperationId missing\n    const apisMissingOperationId: string[] = [];\n    for (const key in apiMap) {\n      const { operation } = apiMap[key];\n      if (!operation.operationId) {\n        apisMissingOperationId.push(key);\n      }\n    }\n\n    if (apisMissingOperationId.length > 0) {\n      result.warnings.push({\n        type: WarningType.OperationIdMissing,\n        content: Utils.format(ConstantString.MissingOperationId, apisMissingOperationId.join(\", \")),\n        data: apisMissingOperationId,\n      });\n    }\n\n    return result;\n  }\n\n  protected validateMethodAndPath(method: string, path: string): APIValidationResult {\n    const result: APIValidationResult = { isValid: true, reason: [] };\n\n    if (this.options.allowMethods && !this.options.allowMethods.includes(method)) {\n      result.isValid = false;\n      result.reason.push(ErrorType.MethodNotAllowed);\n      return result;\n    }\n\n    const pathObj = this.spec.paths[path] as any;\n\n    if (!pathObj || !pathObj[method]) {\n      result.isValid = false;\n      result.reason.push(ErrorType.UrlPathNotExist);\n      return result;\n    }\n\n    return result;\n  }\n\n  protected validateCircularReference(method: string, path: string): APIValidationResult {\n    const result: APIValidationResult = { isValid: true, reason: [] };\n    if (this.hasCircularReference) {\n      const operationObject = (this.spec.paths[path] as any)[method] as OpenAPIV3.OperationObject;\n      try {\n        JSON.stringify(operationObject);\n      } catch (e) {\n        if ((e as Error).message.includes(\"Converting circular structure to JSON\")) {\n          result.isValid = false;\n          result.reason.push(ErrorType.CircularReferenceNotSupported);\n        }\n      }\n    }\n\n    return result;\n  }\n\n  protected validateServer(method: string, path: string): APIValidationResult {\n    const result: APIValidationResult = { isValid: true, reason: [] };\n    const serverObj = Utils.getServerObject(this.spec, method, path);\n    if (!serverObj) {\n      // should contain server URL\n      result.reason.push(ErrorType.NoServerInformation);\n    } else {\n      const allowHttp = this.projectType === ProjectType.Copilot;\n      const serverValidateResult = Utils.checkServerUrl([serverObj], allowHttp);\n      result.reason.push(...serverValidateResult.map((item) => item.type));\n    }\n\n    return result;\n  }\n\n  protected validateAuth(method: string, path: string): APIValidationResult {\n    const pathObj = this.spec.paths[path] as any;\n    const operationObject = pathObj[method] as OpenAPIV3.OperationObject;\n\n    const securities = operationObject.security;\n    const authSchemeArray = Utils.getAuthArray(securities, this.spec);\n\n    if (authSchemeArray.length === 0) {\n      return { isValid: true, reason: [] };\n    }\n\n    if (\n      this.options.allowAPIKeyAuth ||\n      this.options.allowOauth2 ||\n      this.options.allowBearerTokenAuth\n    ) {\n      // Currently we don't support multiple auth in one operation\n      if (authSchemeArray.length > 0 && authSchemeArray.every((auths) => auths.length > 1)) {\n        return {\n          isValid: false,\n          reason: [ErrorType.MultipleAuthNotSupported],\n        };\n      }\n\n      if (this.projectType === ProjectType.Copilot) {\n        return { isValid: true, reason: [] };\n      }\n\n      for (const auths of authSchemeArray) {\n        if (auths.length === 1) {\n          if (\n            (this.options.allowAPIKeyAuth && Utils.isAPIKeyAuth(auths[0].authScheme)) ||\n            (this.options.allowOauth2 && Utils.isOAuthWithAuthCodeFlow(auths[0].authScheme)) ||\n            (this.options.allowBearerTokenAuth && Utils.isBearerTokenAuth(auths[0].authScheme))\n          ) {\n            return { isValid: true, reason: [] };\n          }\n        }\n      }\n    }\n\n    return { isValid: false, reason: [ErrorType.AuthTypeIsNotSupported] };\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\"use strict\";\n\nimport { OpenAPIV3 } from \"openapi-types\";\nimport {\n  ParseOptions,\n  APIValidationResult,\n  ErrorType,\n  ProjectType,\n  SpecValidationResult,\n} from \"../interfaces\";\nimport { Validator } from \"./validator\";\n\nexport class CopilotValidator extends Validator {\n  constructor(spec: OpenAPIV3.Document, options: ParseOptions) {\n    super();\n    this.projectType = ProjectType.Copilot;\n    this.options = options;\n    this.spec = spec;\n  }\n\n  validateSpec(): SpecValidationResult {\n    const result: SpecValidationResult = { errors: [], warnings: [] };\n\n    // validate spec version\n    let validationResult = this.validateSpecVersion();\n    result.errors.push(...validationResult.errors);\n\n    // validate spec server\n    validationResult = this.validateSpecServer();\n    result.errors.push(...validationResult.errors);\n\n    // validate no supported API\n    validationResult = this.validateSpecNoSupportAPI();\n    result.errors.push(...validationResult.errors);\n\n    // validate operationId missing\n    validationResult = this.validateSpecOperationId();\n    result.warnings.push(...validationResult.warnings);\n\n    return result;\n  }\n\n  validateAPI(method: string, path: string): APIValidationResult {\n    const result: APIValidationResult = { isValid: true, reason: [] };\n    method = method.toLocaleLowerCase();\n\n    // validate method and path\n    const methodAndPathResult = this.validateMethodAndPath(method, path);\n    if (!methodAndPathResult.isValid) {\n      return methodAndPathResult;\n    }\n\n    const operationObject = (this.spec.paths[path] as any)[method] as OpenAPIV3.OperationObject;\n\n    // validate auth\n    const authCheckResult = this.validateAuth(method, path);\n    result.reason.push(...authCheckResult.reason);\n\n    // validate operationId\n    if (!this.options.allowMissingId && !operationObject.operationId) {\n      result.reason.push(ErrorType.MissingOperationId);\n    }\n\n    // validate server\n    const validateServerResult = this.validateServer(method, path);\n    result.reason.push(...validateServerResult.reason);\n\n    if (result.reason.length > 0) {\n      result.isValid = false;\n    }\n\n    return result;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\"use strict\";\n\nimport { OpenAPIV3 } from \"openapi-types\";\nimport {\n  ParseOptions,\n  APIValidationResult,\n  ErrorType,\n  ProjectType,\n  CheckParamResult,\n  SpecValidationResult,\n} from \"../interfaces\";\nimport { Validator } from \"./validator\";\nimport { Utils } from \"../utils\";\n\nexport class SMEValidator extends Validator {\n  private static readonly SMERequiredParamsMaxNum = 5;\n\n  constructor(spec: OpenAPIV3.Document, options: ParseOptions) {\n    super();\n    this.projectType = ProjectType.SME;\n    this.options = options;\n    this.spec = spec;\n    this.checkCircularReference();\n  }\n\n  validateSpec(): SpecValidationResult {\n    const result: SpecValidationResult = { errors: [], warnings: [] };\n\n    // validate spec version\n    let validationResult = this.validateSpecVersion();\n    result.errors.push(...validationResult.errors);\n\n    // validate spec server\n    validationResult = this.validateSpecServer();\n    result.errors.push(...validationResult.errors);\n\n    // validate no supported API\n    validationResult = this.validateSpecNoSupportAPI();\n    result.errors.push(...validationResult.errors);\n\n    // validate operationId missing\n    if (this.options.allowMissingId) {\n      validationResult = this.validateSpecOperationId();\n      result.warnings.push(...validationResult.warnings);\n    }\n\n    return result;\n  }\n\n  validateAPI(method: string, path: string): APIValidationResult {\n    const result: APIValidationResult = { isValid: true, reason: [] };\n    method = method.toLocaleLowerCase();\n\n    // validate method and path\n    const methodAndPathResult = this.validateMethodAndPath(method, path);\n    if (!methodAndPathResult.isValid) {\n      return methodAndPathResult;\n    }\n\n    const circularReferenceResult = this.validateCircularReference(method, path);\n    if (!circularReferenceResult.isValid) {\n      return circularReferenceResult;\n    }\n\n    const operationObject = (this.spec.paths[path] as any)[method] as OpenAPIV3.OperationObject;\n\n    // validate auth\n    const authCheckResult = this.validateAuth(method, path);\n    result.reason.push(...authCheckResult.reason);\n\n    // validate operationId\n    if (!this.options.allowMissingId && !operationObject.operationId) {\n      result.reason.push(ErrorType.MissingOperationId);\n    }\n\n    // validate server\n    const validateServerResult = this.validateServer(method, path);\n    result.reason.push(...validateServerResult.reason);\n\n    // validate response\n    const validateResponseResult = this.validateResponse(method, path);\n    result.reason.push(...validateResponseResult.reason);\n\n    let postBodyResult: CheckParamResult = {\n      requiredNum: 0,\n      optionalNum: 0,\n      isValid: true,\n      reason: [],\n    };\n\n    // validate requestBody\n    const requestBody = operationObject.requestBody as OpenAPIV3.RequestBodyObject;\n    const requestJsonBody = requestBody?.content[\"application/json\"];\n\n    if (Utils.containMultipleMediaTypes(requestBody)) {\n      result.reason.push(ErrorType.PostBodyContainMultipleMediaTypes);\n    }\n\n    if (requestJsonBody) {\n      const requestBodySchema = requestJsonBody.schema as OpenAPIV3.SchemaObject;\n\n      postBodyResult = this.checkPostBodySchema(requestBodySchema, requestBody.required);\n      result.reason.push(...postBodyResult.reason);\n    }\n\n    // validate parameters\n    const paramObject = operationObject.parameters as OpenAPIV3.ParameterObject[];\n    const paramResult = this.checkParamSchema(paramObject);\n    result.reason.push(...paramResult.reason);\n\n    // validate total parameters count\n    if (paramResult.isValid && postBodyResult.isValid) {\n      const paramCountResult = this.validateParamCount(postBodyResult, paramResult);\n      result.reason.push(...paramCountResult.reason);\n    }\n\n    if (result.reason.length > 0) {\n      result.isValid = false;\n    }\n\n    return result;\n  }\n\n  private validateResponse(method: string, path: string): APIValidationResult {\n    const result: APIValidationResult = { isValid: true, reason: [] };\n\n    const operationObject = (this.spec.paths[path] as any)[method] as OpenAPIV3.OperationObject;\n\n    const { json, multipleMediaType } = Utils.getResponseJson(operationObject);\n\n    // only support response body only contains “application/json” content type\n    if (multipleMediaType) {\n      result.reason.push(ErrorType.ResponseContainMultipleMediaTypes);\n    } else if (Object.keys(json).length === 0) {\n      // response body should not be empty\n      result.reason.push(ErrorType.ResponseJsonIsEmpty);\n    }\n\n    return result;\n  }\n\n  private checkPostBodySchema(\n    schema: OpenAPIV3.SchemaObject,\n    isRequired = false\n  ): CheckParamResult {\n    const paramResult: CheckParamResult = {\n      requiredNum: 0,\n      optionalNum: 0,\n      isValid: true,\n      reason: [],\n    };\n\n    if (Object.keys(schema).length === 0) {\n      return paramResult;\n    }\n\n    const isRequiredWithoutDefault = isRequired && schema.default === undefined;\n    const isCopilot = this.projectType === ProjectType.Copilot;\n\n    if (\n      schema.type === \"string\" ||\n      schema.type === \"integer\" ||\n      schema.type === \"boolean\" ||\n      schema.type === \"number\"\n    ) {\n      if (isRequiredWithoutDefault) {\n        paramResult.requiredNum = paramResult.requiredNum + 1;\n      } else {\n        paramResult.optionalNum = paramResult.optionalNum + 1;\n      }\n    } else if (Utils.isObjectSchema(schema)) {\n      const { properties } = schema;\n      for (const property in properties) {\n        let isRequired = false;\n        if (schema.required && schema.required?.indexOf(property) >= 0) {\n          isRequired = true;\n        }\n        const result = this.checkPostBodySchema(\n          properties[property] as OpenAPIV3.SchemaObject,\n          isRequired\n        );\n        paramResult.requiredNum += result.requiredNum;\n        paramResult.optionalNum += result.optionalNum;\n        paramResult.isValid = paramResult.isValid && result.isValid;\n        paramResult.reason.push(...result.reason);\n      }\n    } else {\n      if (isRequiredWithoutDefault && !isCopilot) {\n        paramResult.isValid = false;\n        paramResult.reason.push(ErrorType.PostBodyContainsRequiredUnsupportedSchema);\n      }\n    }\n    return paramResult;\n  }\n\n  private checkParamSchema(paramObject: OpenAPIV3.ParameterObject[]): CheckParamResult {\n    const paramResult: CheckParamResult = {\n      requiredNum: 0,\n      optionalNum: 0,\n      isValid: true,\n      reason: [],\n    };\n\n    if (!paramObject) {\n      return paramResult;\n    }\n\n    for (let i = 0; i < paramObject.length; i++) {\n      const param = paramObject[i];\n      const schema = param.schema as OpenAPIV3.SchemaObject;\n\n      const isRequiredWithoutDefault = param.required && schema.default === undefined;\n\n      if (param.in === \"header\" || param.in === \"cookie\") {\n        if (isRequiredWithoutDefault) {\n          paramResult.isValid = false;\n          paramResult.reason.push(ErrorType.ParamsContainRequiredUnsupportedSchema);\n        }\n        continue;\n      }\n\n      if (\n        schema.type !== \"boolean\" &&\n        schema.type !== \"string\" &&\n        schema.type !== \"number\" &&\n        schema.type !== \"integer\"\n      ) {\n        if (isRequiredWithoutDefault) {\n          paramResult.isValid = false;\n          paramResult.reason.push(ErrorType.ParamsContainRequiredUnsupportedSchema);\n        }\n        continue;\n      }\n\n      if (param.in === \"query\" || param.in === \"path\") {\n        if (isRequiredWithoutDefault) {\n          paramResult.requiredNum = paramResult.requiredNum + 1;\n        } else {\n          paramResult.optionalNum = paramResult.optionalNum + 1;\n        }\n      }\n    }\n\n    return paramResult;\n  }\n\n  private validateParamCount(\n    postBodyResult: CheckParamResult,\n    paramResult: CheckParamResult\n  ): APIValidationResult {\n    const result: APIValidationResult = { isValid: true, reason: [] };\n    const totalRequiredParams = postBodyResult.requiredNum + paramResult.requiredNum;\n    const totalParams = totalRequiredParams + postBodyResult.optionalNum + paramResult.optionalNum;\n\n    if (totalRequiredParams > 1) {\n      if (\n        !this.options.allowMultipleParameters ||\n        totalRequiredParams > SMEValidator.SMERequiredParamsMaxNum\n      ) {\n        result.reason.push(ErrorType.ExceededRequiredParamsLimit);\n      }\n    } else if (totalParams === 0) {\n      result.reason.push(ErrorType.NoParameter);\n    }\n\n    return result;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\"use strict\";\n\nimport { OpenAPIV3 } from \"openapi-types\";\nimport {\n  ParseOptions,\n  APIValidationResult,\n  ErrorType,\n  ProjectType,\n  SpecValidationResult,\n} from \"../interfaces\";\nimport { Validator } from \"./validator\";\n\nexport class TeamsAIValidator extends Validator {\n  constructor(spec: OpenAPIV3.Document, options: ParseOptions) {\n    super();\n    this.projectType = ProjectType.TeamsAi;\n    this.options = options;\n    this.spec = spec;\n    this.checkCircularReference();\n  }\n\n  validateSpec(): SpecValidationResult {\n    const result: SpecValidationResult = { errors: [], warnings: [] };\n\n    // validate spec server\n    let validationResult = this.validateSpecServer();\n    result.errors.push(...validationResult.errors);\n\n    // validate no supported API\n    validationResult = this.validateSpecNoSupportAPI();\n    result.errors.push(...validationResult.errors);\n\n    return result;\n  }\n\n  validateAPI(method: string, path: string): APIValidationResult {\n    const result: APIValidationResult = { isValid: true, reason: [] };\n    method = method.toLocaleLowerCase();\n\n    // validate method and path\n    const methodAndPathResult = this.validateMethodAndPath(method, path);\n    if (!methodAndPathResult.isValid) {\n      return methodAndPathResult;\n    }\n\n    const circularReferenceResult = this.validateCircularReference(method, path);\n    if (!circularReferenceResult.isValid) {\n      return circularReferenceResult;\n    }\n\n    const operationObject = (this.spec.paths[path] as any)[method] as OpenAPIV3.OperationObject;\n\n    // validate operationId\n    if (!this.options.allowMissingId && !operationObject.operationId) {\n      result.reason.push(ErrorType.MissingOperationId);\n    }\n\n    // validate server\n    const validateServerResult = this.validateServer(method, path);\n    result.reason.push(...validateServerResult.reason);\n\n    if (result.reason.length > 0) {\n      result.isValid = false;\n    }\n\n    return result;\n  }\n}\n","import { OpenAPIV3 } from \"openapi-types\";\nimport { ParseOptions, ProjectType } from \"../interfaces\";\nimport { CopilotValidator } from \"./copilotValidator\";\nimport { SMEValidator } from \"./smeValidator\";\nimport { TeamsAIValidator } from \"./teamsAIValidator\";\nimport { Validator } from \"./validator\";\n\nexport class ValidatorFactory {\n  static create(spec: OpenAPIV3.Document, options: ParseOptions): Validator {\n    const type = options.projectType ?? ProjectType.SME;\n\n    switch (type) {\n      case ProjectType.SME:\n        return new SMEValidator(spec, options);\n      case ProjectType.Copilot:\n        return new CopilotValidator(spec, options);\n      case ProjectType.TeamsAi:\n        return new TeamsAIValidator(spec, options);\n      default:\n        throw new Error(`Invalid project type: ${type}`);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\"use strict\";\n\nimport SwaggerParser from \"@apidevtools/swagger-parser\";\nimport { OpenAPIV3 } from \"openapi-types\";\nimport {\n  APIInfo,\n  ErrorType,\n  GenerateResult,\n  ParseOptions,\n  ValidateResult,\n  ValidationStatus,\n  ListAPIResult,\n  ProjectType,\n  APIMap,\n  ErrorResult,\n  WarningResult,\n} from \"./interfaces\";\nimport { SpecParserError } from \"./specParserError\";\nimport { Utils } from \"./utils\";\nimport { ConstantString } from \"./constants\";\nimport { ValidatorFactory } from \"./validators/validatorFactory\";\nimport { Validator } from \"./validators/validator\";\n\n/**\n * A class that parses an OpenAPI specification file and provides methods to validate, list, and generate artifacts.\n */\nexport class SpecParser {\n  public readonly pathOrSpec: string | OpenAPIV3.Document;\n  public readonly parser: SwaggerParser;\n  public readonly options: Required<ParseOptions>;\n\n  private spec: OpenAPIV3.Document | undefined;\n  private validator: Validator | undefined;\n  private unResolveSpec: OpenAPIV3.Document | undefined;\n  private isSwaggerFile: boolean | undefined;\n\n  private defaultOptions: ParseOptions = {\n    allowMissingId: false,\n    allowSwagger: false,\n    allowAPIKeyAuth: false,\n    allowMultipleParameters: false,\n    allowBearerTokenAuth: false,\n    allowOauth2: false,\n    allowMethods: [\"get\", \"post\"],\n    allowConversationStarters: false,\n    allowResponseSemantics: false,\n    allowConfirmation: false,\n    projectType: ProjectType.SME,\n    isGptPlugin: false,\n  };\n\n  /**\n   * Creates a new instance of the SpecParser class.\n   * @param pathOrDoc The path to the OpenAPI specification file or the OpenAPI specification object.\n   * @param options The options for parsing the OpenAPI specification file.\n   */\n  constructor(pathOrDoc: string | OpenAPIV3.Document, options?: ParseOptions) {\n    this.pathOrSpec = pathOrDoc;\n    this.parser = new SwaggerParser();\n    this.options = {\n      ...this.defaultOptions,\n      ...(options ?? {}),\n    } as Required<ParseOptions>;\n  }\n\n  /**\n   * Validates the OpenAPI specification file and returns a validation result.\n   *\n   * @returns A validation result object that contains information about any errors or warnings in the specification file.\n   */\n  async validate(): Promise<ValidateResult> {\n    try {\n      try {\n        await this.loadSpec();\n        await this.parser.validate(this.spec!, {\n          validate: {\n            schema: false,\n          },\n        });\n      } catch (e) {\n        return {\n          status: ValidationStatus.Error,\n          warnings: [],\n          errors: [{ type: ErrorType.SpecNotValid, content: (e as Error).toString() }],\n        };\n      }\n\n      const errors: ErrorResult[] = [];\n      const warnings: WarningResult[] = [];\n\n      if (!this.options.allowSwagger && this.isSwaggerFile) {\n        return {\n          status: ValidationStatus.Error,\n          warnings: [],\n          errors: [\n            {\n              type: ErrorType.SwaggerNotSupported,\n              content: ConstantString.SwaggerNotSupported,\n            },\n          ],\n        };\n      }\n\n      // Remote reference not supported\n      const refPaths = this.parser.$refs.paths();\n      // refPaths [0] is the current spec file path\n      if (refPaths.length > 1) {\n        errors.push({\n          type: ErrorType.RemoteRefNotSupported,\n          content: Utils.format(ConstantString.RemoteRefNotSupported, refPaths.join(\", \")),\n          data: refPaths,\n        });\n      }\n\n      const validator = this.getValidator(this.spec!);\n      const validationResult = validator.validateSpec();\n\n      warnings.push(...validationResult.warnings);\n      errors.push(...validationResult.errors);\n\n      let status = ValidationStatus.Valid;\n      if (warnings.length > 0 && errors.length === 0) {\n        status = ValidationStatus.Warning;\n      } else if (errors.length > 0) {\n        status = ValidationStatus.Error;\n      }\n\n      return {\n        status: status,\n        warnings: warnings,\n        errors: errors,\n      };\n    } catch (err) {\n      throw new SpecParserError((err as Error).toString(), ErrorType.ValidateFailed);\n    }\n  }\n\n  async listSupportedAPIInfo(): Promise<APIInfo[]> {\n    try {\n      await this.loadSpec();\n      const apiMap = this.getAPIs(this.spec!);\n      const apiInfos: APIInfo[] = [];\n      for (const key in apiMap) {\n        const { operation, isValid } = apiMap[key];\n\n        if (!isValid) {\n          continue;\n        }\n\n        const [method, path] = key.split(\" \");\n        const operationId = operation.operationId;\n\n        // In Browser environment, this api is by default not support api without operationId\n        if (!operationId) {\n          continue;\n        }\n\n        const command = Utils.parseApiInfo(operation, this.options);\n\n        const apiInfo: APIInfo = {\n          method: method,\n          path: path,\n          title: command.title,\n          id: operationId,\n          parameters: command.parameters!,\n          description: command.description!,\n        };\n\n        apiInfos.push(apiInfo);\n      }\n\n      return apiInfos;\n    } catch (err) {\n      throw new SpecParserError((err as Error).toString(), ErrorType.listSupportedAPIInfoFailed);\n    }\n  }\n\n  /**\n   * Lists all the OpenAPI operations in the specification file.\n   * @returns A string array that represents the HTTP method and path of each operation, such as ['GET /pets/{petId}', 'GET /user/{userId}']\n   * according to copilot plugin spec, only list get and post method without auth\n   */\n  // eslint-disable-next-line @typescript-eslint/require-await\n  async list(): Promise<ListAPIResult[]> {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  /**\n   * Generate specs according to the filters.\n   * @param filter An array of strings that represent the filters to apply when generating the artifacts. If filter is empty, it would process nothing.\n   */\n  // eslint-disable-next-line @typescript-eslint/require-await\n  async getFilteredSpecs(\n    filter: string[],\n    signal?: AbortSignal\n  ): Promise<[OpenAPIV3.Document, OpenAPIV3.Document]> {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  /**\n   * Generates and update artifacts from the OpenAPI specification file. Generate Adaptive Cards, update Teams app manifest, and generate a new OpenAPI specification file.\n   * @param manifestPath A file path of the Teams app manifest file to update.\n   * @param filter An array of strings that represent the filters to apply when generating the artifacts. If filter is empty, it would process nothing.\n   * @param outputSpecPath File path of the new OpenAPI specification file to generate. If not specified or empty, no spec file will be generated.\n   * @param pluginFilePath File path of the api plugin file to generate.\n   */\n  // eslint-disable-next-line @typescript-eslint/require-await\n  async generateForCopilot(\n    manifestPath: string,\n    filter: string[],\n    outputSpecPath: string,\n    pluginFilePath: string,\n    signal?: AbortSignal\n  ): Promise<GenerateResult> {\n    throw new Error(\"Method not implemented.\");\n  }\n  /**\n   * Generates and update artifacts from the OpenAPI specification file. Generate Adaptive Cards, update Teams app manifest, and generate a new OpenAPI specification file.\n   * @param manifestPath A file path of the Teams app manifest file to update.\n   * @param filter An array of strings that represent the filters to apply when generating the artifacts. If filter is empty, it would process nothing.\n   * @param outputSpecPath File path of the new OpenAPI specification file to generate. If not specified or empty, no spec file will be generated.\n   * @param adaptiveCardFolder Folder path where the Adaptive Card files will be generated. If not specified or empty, Adaptive Card files will not be generated.\n   * @param isMe Boolean that indicates whether the project is an Messaging Extension. For Messaging Extension, composeExtensions will be added in Teams app manifest.\n   */\n  // eslint-disable-next-line @typescript-eslint/require-await\n  async generate(\n    manifestPath: string,\n    filter: string[],\n    outputSpecPath: string,\n    adaptiveCardFolder?: string,\n    signal?: AbortSignal\n  ): Promise<GenerateResult> {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  private async loadSpec(): Promise<void> {\n    if (!this.spec) {\n      this.unResolveSpec = (await this.parser.parse(this.pathOrSpec)) as OpenAPIV3.Document;\n      if (!this.unResolveSpec.openapi && (this.unResolveSpec as any).swagger === \"2.0\") {\n        this.isSwaggerFile = true;\n      }\n\n      const clonedUnResolveSpec = JSON.parse(JSON.stringify(this.unResolveSpec));\n      this.spec = (await this.parser.dereference(clonedUnResolveSpec)) as OpenAPIV3.Document;\n    }\n  }\n\n  private getAPIs(spec: OpenAPIV3.Document): APIMap {\n    const validator = this.getValidator(spec);\n    const apiMap = validator.listAPIs();\n    return apiMap;\n  }\n\n  private getValidator(spec: OpenAPIV3.Document): Validator {\n    if (this.validator) {\n      return this.validator;\n    }\n    const validator = ValidatorFactory.create(spec, this.options);\n    this.validator = validator;\n    return validator;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\"use strict\";\n\nimport { OpenAPIV3 } from \"openapi-types\";\n\nexport class JsonDataGenerator {\n  private static visitedSchemas = new Set<OpenAPIV3.SchemaObject>();\n\n  static generate(schema: OpenAPIV3.SchemaObject): any {\n    return this.generateMockData(schema);\n  }\n\n  static generateMockData(schema: OpenAPIV3.SchemaObject): any {\n    if (this.visitedSchemas.has(schema)) {\n      return null; // Prevent circular reference\n    }\n    this.visitedSchemas.add(schema);\n\n    let result: any;\n    if (schema.anyOf) {\n      // Select the first schema in anyOf\n      const selectedSchema = schema.anyOf[0] as OpenAPIV3.SchemaObject;\n      result = this.generateMockData(selectedSchema);\n    } else if (schema.oneOf) {\n      // Select the first schema in oneOf\n      const selectedSchema = schema.oneOf[0] as OpenAPIV3.SchemaObject;\n      result = this.generateMockData(selectedSchema);\n    } else if (schema.allOf) {\n      // merge all schemas in allOf\n      result = {};\n      for (const subschema of schema.allOf) {\n        const data = this.generateMockData(subschema as OpenAPIV3.SchemaObject);\n        result = { ...result, ...data };\n      }\n    } else {\n      switch (schema.type) {\n        case \"string\":\n          if (schema.example !== undefined) {\n            result = schema.example;\n          } else if (schema.format) {\n            switch (schema.format) {\n              case \"date-time\":\n                result = \"2024-11-01T05:25:43.593Z\";\n                break;\n              case \"email\":\n                result = \"example@example.com\";\n                break;\n              case \"uuid\":\n                result = \"123e4567-e89b-12d3-a456-426614174000\";\n                break;\n              case \"ipv4\":\n                result = \"192.168.0.1\";\n                break;\n              case \"ipv6\":\n                result = \"2001:0db8:85a3:0000:0000:8a2e:0370:7334\";\n                break;\n              default:\n                result = \"example string\";\n            }\n          } else {\n            result = \"example string\";\n          }\n          break;\n        case \"number\":\n          if (schema.example !== undefined) {\n            result = schema.example;\n          } else if (schema.format) {\n            switch (schema.format) {\n              case \"float\":\n                result = 3.14;\n                break;\n              case \"double\":\n                result = 3.14159;\n                break;\n              default:\n                result = 123;\n            }\n          } else {\n            result = 123;\n          }\n          break;\n        case \"integer\":\n          if (schema.example !== undefined) {\n            result = schema.example;\n          } else if (schema.format) {\n            switch (schema.format) {\n              case \"int32\":\n                result = 123456;\n                break;\n              case \"int64\":\n                result = 123456789;\n                break;\n              default:\n                result = 123;\n            }\n          } else {\n            result = 123;\n          }\n          break;\n        case \"boolean\":\n          result = schema.example !== undefined ? schema.example : true;\n          break;\n        case \"array\":\n          result = [this.generateMockData(schema.items as OpenAPIV3.SchemaObject)];\n          break;\n        case \"object\":\n          result = {};\n          if (schema.properties) {\n            for (const key in schema.properties) {\n              result[key] = this.generateMockData(schema.properties[key] as OpenAPIV3.SchemaObject);\n            }\n          }\n          break;\n        default:\n          result = schema.example || null;\n      }\n    }\n\n    this.visitedSchemas.delete(schema);\n    return result;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\"use strict\";\n\nimport { OpenAPIV3 } from \"openapi-types\";\nimport { Utils } from \"./utils\";\nimport {\n  AdaptiveCard,\n  ArrayElement,\n  ErrorType,\n  ImageElement,\n  TextBlockElement,\n  WarningResult,\n  WarningType,\n} from \"./interfaces\";\nimport { ConstantString } from \"./constants\";\nimport { SpecParserError } from \"./specParserError\";\nimport { JsonDataGenerator } from \"./jsonDataGenerator\";\n\nexport class AdaptiveCardGenerator {\n  static generateAdaptiveCard(\n    operationItem: OpenAPIV3.OperationObject,\n    allowMultipleMediaType = false,\n    maxElementCount: number = Number.MAX_SAFE_INTEGER\n  ): [AdaptiveCard, string, any, WarningResult[]] {\n    try {\n      const { json } = Utils.getResponseJson(operationItem, allowMultipleMediaType);\n\n      let cardBody: Array<TextBlockElement | ImageElement | ArrayElement> = [];\n      let jsonData: any = {};\n      const warnings: WarningResult[] = [];\n\n      const operationId = operationItem.operationId!;\n      let schema = json.schema as OpenAPIV3.SchemaObject;\n      let jsonPath = \"$\";\n      if (schema && Object.keys(schema).length > 0) {\n        try {\n          jsonData = JsonDataGenerator.generate(schema);\n        } catch (err) {\n          warnings.push({\n            type: WarningType.GenerateJsonDataFailed,\n            content: Utils.format(\n              ConstantString.GenerateJsonDataFailed,\n              operationId,\n              (err as Error).toString()\n            ),\n            data: operationId,\n          });\n        }\n\n        jsonPath = AdaptiveCardGenerator.getResponseJsonPathFromSchema(schema);\n        if (jsonPath !== \"$\") {\n          schema = schema.properties![jsonPath] as OpenAPIV3.SchemaObject;\n        }\n\n        cardBody = AdaptiveCardGenerator.generateCardFromResponse(schema, \"\", \"\", maxElementCount);\n      }\n\n      // if no schema, try to use example value\n      if (cardBody.length === 0 && (json.examples || json.example)) {\n        cardBody = [\n          {\n            type: ConstantString.TextBlockType,\n            text: \"${jsonStringify($root)}\",\n            wrap: true,\n          },\n        ];\n      }\n\n      // if no example value, use default success response\n      if (cardBody.length === 0) {\n        cardBody = [\n          {\n            type: ConstantString.TextBlockType,\n            text: \"success\",\n            wrap: true,\n          },\n        ];\n      }\n\n      const fullCard: AdaptiveCard = {\n        type: ConstantString.AdaptiveCardType,\n        $schema: ConstantString.AdaptiveCardSchema,\n        version: ConstantString.AdaptiveCardVersion,\n        body: cardBody,\n      };\n\n      return [fullCard, jsonPath, jsonData, warnings];\n    } catch (err) {\n      throw new SpecParserError((err as Error).toString(), ErrorType.GenerateAdaptiveCardFailed);\n    }\n  }\n\n  static generateCardFromResponse(\n    schema: OpenAPIV3.SchemaObject,\n    name: string,\n    parentArrayName = \"\",\n    maxElementCount = Number.MAX_SAFE_INTEGER,\n    counter: { count: number } = { count: 0 }\n  ): Array<TextBlockElement | ImageElement | ArrayElement> {\n    if (counter.count >= maxElementCount) {\n      return [];\n    }\n    if (schema.type === \"array\") {\n      // schema.items can be arbitrary object: schema { type: array, items: {} }\n      if (Object.keys(schema.items).length === 0) {\n        counter.count++;\n        return [\n          {\n            type: ConstantString.TextBlockType,\n            text: name ? `${name}: \\${jsonStringify(${name})}` : \"result: ${jsonStringify($root)}\",\n            wrap: true,\n          },\n        ];\n      }\n\n      const obj = AdaptiveCardGenerator.generateCardFromResponse(\n        schema.items as OpenAPIV3.SchemaObject,\n        \"\",\n        name,\n        maxElementCount,\n        counter\n      );\n\n      const template = {\n        type: ConstantString.ContainerType,\n        $data: name ? `\\${${name}}` : \"${$root}\",\n        items: Array<TextBlockElement | ImageElement | ArrayElement>(),\n      };\n\n      template.items.push(...obj);\n      return [template];\n    }\n\n    // some schema may not contain type but contain properties\n    if (Utils.isObjectSchema(schema)) {\n      const { properties } = schema;\n      const result: Array<TextBlockElement | ImageElement | ArrayElement> = [];\n      for (const property in properties) {\n        const obj = AdaptiveCardGenerator.generateCardFromResponse(\n          properties[property] as OpenAPIV3.SchemaObject,\n          name ? `${name}.${property}` : property,\n          parentArrayName,\n          maxElementCount,\n          counter\n        );\n        result.push(...obj);\n      }\n\n      if (schema.additionalProperties) {\n        // TODO: better ways to handler warnings.\n        console.warn(ConstantString.AdditionalPropertiesNotSupported);\n      }\n\n      return result;\n    }\n    if (\n      schema.type === \"string\" ||\n      schema.type === \"integer\" ||\n      schema.type === \"boolean\" ||\n      schema.type === \"number\"\n    ) {\n      counter.count++;\n      if (!AdaptiveCardGenerator.isImageUrlProperty(schema, name, parentArrayName)) {\n        // string in root: \"ddd\"\n        let text = \"result: ${$root}\";\n        if (name) {\n          // object { id: \"1\" }\n          text = `${name}: \\${if(${name}, ${name}, 'N/A')}`;\n          if (parentArrayName) {\n            // object types inside array: { tags: [\"id\": 1, \"name\": \"name\"] }\n            text = `${parentArrayName}.${text}`;\n          }\n        } else if (parentArrayName) {\n          // string array: photoUrls: [\"1\", \"2\"]\n          text = `${parentArrayName}: ` + \"${$data}\";\n        }\n\n        return [\n          {\n            type: ConstantString.TextBlockType,\n            text,\n            wrap: true,\n          },\n        ];\n      } else {\n        const url = name ? `\\${${name}}` : \"${$data}\";\n        const condition = name\n          ? `\\${${name} != null && ${name} != ''}`\n          : \"${$data != null && $data != ''}\";\n\n        return [\n          {\n            type: \"Image\",\n            url,\n            $when: condition,\n          },\n        ];\n      }\n    }\n\n    if (schema.oneOf || schema.anyOf || schema.not || schema.allOf) {\n      throw new Error(Utils.format(ConstantString.SchemaNotSupported, JSON.stringify(schema)));\n    }\n\n    throw new Error(Utils.format(ConstantString.UnknownSchema, JSON.stringify(schema)));\n  }\n\n  // Find the first array property in the response schema object with the well-known name\n  static getResponseJsonPathFromSchema(schema: OpenAPIV3.SchemaObject): string {\n    if (Utils.isObjectSchema(schema)) {\n      const { properties } = schema;\n      for (const property in properties) {\n        const schema = properties[property] as OpenAPIV3.SchemaObject;\n        if (\n          schema.type === \"array\" &&\n          Utils.isWellKnownName(property, ConstantString.WellknownResultNames)\n        ) {\n          return property;\n        }\n      }\n    }\n\n    return \"$\";\n  }\n\n  static isImageUrlProperty(\n    schema: OpenAPIV3.NonArraySchemaObject,\n    name: string,\n    parentArrayName: string\n  ): boolean {\n    const propertyName = name ? name : parentArrayName;\n    return (\n      !!propertyName &&\n      schema.type === \"string\" &&\n      Utils.isWellKnownName(propertyName, ConstantString.WellknownImageName) &&\n      (propertyName.toLocaleLowerCase().indexOf(\"url\") >= 0 || schema.format === \"uri\")\n    );\n  }\n}\n"],"names":[],"mappings":"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"}