"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.SSO = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
require("reflect-metadata");
const typedi_1 = require("typedi");
const telemetry_1 = require("../../common/telemetry");
const telemetry_2 = require("../../core/telemetry");
const constants_1 = require("../constants");
const createAuthFiles_1 = require("./createAuthFiles");
let SSO = class SSO {
    constructor() {
        this.name = "sso";
    }
    async add(context, inputs) {
        return addSsoV3(context, inputs);
    }
};
SSO = tslib_1.__decorate([
    (0, typedi_1.Service)("sso")
], SSO);
exports.SSO = SSO;
async function addSsoV3(context, inputs) {
    context.telemetryReporter.sendTelemetryEvent(constants_1.SolutionTelemetryEvent.AddSsoStart, {
        [constants_1.SolutionTelemetryProperty.Component]: constants_1.SolutionTelemetryComponentName,
    });
    const res = await (0, createAuthFiles_1.createAuthFiles)(inputs);
    if (res.isErr()) {
        return (0, teamsfx_api_1.err)((0, telemetry_2.sendErrorTelemetryThenReturnError)(constants_1.SolutionTelemetryEvent.AddSso, res.error, context.telemetryReporter));
    }
    context.telemetryReporter.sendTelemetryEvent(constants_1.SolutionTelemetryEvent.AddSso, {
        [constants_1.SolutionTelemetryProperty.Component]: constants_1.SolutionTelemetryComponentName,
        [constants_1.SolutionTelemetryProperty.Success]: telemetry_1.TelemetrySuccess.Yes,
    });
    return (0, teamsfx_api_1.ok)(undefined);
}
//# sourceMappingURL=sso.js.map