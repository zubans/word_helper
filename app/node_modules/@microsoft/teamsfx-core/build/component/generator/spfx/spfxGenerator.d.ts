import { Context, FxError, GeneratorResult, Inputs, Result } from "@microsoft/teamsfx-api";
import { ActionContext } from "../../middleware/actionExecutionMW";
import { DefaultTemplateGenerator } from "../templates/templateGenerator";
import { TemplateInfo } from "../templates/templateInfo";
export declare class SPFxGenerator {
    static generate(context: Context, inputs: Inputs, destinationPath: string, actionContext?: ActionContext): Promise<Result<undefined, FxError>>;
    private static newSPFxProject;
    private static importSPFxProject;
    static doYeomanScaffold(context: Context, inputs: Inputs, destinationPath: string): Promise<Result<string, FxError>>;
    private static getSolutionVersion;
    private static ensureLocalDependencies;
    private static shouldAddWebPartWithLocalDependencies;
    static copySPFxSolution(src: string, dest: string): Promise<void>;
    static getWebpartManifest(spfxFolder: string): Promise<any | undefined>;
    static updateSPFxTemplate(spfxFolder: string, destinationPath: string, importDetails: string[]): Promise<void>;
    static getNodeVersion(solutionPath: string, context: Context): Promise<string>;
}
export declare class SPFxGeneratorNew extends DefaultTemplateGenerator {
    componentName: string;
    activate(context: Context, inputs: Inputs): boolean;
    getTemplateInfos(context: Context, inputs: Inputs, destinationPath: string, actionContext?: ActionContext): Promise<Result<TemplateInfo[], FxError>>;
}
export declare class SPFxGeneratorImport extends DefaultTemplateGenerator {
    componentName: string;
    importDetails: string[];
    activate(context: Context, inputs: Inputs): boolean;
    getTemplateInfos(context: Context, inputs: Inputs, destinationPath: string, actionContext?: ActionContext): Promise<Result<TemplateInfo[], FxError>>;
    post(context: Context, inputs: Inputs, destinationPath: string, actionContext?: ActionContext): Promise<Result<GeneratorResult, FxError>>;
}
//# sourceMappingURL=spfxGenerator.d.ts.map