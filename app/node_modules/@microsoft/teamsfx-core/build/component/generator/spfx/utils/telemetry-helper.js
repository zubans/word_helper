"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.telemetryHelper = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const stringUtils_1 = require("../../../../common/stringUtils");
const telemetry_1 = require("../../../../common/telemetry");
const constants_1 = require("./constants");
class telemetryHelper {
    static sendSuccessEvent(ctx, eventName, properties = {}, measurements = {}) {
        var _a;
        properties[telemetry_1.TelemetryProperty.Component] = constants_1.Constants.PLUGIN_DEV_NAME;
        properties[telemetry_1.TelemetryProperty.Success] = telemetry_1.TelemetrySuccess.Yes;
        (_a = ctx.telemetryReporter) === null || _a === void 0 ? void 0 : _a.sendTelemetryEvent(eventName, properties, measurements);
    }
    static sendErrorEvent(ctx, eventName, e, properties = {}, measurements = {}) {
        var _a;
        properties[telemetry_1.TelemetryProperty.Component] = constants_1.Constants.PLUGIN_DEV_NAME;
        properties[telemetry_1.TelemetryProperty.Success] = telemetry_1.TelemetrySuccess.No;
        if (e instanceof teamsfx_api_1.SystemError) {
            properties[telemetry_1.TelemetryProperty.ErrorType] = telemetry_1.TelemetryErrorType.SystemError;
        }
        else if (e instanceof teamsfx_api_1.UserError) {
            properties[telemetry_1.TelemetryProperty.ErrorType] = telemetry_1.TelemetryErrorType.UserError;
        }
        properties[telemetry_1.TelemetryProperty.ErrorMessage] = (0, stringUtils_1.maskSecret)(e.message);
        properties[telemetry_1.TelemetryProperty.ErrorCode] = e.name;
        (_a = ctx.telemetryReporter) === null || _a === void 0 ? void 0 : _a.sendTelemetryErrorEvent(eventName, properties, measurements);
    }
}
exports.telemetryHelper = telemetryHelper;
//# sourceMappingURL=telemetry-helper.js.map