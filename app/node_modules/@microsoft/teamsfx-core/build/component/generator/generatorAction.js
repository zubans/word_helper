"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.SampleActionSeq = exports.TemplateActionSeq = exports.downloadDirectoryAction = exports.fetchSampleInfoAction = exports.ScaffoldLocalTemplateAction = exports.ScaffoldRemoteTemplateAction = exports.GeneratorActionName = void 0;
const tslib_1 = require("tslib");
const adm_zip_1 = tslib_1.__importDefault(require("adm-zip"));
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const path_1 = tslib_1.__importDefault(require("path"));
const folder_1 = require("../../folder");
const error_1 = require("./error");
const utils_1 = require("./utils");
var GeneratorActionName;
(function (GeneratorActionName) {
    GeneratorActionName["ScaffoldRemoteTemplate"] = "ScaffoldRemoteTemplate";
    GeneratorActionName["ScaffoldLocalTemplate"] = "ScaffoldLocalTemplate";
    GeneratorActionName["FetchSampleInfo"] = "FetchSampleInfo";
    GeneratorActionName["DownloadDirectory"] = "DownloadDirectory";
})(GeneratorActionName = exports.GeneratorActionName || (exports.GeneratorActionName = {}));
exports.ScaffoldRemoteTemplateAction = {
    name: GeneratorActionName.ScaffoldRemoteTemplate,
    run: async (context) => {
        if (!context.language) {
            throw new error_1.MissKeyError("language");
        }
        const templateUrl = await (0, utils_1.getTemplateUrl)(context.language, utils_1.getTemplateLatestVersion);
        if (!templateUrl) {
            return;
        }
        const zip = await (0, utils_1.fetchZipFromUrl)(templateUrl, context.tryLimits, context.timeoutInMs);
        context.outputs = await (0, utils_1.unzip)(zip, context.destination, context.fileNameReplaceFn, context.fileDataReplaceFn, context.filterFn);
    },
};
exports.ScaffoldLocalTemplateAction = {
    name: GeneratorActionName.ScaffoldLocalTemplate,
    run: async (context) => {
        var _a, _b;
        if (!context.language) {
            throw new error_1.MissKeyError("language");
        }
        if ((_a = context.outputs) === null || _a === void 0 ? void 0 : _a.length) {
            return;
        }
        context.logProvider.debug(`Fetching zip from local: ${JSON.stringify(context)}`);
        const fallbackPath = path_1.default.join((0, folder_1.getTemplatesFolder)(), "fallback");
        const fileName = `${context.language}.zip`;
        const zipPath = path_1.default.join(fallbackPath, fileName);
        const data = await fs_extra_1.default.readFile(zipPath);
        const zip = new adm_zip_1.default(data);
        context.outputs = await (0, utils_1.unzip)(zip, context.destination, context.fileNameReplaceFn, context.fileDataReplaceFn, context.filterFn);
        if (!((_b = context.outputs) === null || _b === void 0 ? void 0 : _b.length)) {
            throw new error_1.TemplateNotFoundError(context.name);
        }
    },
};
exports.fetchSampleInfoAction = {
    name: GeneratorActionName.FetchSampleInfo,
    run: async (context) => {
        const sample = await (0, utils_1.getSampleInfoFromName)(context.name);
        context.sampleInfo = sample.downloadUrlInfo;
    },
};
exports.downloadDirectoryAction = {
    name: GeneratorActionName.DownloadDirectory,
    run: async (context) => {
        var _a;
        context.logProvider.debug(`Downloading sample by directory: ${JSON.stringify(context)}`);
        if (!context.sampleInfo) {
            throw new error_1.MissKeyError("sampleInfo");
        }
        context.outputs = await (0, utils_1.downloadDirectory)(context.sampleInfo, context.destination);
        if (!((_a = context.outputs) === null || _a === void 0 ? void 0 : _a.length)) {
            throw new error_1.SampleNotFoundError(context.name);
        }
    },
};
exports.TemplateActionSeq = [
    exports.ScaffoldRemoteTemplateAction,
    exports.ScaffoldLocalTemplateAction,
];
exports.SampleActionSeq = [exports.fetchSampleInfoAction, exports.downloadDirectoryAction];
//# sourceMappingURL=generatorAction.js.map