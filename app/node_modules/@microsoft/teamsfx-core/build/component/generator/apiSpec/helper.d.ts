/**
 * @author yuqzho@microsoft.com
 */
import { ErrorResult as ApiSpecErrorResult, ErrorType as ApiSpecErrorType, ParseOptions, ProjectType, SpecParser, SpecParserError, WarningResult } from "@microsoft/m365-spec-parser";
import { AuthType } from "@microsoft/m365-spec-parser/dist/src/interfaces";
import { ApiOperation, Context, FxError, Inputs, Result, TeamsAppManifest, Warning } from "@microsoft/teamsfx-api";
import { OpenAPIV3 } from "openapi-types";
import { AuthActionInjectResult } from "../../configManager/actionInjector";
export declare function getParserOptions(type: ProjectType, isDeclarativeCopilot?: boolean, platform?: string): ParseOptions;
export declare const specParserGenerateResultTelemetryEvent = "spec-parser-generate-result";
export declare const specParserGenerateResultAllSuccessTelemetryProperty = "all-success";
export declare const specParserGenerateResultWarningsTelemetryProperty = "warnings";
export declare const invalidApiSpecErrorName = "invalid-api-spec";
export interface ErrorResult {
    /**
     * The type of error.
     */
    type: ApiSpecErrorType;
    /**
     * The content of the error.
     */
    content: string;
    data?: any;
}
export declare function listOperations(context: Context, apiSpecUrl: string | undefined, inputs: Inputs, includeExistingAPIs?: boolean, shouldLogWarning?: boolean, existingCorrelationId?: string): Promise<Result<ApiOperation[], ErrorResult[]>>;
export declare function listPluginExistingOperations(manifest: TeamsAppManifest, teamsManifestPath: string, destinationApiSpecFilePath: string): Promise<string[]>;
interface SpecParserOutputFilePath {
    destinationApiSpecFilePath: string;
    pluginManifestFilePath?: string;
    responseTemplateFolder?: string;
}
interface SpecParserGenerateResult {
    warnings: WarningResult[];
}
export declare function generateFromApiSpec(specParser: SpecParser, teamsManifestPath: string, inputs: Inputs, context: Context, sourceComponent: string, projectType: ProjectType, outputFilePath: SpecParserOutputFilePath): Promise<Result<SpecParserGenerateResult, FxError>>;
export declare function logValidationResults(projectType: ProjectType, errors: ErrorResult[], warnings: WarningResult[], context: Context, shouldLogWarning: boolean, shouldSkipTelemetry: boolean, specHash?: string, existingCorrelationId?: string): void;
export declare function injectAuthAction(projectPath: string, authName: string, authScheme: AuthType, outputApiSpecPath: string, forceToAddNew: boolean): Promise<AuthActionInjectResult | undefined>;
/**
 * Generate scaffolding warning summary.
 * @param warnings warnings returned from spec-parser.
 * @param teamsManifest Teams manifest.
 * @param apiSpecFilePath API spec path relative of project path.
 * @param pluginManifestPath Plugin manifest path relative of project path.
 * @param projectPath Project path.
 * @returns Warning message.
 */
export declare function generateScaffoldingSummary(warnings: Warning[], teamsManifest: TeamsAppManifest, apiSpecFilePath: string, pluginManifestPath: string | undefined, projectPath: string): Promise<string>;
export declare function convertSpecParserErrorToFxError(error: SpecParserError): FxError;
export declare function formatValidationErrors(errors: ApiSpecErrorResult[], inputs: Inputs): ApiSpecErrorResult[];
export declare function updateForCustomApi(spec: OpenAPIV3.Document, language: string, destinationPath: string, openapiSpecFileName: string): Promise<WarningResult[]>;
export declare function getEnvName(authName: string, authType?: string): string;
export {};
//# sourceMappingURL=helper.d.ts.map