"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.sampleDefaultOnActionError = exports.templateDefaultOnActionError = exports.Generator = void 0;
const tslib_1 = require("tslib");
const lib_1 = require("@feathersjs/hooks/lib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const lodash_1 = require("lodash");
const telemetry_1 = require("../../common/telemetry");
const componentError_1 = require("../error/componentError");
const messages_1 = require("../messages");
const actionExecutionMW_1 = require("../middleware/actionExecutionMW");
const constant_1 = require("./constant");
const error_1 = require("./error");
const generatorAction_1 = require("./generatorAction");
const utils_1 = require("./utils");
const featureFlags_1 = require("../../common/featureFlags");
const m365_spec_parser_1 = require("@microsoft/m365-spec-parser");
const stringUtils_1 = require("../../common/stringUtils");
class Generator {
    static getDefaultVariables(appName, safeProjectNameFromVS, targetFramework, placeProjectFileInSolutionDir, authData, llmServiceData) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const safeProjectName = safeProjectNameFromVS !== null && safeProjectNameFromVS !== void 0 ? safeProjectNameFromVS : (0, stringUtils_1.convertToAlphanumericOnly)(appName);
        const safeRegistrationIdEnvName = m365_spec_parser_1.Utils.getSafeRegistrationIdEnvName((_a = authData === null || authData === void 0 ? void 0 : authData.registrationIdEnvName) !== null && _a !== void 0 ? _a : "");
        return {
            appName: appName,
            ProjectName: appName,
            TargetFramework: targetFramework !== null && targetFramework !== void 0 ? targetFramework : "net8.0",
            PlaceProjectFileInSolutionDir: placeProjectFileInSolutionDir ? "true" : "",
            SafeProjectName: safeProjectName,
            SafeProjectNameLowerCase: safeProjectName.toLocaleLowerCase(),
            ApiSpecAuthName: (_b = authData === null || authData === void 0 ? void 0 : authData.authName) !== null && _b !== void 0 ? _b : "",
            ApiSpecAuthRegistrationIdEnvName: safeRegistrationIdEnvName,
            ApiSpecPath: (_c = authData === null || authData === void 0 ? void 0 : authData.openapiSpecPath) !== null && _c !== void 0 ? _c : "",
            ApiKey: (authData === null || authData === void 0 ? void 0 : authData.authType) === "apiKey" ? "true" : "",
            OAuth: (authData === null || authData === void 0 ? void 0 : authData.authType) === "oauth2" ? "true" : "",
            enableTestToolByDefault: featureFlags_1.featureFlagManager.getBooleanValue(featureFlags_1.FeatureFlags.TestTool)
                ? "true"
                : "",
            enableMETestToolByDefault: featureFlags_1.featureFlagManager.getBooleanValue(featureFlags_1.FeatureFlags.METestTool)
                ? "true"
                : "",
            useOpenAI: (llmServiceData === null || llmServiceData === void 0 ? void 0 : llmServiceData.llmService) === "llm-service-openai" ? "true" : "",
            useAzureOpenAI: (llmServiceData === null || llmServiceData === void 0 ? void 0 : llmServiceData.llmService) === "llm-service-azure-openai" ? "true" : "",
            openAIKey: (_d = llmServiceData === null || llmServiceData === void 0 ? void 0 : llmServiceData.openAIKey) !== null && _d !== void 0 ? _d : "",
            azureOpenAIKey: (_e = llmServiceData === null || llmServiceData === void 0 ? void 0 : llmServiceData.azureOpenAIKey) !== null && _e !== void 0 ? _e : "",
            azureOpenAIEndpoint: (_f = llmServiceData === null || llmServiceData === void 0 ? void 0 : llmServiceData.azureOpenAIEndpoint) !== null && _f !== void 0 ? _f : "",
            azureOpenAIDeploymentName: (_g = llmServiceData === null || llmServiceData === void 0 ? void 0 : llmServiceData.azureOpenAIDeploymentName) !== null && _g !== void 0 ? _g : "",
            isNewProjectTypeEnabled: featureFlags_1.featureFlagManager.getBooleanValue(featureFlags_1.FeatureFlags.NewProjectType)
                ? "true"
                : "",
            NewProjectTypeName: (_h = process.env.TEAMSFX_NEW_PROJECT_TYPE_NAME) !== null && _h !== void 0 ? _h : "TeamsApp",
            NewProjectTypeExt: (_j = process.env.TEAMSFX_NEW_PROJECT_TYPE_EXTENSION) !== null && _j !== void 0 ? _j : "ttkproj",
            CEAEnabled: featureFlags_1.featureFlagManager.getBooleanValue(featureFlags_1.FeatureFlags.CEAEnabled) ? "true" : "",
        };
    }
    static async generateTemplate(ctx, destinationPath, scenario, language, actionContext) {
        var _a, _b;
        const replaceMap = (_a = ctx.templateVariables) !== null && _a !== void 0 ? _a : {};
        const lang = language !== null && language !== void 0 ? language : constant_1.commonTemplateName;
        const generatorContext = {
            name: scenario,
            language: lang,
            destination: destinationPath,
            logProvider: ctx.logProvider,
            fileNameReplaceFn: (fileName, fileData) => (0, utils_1.renderTemplateFileName)(fileName, fileData, replaceMap)
                .replace(/\\/g, "/")
                .replace(`${scenario}/`, ""),
            fileDataReplaceFn: (fileName, fileData) => (0, utils_1.renderTemplateFileData)(fileName, fileData, replaceMap),
            filterFn: (fileName) => fileName.replace(/\\/g, "/").startsWith(`${scenario}/`),
            onActionError: templateDefaultOnActionError,
        };
        const templateName = `${scenario}-${lang}`;
        (0, lodash_1.merge)(actionContext === null || actionContext === void 0 ? void 0 : actionContext.telemetryProps, {
            [telemetry_1.TelemetryProperty.TemplateName]: templateName,
        });
        await ((_b = actionContext === null || actionContext === void 0 ? void 0 : actionContext.progressBar) === null || _b === void 0 ? void 0 : _b.next(messages_1.ProgressMessages.generateTemplate));
        ctx.logProvider.debug(`Downloading app template "${templateName}" to ${destinationPath}`);
        await this.generate(generatorContext, generatorAction_1.TemplateActionSeq);
        (0, lodash_1.merge)(actionContext === null || actionContext === void 0 ? void 0 : actionContext.telemetryProps, {
            [telemetry_1.TelemetryProperty.Fallback]: generatorContext.fallback ? "true" : "false", // Track fallback cases.
        });
        return (0, teamsfx_api_1.ok)(undefined);
    }
    static async generateSample(ctx, destinationPath, sampleName, actionContext) {
        var _a;
        (0, lodash_1.merge)(actionContext === null || actionContext === void 0 ? void 0 : actionContext.telemetryProps, {
            [telemetry_1.TelemetryProperty.SampleAppName]: sampleName,
            [telemetry_1.TelemetryProperty.SampleDownloadDirectory]: "true",
        });
        // sample doesn't need replace function. Replacing projectId will be handled by core.
        const generatorContext = {
            name: sampleName,
            destination: destinationPath,
            logProvider: ctx.logProvider,
            timeoutInMs: constant_1.sampleDefaultTimeoutInMs,
            onActionError: sampleDefaultOnActionError,
        };
        await ((_a = actionContext === null || actionContext === void 0 ? void 0 : actionContext.progressBar) === null || _a === void 0 ? void 0 : _a.next(messages_1.ProgressMessages.generateSample(sampleName)));
        ctx.logProvider.debug(`Downloading sample "${sampleName}" to ${destinationPath}`);
        await this.generate(generatorContext, generatorAction_1.SampleActionSeq);
        return (0, teamsfx_api_1.ok)(undefined);
    }
    static async generate(context, actions) {
        var _a, _b;
        for (const action of actions) {
            try {
                await ((_a = context.onActionStart) === null || _a === void 0 ? void 0 : _a.call(context, action, context));
                await action.run(context);
                await ((_b = context.onActionEnd) === null || _b === void 0 ? void 0 : _b.call(context, action, context));
            }
            catch (e) {
                if (e instanceof Error)
                    await context.onActionError(action, context, e);
            }
        }
    }
}
tslib_1.__decorate([
    (0, lib_1.hooks)([
        (0, actionExecutionMW_1.ActionExecutionMW)({
            enableProgressBar: true,
            progressTitle: messages_1.ProgressTitles.create,
            progressSteps: 1,
            componentName: constant_1.componentName,
            errorSource: constant_1.errorSource,
            enableTelemetry: true,
            telemetryEventName: telemetry_1.TelemetryEvent.GenerateTemplate,
        }),
    ]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, String, String, String, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], Generator, "generateTemplate", null);
tslib_1.__decorate([
    (0, lib_1.hooks)([
        (0, actionExecutionMW_1.ActionExecutionMW)({
            enableProgressBar: true,
            progressTitle: messages_1.ProgressTitles.create,
            progressSteps: 1,
            componentName: constant_1.componentName,
            errorSource: constant_1.errorSource,
            enableTelemetry: true,
            telemetryEventName: telemetry_1.TelemetryEvent.GenerateSample,
        }),
    ]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, String, String, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], Generator, "generateSample", null);
exports.Generator = Generator;
function templateDefaultOnActionError(action, context, error) {
    switch (action.name) {
        case generatorAction_1.GeneratorActionName.ScaffoldRemoteTemplate:
            context.fallback = true;
            context.logProvider.debug(error.message);
            context.logProvider.info(messages_1.LogMessages.getTemplateFromLocal);
            break;
        case generatorAction_1.GeneratorActionName.ScaffoldLocalTemplate:
            if (error instanceof componentError_1.BaseComponentInnerError) {
                return Promise.reject(error.toFxError());
            }
            else {
                context.logProvider.error(error.message);
                return Promise.reject(new error_1.ScaffoldLocalTemplateError(error).toFxError());
            }
        default:
            return Promise.reject(new Error(error.message));
    }
    return Promise.resolve();
}
exports.templateDefaultOnActionError = templateDefaultOnActionError;
async function sampleDefaultOnActionError(action, context, error) {
    context.logProvider.error(error.message);
    if (error instanceof componentError_1.BaseComponentInnerError)
        throw error.toFxError();
    if (await fs_extra_1.default.pathExists(context.destination)) {
        await fs_extra_1.default.remove(context.destination);
    }
    switch (action.name) {
        case generatorAction_1.GeneratorActionName.FetchSampleInfo:
            throw new error_1.FetchSampleInfoError(error).toFxError();
        case generatorAction_1.GeneratorActionName.DownloadDirectory:
            const url = (0, utils_1.convertToUrl)(context.sampleInfo);
            if ((0, utils_1.isApiLimitError)(error)) {
                throw new error_1.DownloadSampleApiLimitError(url, error).toFxError();
            }
            else {
                throw new error_1.DownloadSampleNetworkError(url, error).toFxError();
            }
        default:
            throw new Error(error.message);
    }
}
exports.sampleDefaultOnActionError = sampleDefaultOnActionError;
//# sourceMappingURL=generator.js.map