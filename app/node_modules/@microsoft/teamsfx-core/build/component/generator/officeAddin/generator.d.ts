import { Context, FxError, GeneratorResult, Inputs, Result } from "@microsoft/teamsfx-api";
import { ActionContext } from "../../middleware/actionExecutionMW";
import { DefaultTemplateGenerator } from "../templates/templateGenerator";
import { TemplateInfo } from "../templates/templateInfo";
/**
 * case 1: project-type=office-xml-addin-type AND addin-host=outlook
 * case 2: project-type=office-addin-type (addin-host=undefined)
 * case 3: project-type=outlook-addin-type (addin-host=undefined)
 */
export declare class OfficeAddinGenerator {
    static generate(context: Context, inputs: Inputs, destinationPath: string): Promise<Result<undefined, FxError>>;
    static childProcessExec(cmdLine: string): Promise<{
        stdout: string;
        stderr: string;
    }>;
    static doScaffolding(context: Context, inputs: Inputs, destinationPath: string): Promise<Result<undefined, FxError>>;
}
declare type OfficeHost = "Outlook" | "Word" | "Excel" | "PowerPoint";
export declare function getHost(addinManifestPath: string): Promise<OfficeHost>;
export declare class OfficeAddinGeneratorNew extends DefaultTemplateGenerator {
    componentName: string;
    activate(context: Context, inputs: Inputs): boolean;
    getTemplateInfos(context: Context, inputs: Inputs, destinationPath: string, actionContext?: ActionContext): Promise<Result<TemplateInfo[], FxError>>;
    post(context: Context, inputs: Inputs, destinationPath: string, actionContext?: ActionContext): Promise<Result<GeneratorResult, FxError>>;
}
export {};
//# sourceMappingURL=generator.d.ts.map