/// <reference types="node" />
import AdmZip from "adm-zip";
import { AxiosError } from "axios";
import { SampleConfig, SampleUrlInfo } from "../../common/samples";
export declare function getTemplateUrl(name: string, getLatestVersion: () => Promise<string>): Promise<string | undefined>;
export declare function getTemplateLatestVersion(tryLimits?: number, timeoutInMs?: number): Promise<string>;
export declare function getTemplateZipUrlByVersion(name: string, version: string): string;
export declare function fetchZipFromUrl(url: string, tryLimits?: number, timeoutInMs?: number): Promise<AdmZip>;
export declare function unzip(zip: AdmZip, dstPath: string, nameReplaceFn?: (filePath: string, data: Buffer) => string, dataReplaceFn?: (filePath: string, data: Buffer) => Buffer | string, filterFn?: (filePath: string) => boolean): Promise<string[]>;
export declare function renderTemplateFileData(fileName: string, fileData: Buffer, variables?: {
    [key: string]: string;
}): string | Buffer;
export declare function renderTemplateFileName(fileName: string, fileData: Buffer, variables?: {
    [key: string]: string;
}): string;
export declare function getSampleInfoFromName(sampleName: string): Promise<SampleConfig>;
export declare function zipFolder(folderPath: string): AdmZip;
export declare function downloadDirectory(sampleInfo: SampleUrlInfo, dstPath: string, concurrencyLimits?: number, retryLimits?: number): Promise<string[]>;
export declare function getSampleFileInfo(urlInfo: SampleUrlInfo, retryLimits: number): Promise<any>;
export declare function runWithLimitedConcurrency<T>(items: T[], callback: (arg: T) => any, concurrencyLimit: number): Promise<void>;
export declare function convertToLangKey(programmingLanguage: string): string;
export declare function convertToUrl(sampleInfo: SampleUrlInfo): string;
export declare function simplifyAxiosError(error: AxiosError): Error;
export declare function isApiLimitError(error: Error): boolean;
//# sourceMappingURL=utils.d.ts.map