"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTemplateReplaceMap = void 0;
const featureFlags_1 = require("../../../common/featureFlags");
const stringUtils_1 = require("../../../common/stringUtils");
const constants_1 = require("../../../question/constants");
const crypto_1 = require("../../../core/crypto");
function getTemplateReplaceMap(inputs) {
    var _a, _b, _c, _d, _e, _f;
    const appName = inputs[constants_1.QuestionNames.AppName];
    const safeProjectName = (_a = inputs[constants_1.QuestionNames.SafeProjectName]) !== null && _a !== void 0 ? _a : (0, stringUtils_1.convertToAlphanumericOnly)(appName);
    const targetFramework = inputs.targetFramework;
    const placeProjectFileInSolutionDir = inputs.placeProjectFileInSolutionDir === "true";
    const llmService = inputs[constants_1.QuestionNames.LLMService];
    let openAIKey = inputs[constants_1.QuestionNames.OpenAIKey];
    let azureOpenAIKey = inputs[constants_1.QuestionNames.AzureOpenAIKey];
    let azureAISearchApiKey = inputs[constants_1.QuestionNames.AzureAISearchApiKey];
    const azureOpenAIEndpoint = inputs[constants_1.QuestionNames.AzureOpenAIEndpoint];
    const azureOpenAIDeploymentName = inputs[constants_1.QuestionNames.AzureOpenAIDeploymentName];
    const azureAISearchEndpoint = inputs[constants_1.QuestionNames.AzureAISearchEndpoint];
    const openAIEmbeddingModel = inputs[constants_1.QuestionNames.OpenAIEmbeddingModel];
    const azureOpenAIEmbeddingDeploymentName = inputs[constants_1.QuestionNames.AzureOpenAIEmbeddingDeploymentName];
    if (inputs.projectId !== undefined && (openAIKey || azureOpenAIKey)) {
        const cryptoProvider = new crypto_1.LocalCrypto(inputs.projectId);
        if (openAIKey) {
            const result = cryptoProvider.encrypt(openAIKey);
            openAIKey = result.value;
        }
        if (azureOpenAIKey) {
            const result = cryptoProvider.encrypt(azureOpenAIKey);
            azureOpenAIKey = result.value;
        }
        if (azureAISearchApiKey) {
            const result = cryptoProvider.encrypt(azureAISearchApiKey);
            azureAISearchApiKey = result.value;
        }
    }
    return {
        appName: appName,
        ProjectName: appName,
        TargetFramework: targetFramework !== null && targetFramework !== void 0 ? targetFramework : "net8.0",
        PlaceProjectFileInSolutionDir: placeProjectFileInSolutionDir ? "true" : "",
        SafeProjectName: safeProjectName,
        SafeProjectNameLowerCase: safeProjectName.toLocaleLowerCase(),
        enableTestToolByDefault: featureFlags_1.featureFlagManager.getBooleanValue(featureFlags_1.FeatureFlags.TestTool)
            ? "true"
            : "",
        enableMETestToolByDefault: featureFlags_1.featureFlagManager.getBooleanValue(featureFlags_1.FeatureFlags.METestTool)
            ? "true"
            : "",
        useOpenAI: llmService === "llm-service-openai" ? "true" : "",
        useAzureOpenAI: llmService === "llm-service-azure-openai" ? "true" : "",
        openAIKey: openAIKey !== null && openAIKey !== void 0 ? openAIKey : "",
        originalOpenAIKey: (_b = inputs[constants_1.QuestionNames.OpenAIKey]) !== null && _b !== void 0 ? _b : "",
        azureOpenAIKey: azureOpenAIKey !== null && azureOpenAIKey !== void 0 ? azureOpenAIKey : "",
        originalAzureOpenAIKey: (_c = inputs[constants_1.QuestionNames.AzureOpenAIKey]) !== null && _c !== void 0 ? _c : "",
        azureAISearchApiKey: azureAISearchApiKey !== null && azureAISearchApiKey !== void 0 ? azureAISearchApiKey : "",
        originalAzureAISearchApiKey: (_d = inputs[constants_1.QuestionNames.AzureAISearchApiKey]) !== null && _d !== void 0 ? _d : "",
        azureOpenAIEndpoint: azureOpenAIEndpoint !== null && azureOpenAIEndpoint !== void 0 ? azureOpenAIEndpoint : "",
        azureOpenAIDeploymentName: azureOpenAIDeploymentName !== null && azureOpenAIDeploymentName !== void 0 ? azureOpenAIDeploymentName : "",
        azureOpenAIEmbeddingDeploymentName: azureOpenAIEmbeddingDeploymentName !== null && azureOpenAIEmbeddingDeploymentName !== void 0 ? azureOpenAIEmbeddingDeploymentName : "",
        azureAISearchEndpoint: azureAISearchEndpoint !== null && azureAISearchEndpoint !== void 0 ? azureAISearchEndpoint : "",
        openAIEmbeddingModel: openAIEmbeddingModel !== null && openAIEmbeddingModel !== void 0 ? openAIEmbeddingModel : "",
        isNewProjectTypeEnabled: featureFlags_1.featureFlagManager.getBooleanValue(featureFlags_1.FeatureFlags.NewProjectType)
            ? "true"
            : "",
        NewProjectTypeName: (_e = process.env.TEAMSFX_NEW_PROJECT_TYPE_NAME) !== null && _e !== void 0 ? _e : "TeamsApp",
        NewProjectTypeExt: (_f = process.env.TEAMSFX_NEW_PROJECT_TYPE_EXTENSION) !== null && _f !== void 0 ? _f : "ttkproj",
        CEAEnabled: featureFlags_1.featureFlagManager.getBooleanValue(featureFlags_1.FeatureFlags.CEAEnabled) ? "true" : "",
    };
}
exports.getTemplateReplaceMap = getTemplateReplaceMap;
//# sourceMappingURL=templateReplaceMap.js.map