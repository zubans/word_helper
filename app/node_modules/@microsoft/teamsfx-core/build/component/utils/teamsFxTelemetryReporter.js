"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.TeamsFxTelemetryReporter = void 0;
const lodash_1 = require("lodash");
const telemetry_1 = require("../../common/telemetry");
class TeamsFxTelemetryReporter {
    constructor(telemetryReporter, defaultConfig) {
        this.telemetryReporter = telemetryReporter;
        this.defaultConfig = defaultConfig;
    }
    // Will auto append `-start` to eventName
    sendStartEvent(config) {
        try {
            const actualConfig = this.mergeConfig(config, this.defaultConfig);
            if (actualConfig.componentName) {
                actualConfig.properties = Object.assign({ [telemetry_1.TelemetryProperty.Component]: actualConfig.componentName }, actualConfig.properties);
            }
            this.telemetryReporter.sendTelemetryEvent(actualConfig.eventName + telemetry_1.TelemetryConstants.eventPrefix, actualConfig.properties, actualConfig.measurements);
        }
        catch (_a) {
            // ignore errors in telemetry reporter
        }
    }
    // If error is undefined, then treat operation as success. Otherwise treat operation as failed.
    sendEndEvent(config, error) {
        try {
            const actualConfig = this.mergeConfig(config, this.defaultConfig);
            if (actualConfig.componentName) {
                actualConfig.properties = Object.assign({ [telemetry_1.TelemetryProperty.Component]: actualConfig.componentName }, actualConfig.properties);
            }
            if (error) {
                // sendTelemetryErrorEvent
                actualConfig.properties = actualConfig.properties || {};
                telemetry_1.telemetryUtils.fillInErrorProperties(actualConfig.properties, error);
                if (!actualConfig.errorProps) {
                    actualConfig.errorProps = [];
                }
                actualConfig.errorProps = actualConfig.errorProps.concat([telemetry_1.TelemetryProperty.ErrorMessage]);
                this.telemetryReporter.sendTelemetryErrorEvent(actualConfig.eventName, actualConfig.properties, actualConfig.measurements, actualConfig.errorProps);
            }
            else {
                // sendTelemetryEvent
                actualConfig.properties = Object.assign({ [telemetry_1.TelemetryProperty.Success]: telemetry_1.TelemetrySuccess.Yes }, actualConfig.properties);
                this.telemetryReporter.sendTelemetryEvent(actualConfig.eventName, actualConfig.properties, actualConfig.measurements);
            }
        }
        catch (_a) {
            // ignore errors in telemetry reporter
        }
    }
    mergeConfig(config, defaultConfig) {
        const result = (0, lodash_1.cloneDeep)(config);
        if (defaultConfig) {
            if (defaultConfig.baseEventName) {
                result.eventName = defaultConfig.baseEventName + result.eventName;
            }
            if (!result.componentName && defaultConfig.componentName) {
                result.componentName = defaultConfig.componentName;
            }
        }
        return result;
    }
}
exports.TeamsFxTelemetryReporter = TeamsFxTelemetryReporter;
//# sourceMappingURL=teamsFxTelemetryReporter.js.map