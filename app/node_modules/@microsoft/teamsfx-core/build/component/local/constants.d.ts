export declare class FolderName {
    static readonly Frontend = "tabs";
    static readonly Bot = "bot";
    static readonly Function = "api";
    static readonly SPFx = "SPFx";
    static readonly VideoFilter = "app";
}
export declare const baseNpmInstallCommand = "npm install";
export declare const defaultNpmInstallArg = "--no-audit";
export declare const npmInstallCommand: string;
export declare const LocalEnvAuthKeys: Readonly<{
    ClientId: "AUTH_CLIENT_ID";
    ClientSecret: "AUTH_CLIENT_SECRET";
    IdentifierUri: "AUTH_IDENTIFIER_URI";
    AadMetadataAddress: "AUTH_AAD_METADATA_ADDRESS";
    OauthAuthority: "AUTH_OAUTH_AUTHORITY";
    TabEndpoint: "AUTH_TAB_APP_ENDPOINT";
    AllowedAppIds: "AUTH_ALLOWED_APP_IDS";
    Urls: "AUTH_urls";
    ServicePath: "AUTH_SERVICE_PATH";
}>;
export declare const LocalEnvBackendKeys: Readonly<{
    WebJobsStorage: "BACKEND_AzureWebJobsStorage";
    FuncWorkerRuntime: "BACKEND_FUNCTIONS_WORKER_RUNTIME";
    AuthorityHost: "BACKEND_M365_AUTHORITY_HOST";
    TenantId: "BACKEND_M365_TENANT_ID";
    ClientId: "BACKEND_M365_CLIENT_ID";
    ClientSecret: "BACKEND_M365_CLIENT_SECRET";
    SqlEndpoint: "BACKEND_SQL_ENDPOINT";
    SqlDbName: "BACKEND_SQL_DATABASE_NAME";
    SqlUserName: "BACKEND_SQL_USER_NAME";
    SqlPassword: "BACKEND_SQL_PASSWORD";
    IdentityId: "BACKEND_IDENTITY_ID";
    ApiEndpoint: "BACKEND_API_ENDPOINT";
    ApplicationIdUri: "BACKEND_M365_APPLICATION_ID_URI";
    AllowedAppIds: "BACKEND_ALLOWED_APP_IDS";
}>;
export declare const LocalEnvBotKeys: Readonly<{
    BotId: "BOT_BOT_ID";
    BotPassword: "BOT_BOT_PASSWORD";
    ClientId: "BOT_M365_CLIENT_ID";
    ClientSecret: "BOT_M365_CLIENT_SECRET";
    TenantID: "BOT_M365_TENANT_ID";
    OauthAuthority: "BOT_M365_AUTHORITY_HOST";
    LoginEndpoint: "BOT_INITIATE_LOGIN_ENDPOINT";
    SqlEndpoint: "BOT_SQL_ENDPOINT";
    SqlDbName: "BOT_SQL_DATABASE_NAME";
    SqlUserName: "BOT_SQL_USER_NAME";
    SqlPassword: "BOT_SQL_PASSWORD";
    IdentityId: "BOT_IDENTITY_ID";
    ApiEndpoint: "BOT_API_ENDPOINT";
    ApplicationIdUri: "BOT_M365_APPLICATION_ID_URI";
}>;
export declare const LocalEnvCertKeys: Readonly<{
    SslCrtFile: "FRONTEND_SSL_CRT_FILE";
    SslKeyFile: "FRONTEND_SSL_KEY_FILE";
}>;
export declare const LocalEnvFrontendKeys: Readonly<{
    Browser: "FRONTEND_BROWSER";
    Https: "FRONTEND_HTTPS";
    Port: "FRONTEND_PORT";
    TeamsFxEndpoint: "FRONTEND_REACT_APP_TEAMSFX_ENDPOINT";
    LoginUrl: "FRONTEND_REACT_APP_START_LOGIN_PAGE_URL";
    FuncEndpoint: "FRONTEND_REACT_APP_FUNC_ENDPOINT";
    FuncName: "FRONTEND_REACT_APP_FUNC_NAME";
    ClientId: "FRONTEND_REACT_APP_CLIENT_ID";
}>;
export declare class LocalDebugCertificate {
    static readonly CertFileName: string;
    static readonly KeyFileName: string;
    static readonly FriendlyName: string;
}
export declare const BotHostTypeName = "host-type";
export declare const BotHostTypes: Readonly<{
    AppService: "app-service";
    AzureFunctions: "azure-functions";
}>;
export declare const BotCapabilities = "capabilities";
export declare const TaskCommand: Readonly<{
    checkPrerequisites: "debug-check-prerequisites";
    npmInstall: "debug-npm-install";
    startLocalTunnel: "debug-start-local-tunnel";
    setUpTab: "debug-set-up-tab";
    setUpBot: "debug-set-up-bot";
    setUpSSO: "debug-set-up-sso";
    prepareManifest: "debug-prepare-manifest";
    launchWebClient: "launch-web-client";
    provision: "provision";
    deploy: "deploy";
    migrate: "migrate";
    launchDesktopClient: "launch-desktop-client";
}>;
export declare const TeamsFxNpmCommands: Readonly<{
    startApplication: "npm run dev:teamsfx";
    startApplicationForTestTool: "npm run dev:teamsfx:testtool";
    startTestTool: "npm run dev:teamsfx:launch-testtool";
}>;
export declare const TaskOverallLabel: Readonly<{
    NextDefault: "Pre Debug Check & Start All";
    NextM365: "Pre Debug Check & Start All & Install App";
    NextSPFx: "prepare dev env";
    TransparentDefault: "Start Teams App Locally";
    TransparentM365: "Start Teams App Locally & Install App";
    TestToolDefault: "Start Teams App (Test Tool)";
}>;
export declare const TaskLabel: Readonly<{
    PrerequisiteCheck: "Validate & install prerequisites";
    PrerequisiteCheckV3: "Validate prerequisites";
    PrerequisiteCheckV3TestTool: "Validate prerequisites (Test Tool)";
    InstallNpmPackages: "Install npm packages";
    StartLocalTunnel: "Start local tunnel";
    SetUpTab: "Set up tab";
    SetUpBot: "Set up bot";
    SetUpSSO: "Set up SSO";
    PrepareManifest: "Build & upload Teams manifest";
    InstallAzureFuncBindingExt: "Install Azure Functions binding extensions";
    StartServices: "Start services";
    StartApplication: "Start application";
    StartApplicationTestTool: "Start application for Test Tool";
    StartTestTool: "Start Test Tool";
    StartFrontend: "Start frontend";
    StartBackend: "Start backend";
    WatchBackend: "Watch backend";
    WatchBot: "Watch bot";
    StartBot: "Start bot";
    StartAzuriteEmulator: "Start Azurite emulator";
    InstallAppInTeams: "Install app in Teams";
    GulpTrustDevCert: "gulp trust-dev-cert";
    GulpServe: "gulp serve";
    Provision: "Provision";
    Deploy: "Deploy";
    DeployTestTool: "Deploy (Test Tool)";
}>;
export declare const TaskDefaultValue: Readonly<{
    checkPrerequisites: {
        ports: {
            tabService: number;
            backendService: number;
            backendDebug: number;
            botService: number;
            botDebug: number;
            spfxService: number;
        };
    };
    npmInstall: {
        npmInstallArgs: string[];
    };
    startLocalTunnel: {
        ngrokArgs: string;
        ngrokPath: string;
        writeToEnvironmentFile: {
            endpoint: string;
            domain: string;
        };
        devTunnel: {
            bot: {
                port: number;
                protocol: string;
                access: string;
            };
        };
    };
    setUpTab: {
        baseUrl: string;
    };
    setUpBot: {
        botMessagingEndpoint: string;
    };
    env: "local";
}>;
export declare const Prerequisite: Readonly<{
    nodejs: "nodejs";
    m365Account: "m365Account";
    copilotAccess: "copilotAccess";
    devCert: "devCert";
    func: "func";
    ngrok: "ngrok";
    dotnet: "dotnet";
    portOccupancy: "portOccupancy";
    vxTestApp: "vxTestApp";
}>;
export declare const TunnelType: Readonly<{
    devTunnel: "dev-tunnel";
    ngrok: "ngrok";
}>;
//# sourceMappingURL=constants.d.ts.map