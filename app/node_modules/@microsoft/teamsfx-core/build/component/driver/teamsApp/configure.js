"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigureTeamsAppDriver = exports.internalOutputNames = exports.actionName = void 0;
const tslib_1 = require("tslib");
const lib_1 = require("@feathersjs/hooks/lib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const lodash_1 = require("lodash");
const typedi_1 = require("typedi");
const isUUID_1 = tslib_1.__importDefault(require("validator/lib/isUUID"));
const teamsDevPortalClient_1 = require("../../../client/teamsDevPortalClient");
const constants_1 = require("../../../common/constants");
const localizeUtils_1 = require("../../../common/localizeUtils");
const common_1 = require("../../../error/common");
const common_2 = require("../../utils/common");
const addStartAndEndTelemetry_1 = require("../middleware/addStartAndEndTelemetry");
const wrapUtil_1 = require("../util/wrapUtil");
const errors_1 = require("./errors");
const results_1 = require("./results");
const ManifestUtils_1 = require("./utils/ManifestUtils");
exports.actionName = "teamsApp/update";
exports.internalOutputNames = {
    teamsAppUpdateTime: "TEAMS_APP_UPDATE_TIME",
    teamsAppTenantId: "TEAMS_APP_TENANT_ID",
};
let ConfigureTeamsAppDriver = class ConfigureTeamsAppDriver {
    constructor() {
        this.description = (0, localizeUtils_1.getLocalizedString)("driver.teamsApp.description.updateDriver");
        this.progressTitle = (0, localizeUtils_1.getLocalizedString)("driver.teamsApp.progressBar.updateTeamsAppStepMessage");
    }
    async execute(args, context, outputEnvVarNames) {
        const wrapContext = new wrapUtil_1.WrapDriverContext(context, exports.actionName, exports.actionName);
        const res = await this.update(args, wrapContext, outputEnvVarNames);
        return {
            result: res,
            summaries: wrapContext.summaries,
        };
    }
    async update(args, context, outputEnvVarNames) {
        const result = this.validateArgs(args);
        if (result.isErr()) {
            return (0, teamsfx_api_1.err)(result.error);
        }
        const appStudioTokenRes = await context.m365TokenProvider.getAccessToken({
            scopes: constants_1.AppStudioScopes,
        });
        if (appStudioTokenRes.isErr()) {
            return (0, teamsfx_api_1.err)(appStudioTokenRes.error);
        }
        const appStudioToken = appStudioTokenRes.value;
        const appPackagePath = (0, common_2.getAbsolutePath)(args.appPackagePath, context.projectPath);
        if (!(await fs_extra_1.default.pathExists(appPackagePath))) {
            return (0, teamsfx_api_1.err)(new common_1.FileNotFoundError(exports.actionName, appPackagePath, "https://aka.ms/teamsfx-actions/teamsapp-update"));
        }
        const archivedFile = await fs_extra_1.default.readFile(appPackagePath);
        // Add capabilities to telemetry properties
        const manifest = ManifestUtils_1.manifestUtils.extractManifestFromArchivedFile(archivedFile);
        if (manifest.isErr()) {
            return (0, teamsfx_api_1.err)(manifest.error);
        }
        const manifestTelemetries = teamsfx_api_1.ManifestUtil.parseCommonTelemetryProperties(manifest.value);
        (0, lodash_1.merge)(context.telemetryProperties, manifestTelemetries);
        // Fail if Teams app not exists, as this action only update the Teams app, not create
        // See work item 17187087
        const teamsAppId = manifest.value.id;
        if (!(0, isUUID_1.default)(teamsAppId)) {
            return (0, teamsfx_api_1.err)(results_1.AppStudioResultFactory.UserError(errors_1.AppStudioError.InvalidTeamsAppIdError.name, errors_1.AppStudioError.InvalidTeamsAppIdError.message(teamsAppId), "https://aka.ms/teamsfx-actions/teamsapp-update"));
        }
        try {
            await teamsDevPortalClient_1.teamsDevPortalClient.getApp(appStudioToken, teamsAppId);
        }
        catch (error) {
            return (0, teamsfx_api_1.err)(results_1.AppStudioResultFactory.UserError(errors_1.AppStudioError.TeamsAppNotExistsError.name, errors_1.AppStudioError.TeamsAppNotExistsError.message(teamsAppId), "https://aka.ms/teamsfx-actions/teamsapp-update"));
        }
        try {
            let message = (0, localizeUtils_1.getLocalizedString)("driver.teamsApp.progressBar.updateTeamsAppStepMessage");
            const appDefinition = await teamsDevPortalClient_1.teamsDevPortalClient.importApp(appStudioToken, archivedFile, true);
            message = (0, localizeUtils_1.getLocalizedString)("plugins.appstudio.teamsAppUpdatedLog", appDefinition.teamsAppId);
            context.logProvider.verbose(message);
            context.addSummary(message);
            return (0, teamsfx_api_1.ok)(new Map([
                [exports.internalOutputNames.teamsAppTenantId, appDefinition.tenantId],
                [exports.internalOutputNames.teamsAppUpdateTime, appDefinition.updatedAt],
            ]));
        }
        catch (e) {
            return (0, teamsfx_api_1.err)(results_1.AppStudioResultFactory.SystemError(errors_1.AppStudioError.TeamsAppUpdateFailedError.name, errors_1.AppStudioError.TeamsAppUpdateFailedError.message(teamsAppId, e), "https://aka.ms/teamsfx-actions/teamsapp-update"));
        }
    }
    validateArgs(args) {
        const invalidParams = [];
        if (!args || !args.appPackagePath) {
            invalidParams.push("appPackagePath");
        }
        if (invalidParams.length > 0) {
            return (0, teamsfx_api_1.err)(new common_1.InvalidActionInputError(exports.actionName, invalidParams, "https://aka.ms/teamsfx-actions/teamsapp-update"));
        }
        else {
            return (0, teamsfx_api_1.ok)(undefined);
        }
    }
};
tslib_1.__decorate([
    (0, lib_1.hooks)([(0, addStartAndEndTelemetry_1.addStartAndEndTelemetry)(exports.actionName, exports.actionName)]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, wrapUtil_1.WrapDriverContext,
        Map]),
    tslib_1.__metadata("design:returntype", Promise)
], ConfigureTeamsAppDriver.prototype, "update", null);
ConfigureTeamsAppDriver = tslib_1.__decorate([
    (0, typedi_1.Service)(exports.actionName)
], ConfigureTeamsAppDriver);
exports.ConfigureTeamsAppDriver = ConfigureTeamsAppDriver;
//# sourceMappingURL=configure.js.map