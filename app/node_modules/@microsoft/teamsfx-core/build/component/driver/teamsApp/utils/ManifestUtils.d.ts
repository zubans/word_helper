/// <reference types="node" />
import { FxError, InputsWithProjectPath, ManifestCapability, Result, TeamsAppManifest } from "@microsoft/teamsfx-api";
import "reflect-metadata";
import { DriverContext } from "../../interface/commonArgs";
export declare class ManifestUtils {
    readAppManifest(projectPath: string): Promise<Result<TeamsAppManifest, FxError>>;
    readAppManifestSync(projectPath: string): Result<TeamsAppManifest, FxError>;
    _readAppManifest(manifestTemplatePath: string): Promise<Result<TeamsAppManifest, FxError>>;
    _writeAppManifest(appManifest: TeamsAppManifest, manifestTemplatePath: string): Promise<Result<undefined, FxError>>;
    getTeamsAppManifestPath(projectPath: string): string;
    addCapabilities(inputs: InputsWithProjectPath, capabilities: ManifestCapability[], isM365?: boolean): Promise<Result<undefined, FxError>>;
    _capabilityExceedLimit(manifest: TeamsAppManifest, capability: "staticTab" | "configurableTab" | "Bot" | "MessageExtension" | "WebApplicationInfo"): boolean;
    getCapabilities(template: TeamsAppManifest): string[];
    /**
     * Get command id from composeExtensions
     * @param manifest
     */
    getOperationIds(manifest: TeamsAppManifest): string[];
    getPluginFilePath(manifest: TeamsAppManifest, manifestPath: string): Promise<Result<string, FxError>>;
    getManifestV3(manifestTemplatePath: string, context: DriverContext, generateIdIfNotResolved?: boolean): Promise<Result<TeamsAppManifest, FxError>>;
    extractManifestFromArchivedFile(archivedFile: Buffer): Result<TeamsAppManifest, FxError>;
    /**
     * trim the short name in manifest to make sure it is no more than 25 length
     */
    trimManifestShortName(projectPath: string, maxLength?: number): Promise<Result<undefined, FxError>>;
}
export declare const manifestUtils: ManifestUtils;
//# sourceMappingURL=ManifestUtils.d.ts.map