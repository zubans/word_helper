"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateBotAadAppDriver = void 0;
const tslib_1 = require("tslib");
const lib_1 = require("@feathersjs/hooks/lib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const axios_1 = tslib_1.__importDefault(require("axios"));
const perf_hooks_1 = require("perf_hooks");
const typedi_1 = require("typedi");
const localizeUtils_1 = require("../../../common/localizeUtils");
const common_1 = require("../../../error/common");
const common_2 = require("../../utils/common");
const aadAppNameTooLongError_1 = require("../aad/error/aadAppNameTooLongError");
const signInAudience_1 = require("../aad/interface/signInAudience");
const aadAppClient_1 = require("../aad/utility/aadAppClient");
const outputEnvironmentVariableUndefinedError_1 = require("../error/outputEnvironmentVariableUndefinedError");
const addStartAndEndTelemetry_1 = require("../middleware/addStartAndEndTelemetry");
const utils_1 = require("../util/utils");
const unexpectedEmptyBotPasswordError_1 = require("./error/unexpectedEmptyBotPasswordError");
const constants_1 = require("./utility/constants");
const constants_2 = require("../../../common/constants");
const globalVars_1 = require("../../../common/globalVars");
const missingServiceManagamentReferenceError_1 = require("../aad/error/missingServiceManagamentReferenceError");
const actionName = "botAadApp/create"; // DO NOT MODIFY the name
const helpLink = "https://aka.ms/teamsfx-actions/botaadapp-create";
const successRegisterBotAad = `${actionName}/success`;
const propertyKeys = {
    reusingExistingBotAad: "reuse-existing-bot-aad",
    registerBotAadTime: "register-bot-aad-time",
};
let CreateBotAadAppDriver = class CreateBotAadAppDriver {
    constructor() {
        this.description = (0, localizeUtils_1.getLocalizedString)("driver.botAadApp.create.description");
        this.progressTitle = (0, localizeUtils_1.getLocalizedString)(constants_1.progressBarKeys.creatingBotAadApp);
    }
    async run(args, context) {
        return (0, common_2.wrapRun)(async () => {
            const result = await this.handler(args, context);
            return result.output;
        }, actionName);
    }
    async execute(args, ctx, outputEnvVarNames) {
        let summaries = [];
        const outputResult = await (0, common_2.wrapRun)(async () => {
            const result = await this.handler(args, ctx, outputEnvVarNames);
            summaries = result.summaries;
            return result.output;
        }, actionName);
        return {
            result: outputResult,
            summaries,
        };
    }
    async handler(args, context, outputEnvVarNames) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        try {
            (_a = context.logProvider) === null || _a === void 0 ? void 0 : _a.info((0, localizeUtils_1.getLocalizedString)(constants_1.logMessageKeys.startExecuteDriver, actionName));
            this.validateArgs(args);
            if (!outputEnvVarNames) {
                throw new outputEnvironmentVariableUndefinedError_1.OutputEnvironmentVariableUndefinedError(actionName);
            }
            const aadAppClient = new aadAppClient_1.AadAppClient(context.m365TokenProvider, context.logProvider);
            const botAadAppState = (0, utils_1.loadStateFromEnv)(outputEnvVarNames);
            const isReusingExisting = !(!botAadAppState.botId || !botAadAppState.botPassword);
            // If it's the case of a valid bot id with an empty bot password, then throw an error
            if (botAadAppState.botId && !botAadAppState.botPassword) {
                throw new unexpectedEmptyBotPasswordError_1.UnexpectedEmptyBotPasswordError(actionName, helpLink);
            }
            const tokenJson = await context.m365TokenProvider.getJsonObject({ scopes: constants_2.GraphScopes });
            const isMsftAccount = tokenJson.isOk() &&
                tokenJson.value.unique_name &&
                tokenJson.value.unique_name.endsWith("@microsoft.com");
            const startTime = perf_hooks_1.performance.now();
            if (!botAadAppState.botId) {
                (_b = context.logProvider) === null || _b === void 0 ? void 0 : _b.info((0, localizeUtils_1.getLocalizedString)(constants_1.logMessageKeys.startCreateBotAadApp));
                // This hidden environment variable is for internal use only.
                const serviceManagementReference = process.env.TTK_DEFAULT_SERVICE_MANAGEMENT_REFERENCE;
                if (isMsftAccount && !serviceManagementReference) {
                    throw new missingServiceManagamentReferenceError_1.MissingServiceManagementReferenceError(actionName);
                }
                const aadApp = await aadAppClient.createAadApp(args.name, signInAudience_1.SignInAudience.AzureADMultipleOrgs, serviceManagementReference);
                botAadAppState.botId = aadApp.appId;
                globalVars_1.AadSet.add(aadApp.appId);
                botAadAppState.botPassword = await aadAppClient.generateClientSecret(aadApp.id);
                (_c = context.logProvider) === null || _c === void 0 ? void 0 : _c.info((0, localizeUtils_1.getLocalizedString)(constants_1.logMessageKeys.successCreateBotAadApp));
            }
            else {
                (_d = context.logProvider) === null || _d === void 0 ? void 0 : _d.info((0, localizeUtils_1.getLocalizedString)(constants_1.logMessageKeys.skipCreateBotAadApp));
            }
            const durationMilliSeconds = perf_hooks_1.performance.now() - startTime;
            const outputs = (0, utils_1.mapStateToEnv)(botAadAppState, outputEnvVarNames);
            let successCreateBotAadLog = (0, localizeUtils_1.getLocalizedString)(constants_1.logMessageKeys.successCreateBotAad, botAadAppState.botId);
            if (isMsftAccount) {
                successCreateBotAadLog += (0, localizeUtils_1.getLocalizedString)(constants_1.logMessageKeys.deleteAadAfterDebugging);
            }
            const useExistingBotAadLog = (0, localizeUtils_1.getLocalizedString)(constants_1.logMessageKeys.useExistingBotAad, botAadAppState.botId);
            const summary = isReusingExisting ? useExistingBotAadLog : successCreateBotAadLog;
            (_e = context.logProvider) === null || _e === void 0 ? void 0 : _e.info(summary);
            (_f = context.logProvider) === null || _f === void 0 ? void 0 : _f.info((0, localizeUtils_1.getLocalizedString)(constants_1.logMessageKeys.successExecuteDriver, actionName));
            context.telemetryReporter.sendTelemetryEvent(successRegisterBotAad, {
                [propertyKeys.reusingExistingBotAad]: isReusingExisting.toString(),
                [propertyKeys.registerBotAadTime]: durationMilliSeconds.toString(),
            });
            return {
                output: outputs,
                summaries: [summary],
            };
        }
        catch (error) {
            if (error instanceof teamsfx_api_1.UserError || error instanceof teamsfx_api_1.SystemError) {
                (_g = context.logProvider) === null || _g === void 0 ? void 0 : _g.error((0, localizeUtils_1.getLocalizedString)(constants_1.logMessageKeys.failExecuteDriver, actionName, error.displayMessage));
                throw error;
            }
            if (axios_1.default.isAxiosError(error)) {
                const message = JSON.stringify((_h = error.response) === null || _h === void 0 ? void 0 : _h.data);
                (_j = context.logProvider) === null || _j === void 0 ? void 0 : _j.error((0, localizeUtils_1.getLocalizedString)(constants_1.logMessageKeys.failExecuteDriver, actionName, message));
                if (error.response.status >= 400 && error.response.status < 500) {
                    throw new common_1.HttpClientError(error, actionName, message, helpLink);
                }
                else {
                    throw new common_1.HttpServerError(error, actionName, message);
                }
            }
            if (error.name === "AadCreateAppError") {
                throw (0, common_1.assembleError)(error, actionName);
            }
            const message = JSON.stringify(error);
            (_k = context.logProvider) === null || _k === void 0 ? void 0 : _k.error((0, localizeUtils_1.getLocalizedString)(constants_1.logMessageKeys.failExecuteDriver, actionName, message));
            throw (0, common_1.assembleError)(error, actionName);
        }
    }
    validateArgs(args) {
        const invalidParameters = [];
        if (typeof args.name !== "string" || !args.name) {
            invalidParameters.push("name");
        }
        if (invalidParameters.length > 0) {
            throw new common_1.InvalidActionInputError(actionName, invalidParameters, helpLink);
        }
        if (args.name.length > 120) {
            throw new aadAppNameTooLongError_1.AadAppNameTooLongError(actionName);
        }
    }
};
tslib_1.__decorate([
    (0, lib_1.hooks)([(0, addStartAndEndTelemetry_1.addStartAndEndTelemetry)(actionName, actionName)]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], CreateBotAadAppDriver.prototype, "run", null);
tslib_1.__decorate([
    (0, lib_1.hooks)([(0, addStartAndEndTelemetry_1.addStartAndEndTelemetry)(actionName, actionName)]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, Map]),
    tslib_1.__metadata("design:returntype", Promise)
], CreateBotAadAppDriver.prototype, "execute", null);
CreateBotAadAppDriver = tslib_1.__decorate([
    (0, typedi_1.Service)(actionName) // DO NOT MODIFY the service name
], CreateBotAadAppDriver);
exports.CreateBotAadAppDriver = CreateBotAadAppDriver;
//# sourceMappingURL=create.js.map