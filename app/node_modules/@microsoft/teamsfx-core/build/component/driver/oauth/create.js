"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateOauthDriver = void 0;
const tslib_1 = require("tslib");
const hooks_1 = require("@feathersjs/hooks");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const typedi_1 = require("typedi");
const teamsDevPortalClient_1 = require("../../../client/teamsDevPortalClient");
const constants_1 = require("../../../common/constants");
const localizeUtils_1 = require("../../../common/localizeUtils");
const common_1 = require("../../../error/common");
const constants_2 = require("../../../question/constants");
const questionMW_1 = require("../../middleware/questionMW");
const outputEnvironmentVariableUndefinedError_1 = require("../error/outputEnvironmentVariableUndefinedError");
const addStartAndEndTelemetry_1 = require("../middleware/addStartAndEndTelemetry");
const OauthRegistration_1 = require("../teamsApp/interfaces/OauthRegistration");
const utils_1 = require("../util/utils");
const oauthNameTooLong_1 = require("./error/oauthNameTooLong");
const createOauthOutputs_1 = require("./interface/createOauthOutputs");
const constants_3 = require("./utility/constants");
const utility_1 = require("./utility/utility");
const oauthIdentityProviderInvalid_1 = require("./error/oauthIdentityProviderInvalid");
const actionName = "oauth/register"; // DO NOT MODIFY the name
const helpLink = "https://aka.ms/teamsfx-actions/oauth-register";
const supportedFlows = ["authorizationCode"];
let CreateOauthDriver = class CreateOauthDriver {
    constructor() {
        this.description = (0, localizeUtils_1.getLocalizedString)("driver.oauth.description.create");
        this.progressTitle = (0, localizeUtils_1.getLocalizedString)("driver.oauth.title.create");
    }
    async execute(args, context, outputEnvVarNames) {
        var _a, _b, _c, _d, _e, _f;
        const summaries = [];
        const outputs = new Map();
        try {
            (_a = context.logProvider) === null || _a === void 0 ? void 0 : _a.info((0, localizeUtils_1.getLocalizedString)(constants_3.logMessageKeys.startExecuteDriver, actionName));
            if (!outputEnvVarNames) {
                throw new outputEnvironmentVariableUndefinedError_1.OutputEnvironmentVariableUndefinedError(actionName);
            }
            const state = (0, utils_1.loadStateFromEnv)(outputEnvVarNames);
            const appStudioTokenRes = await context.m365TokenProvider.getAccessToken({
                scopes: constants_1.AppStudioScopes,
            });
            if (appStudioTokenRes.isErr()) {
                throw appStudioTokenRes.error;
            }
            const appStudioToken = appStudioTokenRes.value;
            if (state && state.configurationId) {
                try {
                    await teamsDevPortalClient_1.teamsDevPortalClient.getOauthRegistrationById(appStudioToken, state.configurationId);
                    (_b = context.logProvider) === null || _b === void 0 ? void 0 : _b.info((0, localizeUtils_1.getLocalizedString)(constants_3.logMessageKeys.skipCreateOauth, outputEnvVarNames.get(createOauthOutputs_1.OutputKeys.configurationId)));
                }
                catch (error) {
                    (_c = context.logProvider) === null || _c === void 0 ? void 0 : _c.warning((0, localizeUtils_1.getLocalizedString)(constants_3.logMessageKeys.oauthNotFound, outputEnvVarNames.get(createOauthOutputs_1.OutputKeys.configurationId)));
                }
            }
            else {
                const clientId = process.env[constants_2.QuestionNames.OauthClientId];
                if (clientId) {
                    args.clientId = clientId;
                }
                const clientSecret = process.env[constants_2.QuestionNames.OauthClientSecret];
                if (clientSecret && !args.isPKCEEnabled && args.identityProvider !== "MicrosoftEntra") {
                    args.clientSecret = clientSecret;
                }
                this.validateArgs(args);
                const authInfo = await (0, utility_1.getandValidateOauthInfoFromSpec)(args, context, actionName);
                if (args.identityProvider === "MicrosoftEntra") {
                    if (!authInfo.authorizationEndpoint.includes("microsoftonline")) {
                        throw new oauthIdentityProviderInvalid_1.OauthIdentityProviderInvalid(actionName);
                    }
                }
                const oauthRegistration = await this.mapArgsToOauthRegistration(context.m365TokenProvider, args, authInfo);
                const oauthRegistrationRes = await teamsDevPortalClient_1.teamsDevPortalClient.createOauthRegistration(appStudioToken, oauthRegistration);
                outputs.set(outputEnvVarNames.get(createOauthOutputs_1.OutputKeys.configurationId), oauthRegistrationRes.configurationRegistrationId.oAuthConfigId);
                if (args.identityProvider === "MicrosoftEntra" &&
                    outputEnvVarNames.get(createOauthOutputs_1.OutputKeys.applicationIdUri)) {
                    outputs.set(outputEnvVarNames.get(createOauthOutputs_1.OutputKeys.applicationIdUri), oauthRegistrationRes.resourceIdentifierUri);
                }
                const summary = (0, localizeUtils_1.getLocalizedString)(constants_3.logMessageKeys.successCreateOauth, oauthRegistrationRes.configurationRegistrationId.oAuthConfigId);
                (_d = context.logProvider) === null || _d === void 0 ? void 0 : _d.info(summary);
                summaries.push(summary);
            }
            return {
                result: (0, teamsfx_api_1.ok)(outputs),
                summaries: summaries,
            };
        }
        catch (error) {
            if (error instanceof teamsfx_api_1.UserError || error instanceof teamsfx_api_1.SystemError) {
                (_e = context.logProvider) === null || _e === void 0 ? void 0 : _e.error((0, localizeUtils_1.getLocalizedString)(constants_3.logMessageKeys.failedExecuteDriver, actionName, error.displayMessage));
                return {
                    result: (0, teamsfx_api_1.err)(error),
                    summaries: summaries,
                };
            }
            const message = JSON.stringify(error);
            (_f = context.logProvider) === null || _f === void 0 ? void 0 : _f.error((0, localizeUtils_1.getLocalizedString)(constants_3.logMessageKeys.failedExecuteDriver, actionName, message));
            return {
                result: (0, teamsfx_api_1.err)((0, common_1.assembleError)(error, actionName)),
                summaries: summaries,
            };
        }
    }
    validateArgs(args) {
        const invalidParameters = [];
        if (typeof args.name !== "string" || !args.name) {
            invalidParameters.push("name");
        }
        if (args.name.length > 128) {
            throw new oauthNameTooLong_1.OauthNameTooLongError(actionName);
        }
        if (typeof args.appId !== "string" || !args.appId) {
            invalidParameters.push("appId");
        }
        if (typeof args.apiSpecPath !== "string" || !args.apiSpecPath) {
            invalidParameters.push("apiSpecPath");
        }
        if (args.applicableToApps &&
            args.applicableToApps !== OauthRegistration_1.OauthRegistrationAppType.AnyApp &&
            args.applicableToApps !== OauthRegistration_1.OauthRegistrationAppType.SpecificApp) {
            invalidParameters.push("applicableToApps");
        }
        if (args.targetAudience &&
            args.targetAudience !== OauthRegistration_1.OauthRegistrationTargetAudience.AnyTenant &&
            args.targetAudience !== OauthRegistration_1.OauthRegistrationTargetAudience.HomeTenant) {
            invalidParameters.push("targetAudience");
        }
        if (typeof args.flow !== "string" || !args.flow || !supportedFlows.includes(args.flow)) {
            invalidParameters.push("flow");
        }
        if (typeof args.clientId !== "string" || !args.clientId) {
            invalidParameters.push("clientId");
        }
        if (args.isPKCEEnabled && typeof args.isPKCEEnabled !== "boolean") {
            invalidParameters.push("isPKCEEnabled");
        }
        if (args.identityProvider &&
            (typeof args.identityProvider !== "string" ||
                (args.identityProvider !== "Custom" && args.identityProvider !== "MicrosoftEntra"))) {
            invalidParameters.push("identityProvider");
        }
        const isCustomIdentityProvider = !args.identityProvider || args.identityProvider === "Custom";
        if (!args.isPKCEEnabled && isCustomIdentityProvider) {
            if (args.clientSecret && !(0, utility_1.validateSecret)(args.clientSecret)) {
                invalidParameters.push("clientSecret");
            }
        }
        if (args.refreshUrl && typeof args.refreshUrl !== "string") {
            invalidParameters.push("refreshUrl");
        }
        if (invalidParameters.length > 0) {
            throw new common_1.InvalidActionInputError(actionName, invalidParameters, helpLink);
        }
    }
    async mapArgsToOauthRegistration(tokenProvider, args, authInfo) {
        var _a, _b;
        const currentUserRes = await tokenProvider.getJsonObject({ scopes: constants_1.GraphScopes });
        if (currentUserRes.isErr()) {
            throw currentUserRes.error;
        }
        const currentUser = currentUserRes.value;
        const userId = currentUser["oid"];
        const targetAudience = args.targetAudience
            ? args.targetAudience
            : OauthRegistration_1.OauthRegistrationTargetAudience.AnyTenant;
        const applicableToApps = args.applicableToApps
            ? args.applicableToApps
            : OauthRegistration_1.OauthRegistrationAppType.AnyApp;
        if (args.identityProvider === "MicrosoftEntra") {
            return {
                description: args.name,
                targetUrlsShouldStartWith: authInfo.domain,
                applicableToApps: applicableToApps,
                m365AppId: applicableToApps === OauthRegistration_1.OauthRegistrationAppType.SpecificApp ? args.appId : "",
                targetAudience: targetAudience,
                clientId: args.clientId,
                identityProvider: "MicrosoftEntra",
            };
        }
        return {
            description: args.name,
            targetUrlsShouldStartWith: authInfo.domain,
            applicableToApps: applicableToApps,
            m365AppId: applicableToApps === OauthRegistration_1.OauthRegistrationAppType.SpecificApp ? args.appId : "",
            targetAudience: targetAudience,
            clientId: args.clientId,
            clientSecret: (_a = args.clientSecret) !== null && _a !== void 0 ? _a : "",
            isPKCEEnabled: !!args.isPKCEEnabled,
            authorizationEndpoint: authInfo.authorizationEndpoint,
            tokenExchangeEndpoint: authInfo.tokenExchangeEndpoint,
            tokenRefreshEndpoint: (_b = args.refreshUrl) !== null && _b !== void 0 ? _b : authInfo.tokenRefreshEndpoint,
            scopes: authInfo.scopes,
            identityProvider: "Custom",
            // TODO: add this part back after TDP update
            // manageableByUsers: [
            //   {
            //     userId: userId,
            //     accessType: OauthRegistrationUserAccessType.ReadWrite,
            //   },
            // ],
        };
    }
};
tslib_1.__decorate([
    (0, hooks_1.hooks)([(0, questionMW_1.QuestionMW)("oauth", true), (0, addStartAndEndTelemetry_1.addStartAndEndTelemetry)(actionName, actionName)]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, Map]),
    tslib_1.__metadata("design:returntype", Promise)
], CreateOauthDriver.prototype, "execute", null);
CreateOauthDriver = tslib_1.__decorate([
    (0, typedi_1.Service)(actionName)
], CreateOauthDriver);
exports.CreateOauthDriver = CreateOauthDriver;
//# sourceMappingURL=create.js.map