"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateOauthDriver = void 0;
const tslib_1 = require("tslib");
const hooks_1 = require("@feathersjs/hooks");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const typedi_1 = require("typedi");
const teamsDevPortalClient_1 = require("../../../client/teamsDevPortalClient");
const constants_1 = require("../../../common/constants");
const localizeUtils_1 = require("../../../common/localizeUtils");
const common_1 = require("../../../error/common");
const addStartAndEndTelemetry_1 = require("../middleware/addStartAndEndTelemetry");
const OauthRegistration_1 = require("../teamsApp/interfaces/OauthRegistration");
const oauthNameTooLong_1 = require("./error/oauthNameTooLong");
const constants_2 = require("./utility/constants");
const utility_1 = require("./utility/utility");
const oauthDisablePKCEError_1 = require("./error/oauthDisablePKCEError");
const actionName = "oauth/update"; // DO NOT MODIFY the name
const helpLink = "https://aka.ms/teamsfx-actions/oauth-update";
let UpdateOauthDriver = class UpdateOauthDriver {
    constructor() {
        this.description = (0, localizeUtils_1.getLocalizedString)("driver.oauth.description.create");
        this.progressTitle = (0, localizeUtils_1.getLocalizedString)("driver.oauth.title.create");
    }
    async execute(args, context, outputEnvVarNames) {
        var _a, _b, _c, _d, _e;
        const summaries = [];
        const outputs = new Map();
        try {
            (_a = context.logProvider) === null || _a === void 0 ? void 0 : _a.info((0, localizeUtils_1.getLocalizedString)(constants_2.logMessageKeys.startExecuteDriver, actionName));
            const invalidParameters = this.validateArgs(args);
            if (invalidParameters.length > 0) {
                throw new common_1.InvalidActionInputError(actionName, invalidParameters, helpLink);
            }
            const authInfo = await (0, utility_1.getandValidateOauthInfoFromSpec)(args, context, actionName);
            const appStudioTokenRes = await context.m365TokenProvider.getAccessToken({
                scopes: constants_1.AppStudioScopes,
            });
            if (appStudioTokenRes.isErr()) {
                throw appStudioTokenRes.error;
            }
            const appStudioToken = appStudioTokenRes.value;
            const getOauthRes = await teamsDevPortalClient_1.teamsDevPortalClient.getOauthRegistrationById(appStudioToken, args.configurationId);
            const isCustomIdentityProvider = !getOauthRes.identityProvider || getOauthRes.identityProvider === "Custom";
            if (isCustomIdentityProvider) {
                if (args.isPKCEEnabled && typeof args.isPKCEEnabled !== "boolean") {
                    invalidParameters.push("isPKCEEnabled");
                }
                if (!args.isPKCEEnabled) {
                    if (args.clientSecret && !(0, utility_1.validateSecret)(args.clientSecret)) {
                        invalidParameters.push("clientSecret");
                    }
                }
                if (invalidParameters.length > 0) {
                    throw new common_1.InvalidActionInputError(actionName, invalidParameters, helpLink);
                }
            }
            if (getOauthRes.isPKCEEnabled && !args.isPKCEEnabled) {
                throw new oauthDisablePKCEError_1.OauthDisablePKCEError(actionName);
            }
            const diffMsgs = this.compareOauthRegistration(getOauthRes, args, authInfo);
            // If there is no difference, skip the update
            if (!diffMsgs || diffMsgs.length === 0) {
                const summary = (0, localizeUtils_1.getLocalizedString)(constants_2.logMessageKeys.skipUpdateOauth);
                (_b = context.logProvider) === null || _b === void 0 ? void 0 : _b.info(summary);
                summaries.push(summary);
                return {
                    result: (0, teamsfx_api_1.ok)(outputs),
                    summaries: summaries,
                };
            }
            // If there is difference, ask user to confirm the update
            // Skip confirm if only targetUrlsShouldStartWith is different when the url contains devtunnel
            if (!this.shouldSkipConfirm(diffMsgs, getOauthRes.targetUrlsShouldStartWith, authInfo.domain, isCustomIdentityProvider)) {
                const userConfirm = await context.ui.confirm({
                    name: "confirm-update-oauth",
                    title: (0, localizeUtils_1.getLocalizedString)("driver.oauth.confirm.update", diffMsgs.join(",\n")),
                    default: true,
                });
                if (userConfirm.isErr()) {
                    throw userConfirm.error;
                }
            }
            const oauth = this.mapArgsToOauthRegistration(args, authInfo, isCustomIdentityProvider);
            await teamsDevPortalClient_1.teamsDevPortalClient.updateOauthRegistration(appStudioToken, oauth, args.configurationId);
            void context.ui.showMessage("info", (0, localizeUtils_1.getLocalizedString)("driver.oauth.info.update", diffMsgs.join(",\n")), false);
            const summary = (0, localizeUtils_1.getLocalizedString)(constants_2.logMessageKeys.successUpdateOauth);
            (_c = context.logProvider) === null || _c === void 0 ? void 0 : _c.info(summary);
            summaries.push(summary);
            return {
                result: (0, teamsfx_api_1.ok)(outputs),
                summaries: summaries,
            };
        }
        catch (error) {
            if (error instanceof teamsfx_api_1.UserError || error instanceof teamsfx_api_1.SystemError) {
                (_d = context.logProvider) === null || _d === void 0 ? void 0 : _d.error((0, localizeUtils_1.getLocalizedString)(constants_2.logMessageKeys.failedExecuteDriver, actionName, error.displayMessage));
                return {
                    result: (0, teamsfx_api_1.err)(error),
                    summaries: summaries,
                };
            }
            const message = JSON.stringify(error);
            (_e = context.logProvider) === null || _e === void 0 ? void 0 : _e.error((0, localizeUtils_1.getLocalizedString)(constants_2.logMessageKeys.failedExecuteDriver, actionName, message));
            return {
                result: (0, teamsfx_api_1.err)((0, common_1.assembleError)(error, actionName)),
                summaries: summaries,
            };
        }
    }
    validateArgs(args) {
        const invalidParameters = [];
        if (typeof args.configurationId !== "string" || !args.configurationId) {
            invalidParameters.push("registrationId");
        }
        if (typeof args.name !== "string" || !args.name) {
            invalidParameters.push("name");
        }
        if (args.name.length > 128) {
            throw new oauthNameTooLong_1.OauthNameTooLongError(actionName);
        }
        if (typeof args.appId !== "string" || !args.appId) {
            invalidParameters.push("appId");
        }
        if (typeof args.apiSpecPath !== "string" || !args.apiSpecPath) {
            invalidParameters.push("apiSpecPath");
        }
        if (args.applicableToApps &&
            args.applicableToApps !== OauthRegistration_1.OauthRegistrationAppType.AnyApp &&
            args.applicableToApps !== OauthRegistration_1.OauthRegistrationAppType.SpecificApp) {
            invalidParameters.push("applicableToApps");
        }
        if (args.targetAudience &&
            args.targetAudience !== OauthRegistration_1.OauthRegistrationTargetAudience.AnyTenant &&
            args.targetAudience !== OauthRegistration_1.OauthRegistrationTargetAudience.HomeTenant) {
            invalidParameters.push("targetAudience");
        }
        return invalidParameters;
    }
    compareOauthRegistration(current, input, authInfo) {
        var _a, _b;
        const diffMsgs = [];
        const isMicrosoftEntra = current.identityProvider === "MicrosoftEntra";
        if (current.description !== input.name) {
            diffMsgs.push(`description: ${current.description} => ${input.name}`);
        }
        if (input.applicableToApps && current.applicableToApps !== input.applicableToApps) {
            let msg = `applicableToApps: ${current.applicableToApps} => ${input.applicableToApps}`;
            if (input.applicableToApps === "SpecificApp") {
                msg += `, m365AppId: ${input.appId}`;
            }
            diffMsgs.push(msg);
        }
        if (input.targetAudience && current.targetAudience !== input.targetAudience) {
            diffMsgs.push(`targetAudience: ${current.targetAudience} => ${input.targetAudience}`);
        }
        // Compare domain
        const domain = authInfo.domain;
        if (current.targetUrlsShouldStartWith.length !== domain.length ||
            !current.targetUrlsShouldStartWith.every((value) => domain.includes(value)) ||
            !domain.every((value) => current.targetUrlsShouldStartWith.includes(value))) {
            diffMsgs.push(`targetUrlsShouldStartWith: ${current.targetUrlsShouldStartWith.join(",")} => ${domain.join(",")}`);
        }
        if (input.clientId && current.clientId !== input.clientId) {
            diffMsgs.push(`clientId: ${current.clientId} => ${input.clientId}`);
        }
        // TODO: Need to separate the logic for different flows
        // Compare authorizationEndpoint
        if (!isMicrosoftEntra &&
            authInfo.authorizationEndpoint &&
            current.authorizationEndpoint !== authInfo.authorizationEndpoint) {
            diffMsgs.push(`authorizationEndpoint: ${(_a = current.authorizationEndpoint) !== null && _a !== void 0 ? _a : ""} => ${authInfo.authorizationEndpoint}`);
        }
        // Compare tokenExchangeEndpoint
        if (!isMicrosoftEntra &&
            authInfo.tokenExchangeEndpoint &&
            current.tokenExchangeEndpoint !== authInfo.tokenExchangeEndpoint) {
            diffMsgs.push(`tokenExchangeEndpoint: ${current.tokenExchangeEndpoint} => ${authInfo.tokenExchangeEndpoint}`);
        }
        // Compare tokenRefreshEndpoint
        if (!isMicrosoftEntra && current.tokenRefreshEndpoint !== authInfo.tokenRefreshEndpoint) {
            diffMsgs.push(`tokenRefreshEndpoint: ${current.tokenRefreshEndpoint} => ${(_b = authInfo.tokenRefreshEndpoint) !== null && _b !== void 0 ? _b : "Undefined"}`);
        }
        // Compare scopes
        if (!isMicrosoftEntra && !this.compareScopes(current.scopes, authInfo.scopes)) {
            diffMsgs.push(`scopes: ${current.scopes.join(",")} => ${authInfo.scopes ? authInfo.scopes.join(",") : "Undefined"}`);
        }
        if (!!current.isPKCEEnabled !== !!input.isPKCEEnabled) {
            diffMsgs.push(`isPKCEEnabled: ${(!!current.isPKCEEnabled).toString()} => ${(!!input.isPKCEEnabled).toString()}`);
        }
        return diffMsgs;
    }
    // Should skip confirm box if only targetUrlsShouldStartWith/client id is different and the url contains devtunnel
    shouldSkipConfirm(diffMsgs, getDomain, domain, isCustomIdentityProvider) {
        const targetUrlChangesWithDevTunnel = getDomain.length === domain.length &&
            getDomain.every((value) => value.includes("devtunnel")) &&
            domain.every((value) => value.includes("devtunnel")) &&
            diffMsgs[0].includes("targetUrlsShouldStartWith");
        if (isCustomIdentityProvider) {
            return diffMsgs.length === 1 && targetUrlChangesWithDevTunnel;
        }
        else {
            return (diffMsgs.length === 2 && targetUrlChangesWithDevTunnel && diffMsgs[1].includes("clientId"));
        }
    }
    mapArgsToOauthRegistration(args, authInfo, isCustomIdentityProvider) {
        var _a;
        const targetAudience = args.targetAudience
            ? args.targetAudience
            : undefined;
        const applicableToApps = args.applicableToApps
            ? args.applicableToApps
            : undefined;
        const result = {
            description: args.name,
            targetUrlsShouldStartWith: authInfo.domain,
            applicableToApps: applicableToApps,
            m365AppId: applicableToApps === OauthRegistration_1.OauthRegistrationAppType.SpecificApp ? args.appId : "",
            targetAudience: targetAudience,
            isPKCEEnabled: !!args.isPKCEEnabled,
            scopes: (_a = authInfo.scopes) !== null && _a !== void 0 ? _a : [],
        };
        if (isCustomIdentityProvider) {
            result.authorizationEndpoint = authInfo.authorizationEndpoint;
            result.tokenExchangeEndpoint = authInfo.tokenExchangeEndpoint;
            result.tokenRefreshEndpoint = authInfo.tokenRefreshEndpoint;
            if (args.clientSecret && !result.isPKCEEnabled) {
                result.clientSecret = args.clientSecret;
            }
        }
        if (args.clientId) {
            result.clientId = args.clientId;
        }
        return result;
    }
    compareScopes(current, input) {
        return (!!input &&
            current.length === input.length &&
            current.every((value) => input.includes(value)) &&
            input.every((value) => current.includes(value)));
    }
};
tslib_1.__decorate([
    (0, hooks_1.hooks)([(0, addStartAndEndTelemetry_1.addStartAndEndTelemetry)(actionName, actionName)]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, Map]),
    tslib_1.__metadata("design:returntype", Promise)
], UpdateOauthDriver.prototype, "execute", null);
UpdateOauthDriver = tslib_1.__decorate([
    (0, typedi_1.Service)(actionName)
], UpdateOauthDriver);
exports.UpdateOauthDriver = UpdateOauthDriver;
//# sourceMappingURL=update.js.map