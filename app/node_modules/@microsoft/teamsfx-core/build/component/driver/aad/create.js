"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateAadAppDriver = void 0;
const tslib_1 = require("tslib");
const lib_1 = require("@feathersjs/hooks/lib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const axios_1 = tslib_1.__importDefault(require("axios"));
const typedi_1 = require("typedi");
const constants_1 = require("../../../common/constants");
const localizeUtils_1 = require("../../../common/localizeUtils");
const common_1 = require("../../../error/common");
const outputEnvironmentVariableUndefinedError_1 = require("../error/outputEnvironmentVariableUndefinedError");
const addStartAndEndTelemetry_1 = require("../middleware/addStartAndEndTelemetry");
const utils_1 = require("../util/utils");
const wrapUtil_1 = require("../util/wrapUtil");
const aadAppNameTooLongError_1 = require("./error/aadAppNameTooLongError");
const missingEnvError_1 = require("./error/missingEnvError");
const createAadAppOutput_1 = require("./interface/createAadAppOutput");
const signInAudience_1 = require("./interface/signInAudience");
const aadAppClient_1 = require("./utility/aadAppClient");
const constants_2 = require("./utility/constants");
const globalVars_1 = require("../../../common/globalVars");
const missingServiceManagamentReferenceError_1 = require("./error/missingServiceManagamentReferenceError");
const actionName = "aadApp/create"; // DO NOT MODIFY the name
const helpLink = "https://aka.ms/teamsfx-actions/aadapp-create";
const driverConstants = {
    generateSecretErrorMessageKey: "driver.aadApp.error.generateSecretFailed",
};
let CreateAadAppDriver = class CreateAadAppDriver {
    constructor() {
        this.description = (0, localizeUtils_1.getLocalizedString)(constants_2.descriptionMessageKeys.create);
        this.progressTitle = (0, localizeUtils_1.getLocalizedString)("driver.aadApp.progressBar.createAadAppTitle");
    }
    async execute(args, context, outputEnvVarNames) {
        const wrapDriverContext = new wrapUtil_1.WrapDriverContext(context, actionName, actionName);
        return await this.executeInternal(args, wrapDriverContext, outputEnvVarNames);
    }
    async executeInternal(args, context, outputEnvVarNames) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        const summaries = [];
        let outputs = new Map();
        try {
            (_a = context.logProvider) === null || _a === void 0 ? void 0 : _a.info((0, localizeUtils_1.getLocalizedString)(constants_2.logMessageKeys.startExecuteDriver, actionName));
            this.validateArgs(args);
            if (!outputEnvVarNames) {
                throw new outputEnvironmentVariableUndefinedError_1.OutputEnvironmentVariableUndefinedError(actionName);
            }
            const aadAppClient = new aadAppClient_1.AadAppClient(context.m365TokenProvider, context.logProvider);
            const aadAppState = (0, utils_1.loadStateFromEnv)(outputEnvVarNames);
            if (!aadAppState.clientId) {
                (_b = context.logProvider) === null || _b === void 0 ? void 0 : _b.info((0, localizeUtils_1.getLocalizedString)(constants_2.logMessageKeys.startCreateAadApp, outputEnvVarNames.get(createAadAppOutput_1.OutputKeys.clientId)));
                context.addTelemetryProperties({ [constants_2.telemetryKeys.newAadApp]: "true" });
                const tokenJson = await context.m365TokenProvider.getJsonObject({ scopes: constants_1.GraphScopes });
                const isMsftAccount = tokenJson.isOk() &&
                    tokenJson.value.unique_name &&
                    tokenJson.value.unique_name.endsWith("@microsoft.com");
                // Create new Microsoft Entra app if no client id exists
                const signInAudience = args.signInAudience
                    ? args.signInAudience
                    : signInAudience_1.SignInAudience.AzureADMyOrg;
                // This hidden environment variable is for internal use only.
                const serviceManagementReference = args.serviceManagementReference || process.env.TTK_DEFAULT_SERVICE_MANAGEMENT_REFERENCE;
                if (isMsftAccount && !serviceManagementReference) {
                    throw new missingServiceManagamentReferenceError_1.MissingServiceManagementReferenceError(actionName);
                }
                const aadApp = await aadAppClient.createAadApp(args.name, signInAudience, serviceManagementReference);
                aadAppState.clientId = aadApp.appId;
                aadAppState.objectId = aadApp.id;
                globalVars_1.AadSet.add(aadApp.appId);
                await this.setAadEndpointInfo(context.m365TokenProvider, aadAppState);
                outputs = (0, utils_1.mapStateToEnv)(aadAppState, outputEnvVarNames, [createAadAppOutput_1.OutputKeys.clientSecret]);
                let summary = (0, localizeUtils_1.getLocalizedString)(constants_2.logMessageKeys.successCreateAadApp, aadApp.id);
                if (isMsftAccount) {
                    summary += (0, localizeUtils_1.getLocalizedString)(constants_2.logMessageKeys.deleteAadAfterDebugging);
                }
                (_c = context.logProvider) === null || _c === void 0 ? void 0 : _c.info(summary);
                summaries.push(summary);
            }
            else {
                (_d = context.logProvider) === null || _d === void 0 ? void 0 : _d.info((0, localizeUtils_1.getLocalizedString)(constants_2.logMessageKeys.skipCreateAadApp, outputEnvVarNames.get(createAadAppOutput_1.OutputKeys.clientId)));
                context.addTelemetryProperties({ [constants_2.telemetryKeys.newAadApp]: "false" });
            }
            if (args.generateClientSecret) {
                if (!aadAppState.clientSecret) {
                    (_e = context.logProvider) === null || _e === void 0 ? void 0 : _e.info((0, localizeUtils_1.getLocalizedString)(constants_2.logMessageKeys.startGenerateClientSecret, outputEnvVarNames.get(createAadAppOutput_1.OutputKeys.clientSecret)));
                    // Create new client secret if no client secret exists
                    if (!aadAppState.objectId) {
                        throw new missingEnvError_1.MissingEnvUserError(actionName, outputEnvVarNames.get(createAadAppOutput_1.OutputKeys.objectId), helpLink, driverConstants.generateSecretErrorMessageKey);
                    }
                    const clientSecretExpireDays = (_f = args.clientSecretExpireDays) !== null && _f !== void 0 ? _f : 180; // Recommended lifetime from Azure Portal
                    const clientSecretDescription = (_g = args.clientSecretDescription) !== null && _g !== void 0 ? _g : "default";
                    aadAppState.clientSecret = await aadAppClient.generateClientSecret(aadAppState.objectId, clientSecretExpireDays, clientSecretDescription);
                    outputs.set(outputEnvVarNames.get(createAadAppOutput_1.OutputKeys.clientSecret), aadAppState.clientSecret);
                    const summary = (0, localizeUtils_1.getLocalizedString)(constants_2.logMessageKeys.successGenerateClientSecret, aadAppState.objectId);
                    (_h = context.logProvider) === null || _h === void 0 ? void 0 : _h.info(summary);
                    summaries.push(summary);
                }
                else {
                    (_j = context.logProvider) === null || _j === void 0 ? void 0 : _j.info((0, localizeUtils_1.getLocalizedString)(constants_2.logMessageKeys.skipCreateAadApp, outputEnvVarNames.get(createAadAppOutput_1.OutputKeys.clientSecret)));
                }
            }
            (_k = context.logProvider) === null || _k === void 0 ? void 0 : _k.info((0, localizeUtils_1.getLocalizedString)(constants_2.logMessageKeys.successExecuteDriver, actionName));
            return {
                result: (0, teamsfx_api_1.ok)(outputs),
                summaries: summaries,
            };
        }
        catch (error) {
            if (error instanceof teamsfx_api_1.UserError || error instanceof teamsfx_api_1.SystemError) {
                (_l = context.logProvider) === null || _l === void 0 ? void 0 : _l.error((0, localizeUtils_1.getLocalizedString)(constants_2.logMessageKeys.failExecuteDriver, actionName, error.displayMessage));
                return {
                    result: (0, teamsfx_api_1.err)(error),
                    summaries: summaries,
                };
            }
            if (axios_1.default.isAxiosError(error)) {
                const message = JSON.stringify(error.response.data);
                (_m = context.logProvider) === null || _m === void 0 ? void 0 : _m.error((0, localizeUtils_1.getLocalizedString)(constants_2.logMessageKeys.failExecuteDriver, actionName, message));
                if (error.response.status >= 400 && error.response.status < 500) {
                    return {
                        result: (0, teamsfx_api_1.err)(new common_1.HttpClientError(error, actionName, message, helpLink)),
                        summaries: summaries,
                    };
                }
                else {
                    return {
                        result: (0, teamsfx_api_1.err)(new common_1.HttpServerError(error, actionName, message)),
                        summaries: summaries,
                    };
                }
            }
            const message = JSON.stringify(error);
            (_o = context.logProvider) === null || _o === void 0 ? void 0 : _o.error((0, localizeUtils_1.getLocalizedString)(constants_2.logMessageKeys.failExecuteDriver, actionName, message));
            return {
                result: (0, teamsfx_api_1.err)((0, common_1.assembleError)(error, actionName)),
                summaries: summaries,
            };
        }
    }
    validateArgs(args) {
        const invalidParameters = [];
        if (typeof args.name !== "string" || !args.name) {
            invalidParameters.push("name");
        }
        if (args.generateClientSecret === undefined || typeof args.generateClientSecret !== "boolean") {
            invalidParameters.push("generateClientSecret");
        }
        // Throw error if unexpected signInAudience
        if (args.signInAudience &&
            (typeof args.signInAudience !== "string" ||
                !Object.values(signInAudience_1.SignInAudience).includes(args.signInAudience))) {
            invalidParameters.push("signInAudience");
        }
        if (invalidParameters.length > 0) {
            throw new common_1.InvalidActionInputError(actionName, invalidParameters, helpLink);
        }
        if (args.name.length > 120) {
            throw new aadAppNameTooLongError_1.AadAppNameTooLongError(actionName);
        }
    }
    // logic from
    // src\component\resource\aadApp\utils\tokenProvider.ts
    // src\component\resource\aadApp\utils\configs.ts
    async setAadEndpointInfo(tokenProvider, state) {
        const tokenObjectResponse = await tokenProvider.getJsonObject({ scopes: constants_1.GraphScopes });
        if (tokenObjectResponse.isErr()) {
            throw tokenObjectResponse.error;
        }
        const tenantId = tokenObjectResponse.value.tid; // The tid claim is AAD tenant id
        state.tenantId = tenantId;
        state.authorityHost = constants_2.constants.oauthAuthorityPrefix;
        state.authority = `${constants_2.constants.oauthAuthorityPrefix}/${tenantId}`;
    }
};
tslib_1.__decorate([
    (0, lib_1.hooks)([(0, addStartAndEndTelemetry_1.addStartAndEndTelemetry)(actionName, actionName)]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, wrapUtil_1.WrapDriverContext,
        Map]),
    tslib_1.__metadata("design:returntype", Promise)
], CreateAadAppDriver.prototype, "executeInternal", null);
CreateAadAppDriver = tslib_1.__decorate([
    (0, typedi_1.Service)(actionName) // DO NOT MODIFY the service name
], CreateAadAppDriver);
exports.CreateAadAppDriver = CreateAadAppDriver;
//# sourceMappingURL=create.js.map