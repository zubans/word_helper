"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.HostNameNotOnVerifiedDomainError = exports.DeleteOrUpdatePermissionFailedError = exports.UnknownResourceAccessTypeUserError = exports.UnknownResourceAccessIdUserError = exports.RequiredResourceAccessShouldBeArrayUserError = exports.ResourceAccessShouldBeArrayUserError = exports.MissingResourceAccessIdUserError = exports.MissingResourceAppIdUserError = exports.UnknownResourceAppIdUserError = exports.AadManifestErrorMessage = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const localizeUtils_1 = require("../../../../common/localizeUtils");
class AadManifestErrorMessage {
}
exports.AadManifestErrorMessage = AadManifestErrorMessage;
AadManifestErrorMessage.NameIsMissing = (0, localizeUtils_1.getLocalizedString)("error.aad.manifest.NameIsMissing");
AadManifestErrorMessage.SignInAudienceIsMissing = (0, localizeUtils_1.getLocalizedString)("error.aad.manifest.SignInAudienceIsMissing");
AadManifestErrorMessage.RequiredResourceAccessIsMissing = (0, localizeUtils_1.getLocalizedString)("error.aad.manifest.RequiredResourceAccessIsMissing");
AadManifestErrorMessage.Oauth2PermissionsIsMissing = (0, localizeUtils_1.getLocalizedString)("error.aad.manifest.Oauth2PermissionsIsMissing");
AadManifestErrorMessage.PreAuthorizedApplicationsIsMissing = (0, localizeUtils_1.getLocalizedString)("error.aad.manifest.PreAuthorizedApplicationsIsMissing");
AadManifestErrorMessage.AccessTokenAcceptedVersionIs1 = (0, localizeUtils_1.getLocalizedString)("error.aad.manifest.AccessTokenAcceptedVersionIs1");
AadManifestErrorMessage.OptionalClaimsIsMissing = (0, localizeUtils_1.getLocalizedString)("error.aad.manifest.OptionalClaimsIsMissing");
AadManifestErrorMessage.OptionalClaimsMissingIdtypClaim = (0, localizeUtils_1.getLocalizedString)("error.aad.manifest.OptionalClaimsMissingIdtypClaim");
AadManifestErrorMessage.AADManifestIssues = (0, localizeUtils_1.getLocalizedString)("error.aad.manifest.AADManifestIssues");
class UnknownResourceAppIdUserError extends teamsfx_api_1.UserError {
    constructor(actionName, unknownId) {
        super({
            source: actionName,
            name: "UnknownResourceAppId",
            message: (0, localizeUtils_1.getDefaultString)("error.aad.manifest.UnknownResourceAppId", unknownId),
            displayMessage: (0, localizeUtils_1.getLocalizedString)("error.aad.manifest.UnknownResourceAppId", unknownId),
            helpLink: "https://aka.ms/teamsfx-aad-manifest",
        });
    }
}
exports.UnknownResourceAppIdUserError = UnknownResourceAppIdUserError;
class MissingResourceAppIdUserError extends teamsfx_api_1.UserError {
    constructor(actionName) {
        super({
            source: actionName,
            name: "MissingResourceAppId",
            message: (0, localizeUtils_1.getDefaultString)("error.aad.manifest.ResourceAppIdIsMissing"),
            displayMessage: (0, localizeUtils_1.getLocalizedString)("error.aad.manifest.ResourceAppIdIsMissing"),
            helpLink: "https://aka.ms/teamsfx-aad-manifest",
        });
    }
}
exports.MissingResourceAppIdUserError = MissingResourceAppIdUserError;
class MissingResourceAccessIdUserError extends teamsfx_api_1.UserError {
    constructor(actionName) {
        super({
            source: actionName,
            name: "MissingResourceAccessId",
            message: (0, localizeUtils_1.getDefaultString)("error.aad.manifest.ResourceAccessIdIsMissing"),
            displayMessage: (0, localizeUtils_1.getLocalizedString)("error.aad.manifest.ResourceAccessIdIsMissing"),
            helpLink: "https://aka.ms/teamsfx-aad-manifest",
        });
    }
}
exports.MissingResourceAccessIdUserError = MissingResourceAccessIdUserError;
class ResourceAccessShouldBeArrayUserError extends teamsfx_api_1.UserError {
    constructor(actionName) {
        super({
            source: actionName,
            name: "ResourceAccessShouldBeArray",
            message: (0, localizeUtils_1.getDefaultString)("error.aad.manifest.ResourceAccessShouldBeArray"),
            displayMessage: (0, localizeUtils_1.getLocalizedString)("error.aad.manifest.ResourceAccessShouldBeArray"),
            helpLink: "https://aka.ms/teamsfx-aad-manifest",
        });
    }
}
exports.ResourceAccessShouldBeArrayUserError = ResourceAccessShouldBeArrayUserError;
class RequiredResourceAccessShouldBeArrayUserError extends teamsfx_api_1.UserError {
    constructor(actionName) {
        super({
            source: actionName,
            name: "RequiredResourceAccessShouldBeArray",
            message: (0, localizeUtils_1.getDefaultString)("error.aad.manifest.RequiredResourceAccessShouldBeArray"),
            displayMessage: (0, localizeUtils_1.getLocalizedString)("error.aad.manifest.RequiredResourceAccessShouldBeArray"),
            helpLink: "https://aka.ms/teamsfx-aad-manifest",
        });
    }
}
exports.RequiredResourceAccessShouldBeArrayUserError = RequiredResourceAccessShouldBeArrayUserError;
class UnknownResourceAccessIdUserError extends teamsfx_api_1.UserError {
    constructor(actionName, unknownId) {
        super({
            source: actionName,
            name: "UnknownResourceAccessId",
            message: (0, localizeUtils_1.getDefaultString)("error.aad.manifest.UnknownResourceAccessId", unknownId),
            displayMessage: (0, localizeUtils_1.getLocalizedString)("error.aad.manifest.UnknownResourceAccessId", unknownId),
            helpLink: "https://aka.ms/teamsfx-aad-manifest",
        });
    }
}
exports.UnknownResourceAccessIdUserError = UnknownResourceAccessIdUserError;
class UnknownResourceAccessTypeUserError extends teamsfx_api_1.UserError {
    constructor(actionName, unknownType) {
        super({
            source: actionName,
            name: "UnknownResourceAccessType",
            message: (0, localizeUtils_1.getDefaultString)("error.aad.manifest.UnknownResourceAccessType", unknownType),
            displayMessage: (0, localizeUtils_1.getLocalizedString)("error.aad.manifest.UnknownResourceAccessType", unknownType),
            helpLink: "https://aka.ms/teamsfx-aad-manifest",
        });
    }
}
exports.UnknownResourceAccessTypeUserError = UnknownResourceAccessTypeUserError;
class DeleteOrUpdatePermissionFailedError extends teamsfx_api_1.UserError {
    constructor(actionName) {
        super({
            source: actionName,
            name: "DeleteOrUpdatePermissionFailed",
            message: (0, localizeUtils_1.getDefaultString)("error.aad.manifest.DeleteOrUpdatePermissionFailed"),
            displayMessage: (0, localizeUtils_1.getLocalizedString)("error.aad.manifest.DeleteOrUpdatePermissionFailed"),
            helpLink: "https://aka.ms/teamsfx-aad-manifest",
        });
    }
}
exports.DeleteOrUpdatePermissionFailedError = DeleteOrUpdatePermissionFailedError;
class HostNameNotOnVerifiedDomainError extends teamsfx_api_1.UserError {
    constructor(actionName, errorMessage) {
        super({
            source: actionName,
            name: "HostNameNotOnVerifiedDomain",
            message: (0, localizeUtils_1.getDefaultString)("error.aad.manifest.HostNameNotOnVerifiedDomain", errorMessage),
            displayMessage: (0, localizeUtils_1.getLocalizedString)("error.aad.manifest.HostNameNotOnVerifiedDomain", errorMessage),
            helpLink: "https://aka.ms/teamsfx-multi-tenant",
        });
    }
}
exports.HostNameNotOnVerifiedDomainError = HostNameNotOnVerifiedDomainError;
//# sourceMappingURL=aadManifestError.js.map