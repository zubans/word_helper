"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateApiKeyDriver = void 0;
const tslib_1 = require("tslib");
const hooks_1 = require("@feathersjs/hooks");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const typedi_1 = require("typedi");
const teamsDevPortalClient_1 = require("../../../client/teamsDevPortalClient");
const constants_1 = require("../../../common/constants");
const localizeUtils_1 = require("../../../common/localizeUtils");
const error_1 = require("../../../error");
const constants_2 = require("../../../question/constants");
const questionMW_1 = require("../../middleware/questionMW");
const outputEnvironmentVariableUndefinedError_1 = require("../error/outputEnvironmentVariableUndefinedError");
const addStartAndEndTelemetry_1 = require("../middleware/addStartAndEndTelemetry");
const ApiSecretRegistration_1 = require("../teamsApp/interfaces/ApiSecretRegistration");
const apiKeyClientSecretInvalid_1 = require("./error/apiKeyClientSecretInvalid");
const apiKeyNameTooLong_1 = require("./error/apiKeyNameTooLong");
const createApiKeyOutputs_1 = require("./interface/createApiKeyOutputs");
const constants_3 = require("./utility/constants");
const utility_1 = require("./utility/utility");
const apiKeyFromScratchClientSecretInvalid_1 = require("./error/apiKeyFromScratchClientSecretInvalid");
const actionName = "apiKey/register"; // DO NOT MODIFY the name
const helpLink = "https://aka.ms/teamsfx-actions/apiKey-register";
let CreateApiKeyDriver = class CreateApiKeyDriver {
    constructor() {
        this.description = (0, localizeUtils_1.getLocalizedString)("driver.apiKey.description.create");
        this.progressTitle = (0, localizeUtils_1.getLocalizedString)("driver.aadApp.apiKey.title.create");
    }
    async execute(args, context, outputEnvVarNames) {
        var _a, _b, _c, _d, _e, _f;
        const summaries = [];
        const outputs = new Map();
        try {
            (_a = context.logProvider) === null || _a === void 0 ? void 0 : _a.info((0, localizeUtils_1.getLocalizedString)(constants_3.logMessageKeys.startExecuteDriver, actionName));
            if (!outputEnvVarNames) {
                throw new outputEnvironmentVariableUndefinedError_1.OutputEnvironmentVariableUndefinedError(actionName);
            }
            const state = (0, utility_1.loadStateFromEnv)(outputEnvVarNames);
            const appStudioTokenRes = await context.m365TokenProvider.getAccessToken({
                scopes: constants_1.AppStudioScopes,
            });
            if (appStudioTokenRes.isErr()) {
                throw appStudioTokenRes.error;
            }
            const appStudioToken = appStudioTokenRes.value;
            if (state && state.registrationId) {
                try {
                    await teamsDevPortalClient_1.teamsDevPortalClient.getApiKeyRegistrationById(appStudioToken, state.registrationId);
                    (_b = context.logProvider) === null || _b === void 0 ? void 0 : _b.info((0, localizeUtils_1.getLocalizedString)(constants_3.logMessageKeys.skipCreateApiKey, outputEnvVarNames.get(createApiKeyOutputs_1.OutputKeys.registrationId)));
                }
                catch (error) {
                    (_c = context.logProvider) === null || _c === void 0 ? void 0 : _c.warning((0, localizeUtils_1.getLocalizedString)(constants_3.logMessageKeys.apiKeyNotFound, outputEnvVarNames.get(createApiKeyOutputs_1.OutputKeys.registrationId)));
                }
            }
            else {
                const clientSecret = this.loadClientSecret();
                if (clientSecret) {
                    args.primaryClientSecret = clientSecret;
                }
                this.validateArgs(args);
                const domains = await (0, utility_1.getDomain)(args, context, actionName);
                (0, utility_1.validateDomain)(domains, actionName);
                const apiKey = await this.mapArgsToApiSecretRegistration(context.m365TokenProvider, args, domains);
                const apiRegistrationRes = await teamsDevPortalClient_1.teamsDevPortalClient.createApiKeyRegistration(appStudioToken, apiKey);
                outputs.set(outputEnvVarNames.get(createApiKeyOutputs_1.OutputKeys.registrationId), apiRegistrationRes.id);
                const summary = (0, localizeUtils_1.getLocalizedString)(constants_3.logMessageKeys.successCreateApiKey, apiRegistrationRes.id);
                (_d = context.logProvider) === null || _d === void 0 ? void 0 : _d.info(summary);
                summaries.push(summary);
            }
            return {
                result: (0, teamsfx_api_1.ok)(outputs),
                summaries: summaries,
            };
        }
        catch (error) {
            if (error instanceof teamsfx_api_1.UserError || error instanceof teamsfx_api_1.SystemError) {
                (_e = context.logProvider) === null || _e === void 0 ? void 0 : _e.error((0, localizeUtils_1.getLocalizedString)(constants_3.logMessageKeys.failedExecuteDriver, actionName, error.displayMessage));
                return {
                    result: (0, teamsfx_api_1.err)(error),
                    summaries: summaries,
                };
            }
            const message = JSON.stringify(error);
            (_f = context.logProvider) === null || _f === void 0 ? void 0 : _f.error((0, localizeUtils_1.getLocalizedString)(constants_3.logMessageKeys.failedExecuteDriver, actionName, message));
            return {
                result: (0, teamsfx_api_1.err)((0, error_1.assembleError)(error, actionName)),
                summaries: summaries,
            };
        }
    }
    loadClientSecret() {
        const clientSecret = process.env[constants_2.QuestionNames.ApiSpecApiKey];
        return clientSecret;
    }
    validateSecret(apiKeySecret) {
        if (typeof apiKeySecret !== "string") {
            return false;
        }
        if (apiKeySecret.length > constants_3.maxSecretLength || apiKeySecret.length < constants_3.minSecretLength) {
            return false;
        }
        return true;
    }
    validateArgs(args) {
        const invalidParameters = [];
        if (typeof args.name !== "string" || !args.name) {
            invalidParameters.push("name");
        }
        if (args.name.length > 128) {
            throw new apiKeyNameTooLong_1.ApiKeyNameTooLongError(actionName);
        }
        if (typeof args.appId !== "string" || !args.appId) {
            invalidParameters.push("appId");
        }
        if (args.primaryClientSecret && !this.validateSecret(args.primaryClientSecret)) {
            throw args.primaryClientSecret === " "
                ? new apiKeyFromScratchClientSecretInvalid_1.apiKeyFromScratchClientSecretInvalid(actionName)
                : new apiKeyClientSecretInvalid_1.ApiKeyClientSecretInvalidError(actionName);
        }
        if (args.secondaryClientSecret && !this.validateSecret(args.secondaryClientSecret)) {
            throw new apiKeyClientSecretInvalid_1.ApiKeyClientSecretInvalidError(actionName);
        }
        if (typeof args.apiSpecPath !== "string" || !args.apiSpecPath) {
            invalidParameters.push("apiSpecPath");
        }
        if (args.applicableToApps &&
            args.applicableToApps !== ApiSecretRegistration_1.ApiSecretRegistrationAppType.AnyApp &&
            args.applicableToApps !== ApiSecretRegistration_1.ApiSecretRegistrationAppType.SpecificApp) {
            invalidParameters.push("applicableToApps");
        }
        if (args.targetAudience &&
            args.targetAudience !== ApiSecretRegistration_1.ApiSecretRegistrationTargetAudience.AnyTenant &&
            args.targetAudience !== ApiSecretRegistration_1.ApiSecretRegistrationTargetAudience.HomeTenant) {
            invalidParameters.push("targetAudience");
        }
        if (invalidParameters.length > 0) {
            throw new error_1.InvalidActionInputError(actionName, invalidParameters, helpLink);
        }
    }
    async mapArgsToApiSecretRegistration(tokenProvider, args, domain) {
        const currentUserRes = await tokenProvider.getJsonObject({ scopes: constants_1.GraphScopes });
        if (currentUserRes.isErr()) {
            throw currentUserRes.error;
        }
        const currentUser = currentUserRes.value;
        const userId = currentUser["oid"];
        const secrets = [];
        if (args.primaryClientSecret) {
            secrets.push(args.primaryClientSecret);
        }
        if (args.secondaryClientSecret) {
            secrets.push(args.secondaryClientSecret);
        }
        let isPrimary = true;
        const clientSecrets = secrets.map((secret) => {
            const clientSecret = {
                value: secret,
                description: args.name,
                priority: isPrimary ? 0 : 1,
                isValueRedacted: false,
            };
            isPrimary = false;
            return clientSecret;
        });
        const targetAudience = args.targetAudience
            ? args.targetAudience
            : ApiSecretRegistration_1.ApiSecretRegistrationTargetAudience.AnyTenant;
        const applicableToApps = args.applicableToApps
            ? args.applicableToApps
            : ApiSecretRegistration_1.ApiSecretRegistrationAppType.AnyApp;
        const apiKey = {
            description: args.name,
            targetUrlsShouldStartWith: domain,
            applicableToApps: applicableToApps,
            specificAppId: applicableToApps === ApiSecretRegistration_1.ApiSecretRegistrationAppType.SpecificApp ? args.appId : "",
            targetAudience: targetAudience,
            clientSecrets: clientSecrets,
            manageableByUsers: [
                {
                    userId: userId,
                    accessType: ApiSecretRegistration_1.ApiSecretRegistrationUserAccessType.ReadWrite,
                },
            ],
        };
        return apiKey;
    }
};
tslib_1.__decorate([
    (0, hooks_1.hooks)([(0, questionMW_1.QuestionMW)("apiKey", true), (0, addStartAndEndTelemetry_1.addStartAndEndTelemetry)(actionName, actionName)]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, Map]),
    tslib_1.__metadata("design:returntype", Promise)
], CreateApiKeyDriver.prototype, "execute", null);
CreateApiKeyDriver = tslib_1.__decorate([
    (0, typedi_1.Service)(actionName) // DO NOT MODIFY the service name
], CreateApiKeyDriver);
exports.CreateApiKeyDriver = CreateApiKeyDriver;
//# sourceMappingURL=create.js.map