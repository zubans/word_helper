"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var AzureStaticWebAppGetDeploymentTokenDriver_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AzureStaticWebAppGetDeploymentTokenDriver = void 0;
const tslib_1 = require("tslib");
const typedi_1 = require("typedi");
const hooks_1 = require("@feathersjs/hooks");
const addStartAndEndTelemetry_1 = require("../../middleware/addStartAndEndTelemetry");
const commonConstant_1 = require("../../../constant/commonConstant");
const common_1 = require("../../../utils/common");
const azureResourceOperation_1 = require("../../../utils/azureResourceOperation");
const arm_appservice_1 = require("@azure/arm-appservice");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const localizeUtils_1 = require("../../../../common/localizeUtils");
const outputEnvironmentVariableUndefinedError_1 = require("../../error/outputEnvironmentVariableUndefinedError");
const ACTION_NAME = "azureStaticWebApps/getDeploymentToken";
let AzureStaticWebAppGetDeploymentTokenDriver = AzureStaticWebAppGetDeploymentTokenDriver_1 = class AzureStaticWebAppGetDeploymentTokenDriver {
    constructor() {
        this.description = (0, localizeUtils_1.getLocalizedString)("driver.deploy.getSWADeploymentToken");
    }
    async execute(args, ctx, outputEnvVarNames) {
        try {
            return await AzureStaticWebAppGetDeploymentTokenDriver_1.run(args, ctx, outputEnvVarNames);
        }
        catch (e) {
            return { result: await (0, common_1.errorHandle)(e, ACTION_NAME, ctx.logProvider), summaries: [] };
        }
    }
    static async run(args, ctx, outputEnvVarNames) {
        var _a, _b;
        const input = AzureStaticWebAppGetDeploymentTokenDriver_1.STORAGE_CONFIG_ARGS(args, AzureStaticWebAppGetDeploymentTokenDriver_1.HELP_LINK);
        let outputKey;
        if (!outputEnvVarNames || !outputEnvVarNames.has("deploymentToken")) {
            throw new outputEnvironmentVariableUndefinedError_1.OutputEnvironmentVariableUndefinedError(ACTION_NAME);
        }
        else {
            outputKey =
                outputEnvVarNames.get("deploymentToken") === ""
                    ? "SECRET_TAB_SWA_DEPLOYMENT_TOKEN"
                    : outputEnvVarNames.get("deploymentToken");
        }
        const resourceInfo = (0, azureResourceOperation_1.parseAzureResourceId)(input.resourceId, AzureStaticWebAppGetDeploymentTokenDriver_1.RESOURCE_PATTERN);
        const azureTokenCredential = await (0, azureResourceOperation_1.getAzureAccountCredential)(ctx.azureAccountProvider);
        const client = new arm_appservice_1.WebSiteManagementClient(azureTokenCredential, resourceInfo.subscriptionId);
        const secrets = await client.staticSites.listStaticSiteSecrets(resourceInfo.resourceGroupName, resourceInfo.instanceId, {
            requestOptions: {
                customHeaders: {
                    "User-Agent": "TeamsToolkit",
                },
            },
        });
        const deploymentKey = (_b = (_a = secrets === null || secrets === void 0 ? void 0 : secrets.properties) === null || _a === void 0 ? void 0 : _a.apiKey) !== null && _b !== void 0 ? _b : "";
        const result = (0, teamsfx_api_1.ok)(new Map([[outputKey, deploymentKey]]));
        return {
            result: result,
            summaries: [(0, localizeUtils_1.getLocalizedString)("driver.deploy.getSWADeploymentTokenSummary")],
        };
    }
};
AzureStaticWebAppGetDeploymentTokenDriver.STORAGE_CONFIG_ARGS = (0, common_1.asFactory)({
    resourceId: common_1.asString,
});
AzureStaticWebAppGetDeploymentTokenDriver.HELP_LINK = "https://aka.ms/teamsfx-actions/swa-get-deployment-key";
AzureStaticWebAppGetDeploymentTokenDriver.RESOURCE_PATTERN = /\/subscriptions\/([^\/]*)\/resourceGroups\/([^\/]*)\/providers\/Microsoft.Web\/staticSites\/([^\/]*)/i;
tslib_1.__decorate([
    (0, hooks_1.hooks)([(0, addStartAndEndTelemetry_1.addStartAndEndTelemetry)(ACTION_NAME, commonConstant_1.TelemetryConstant.DEPLOY_COMPONENT_NAME)]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, Map]),
    tslib_1.__metadata("design:returntype", Promise)
], AzureStaticWebAppGetDeploymentTokenDriver.prototype, "execute", null);
AzureStaticWebAppGetDeploymentTokenDriver = AzureStaticWebAppGetDeploymentTokenDriver_1 = tslib_1.__decorate([
    (0, typedi_1.Service)(ACTION_NAME)
], AzureStaticWebAppGetDeploymentTokenDriver);
exports.AzureStaticWebAppGetDeploymentTokenDriver = AzureStaticWebAppGetDeploymentTokenDriver;
//# sourceMappingURL=azureStaticWebAppGetDeploymentTokenDriver.js.map