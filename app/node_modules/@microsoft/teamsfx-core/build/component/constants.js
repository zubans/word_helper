"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KiotaLastCommands = exports.AadConstants = exports.BotScenario = exports.SingleSignOnOptionItem = exports.AddSsoParameters = exports.CoordinatorSource = exports.SolutionSource = exports.SolutionTelemetryComponentName = exports.SolutionTelemetrySuccess = exports.SolutionTelemetryProperty = exports.SolutionTelemetryEvent = exports.ViewAadAppHelpLinkV5 = exports.SolutionError = void 0;
const tslib_1 = require("tslib");
const path_1 = tslib_1.__importDefault(require("path"));
const localizeUtils_1 = require("../common/localizeUtils");
var SolutionError;
(function (SolutionError) {
    SolutionError["NoAppStudioToken"] = "NoAppStudioToken";
    SolutionError["FailedToRetrieveUserInfo"] = "FailedToRetrieveUserInfo";
    SolutionError["CannotFindUserInCurrentTenant"] = "CannotFindUserInCurrentTenant";
    SolutionError["EmailCannotBeEmptyOrSame"] = "EmailCannotBeEmptyOrSame";
    SolutionError["InvalidProjectPath"] = "InvalidProjectPath";
    SolutionError["FailedToCreateAuthFiles"] = "FailedToCreateAuthFiles";
    SolutionError["FailedToLoadDotEnvFile"] = "FailedToLoadDotEnvFile";
    SolutionError["InvalidManifestError"] = "InvalidManifestError";
    SolutionError["FailedToLoadManifestFile"] = "FailedToLoadManifestFile";
})(SolutionError = exports.SolutionError || (exports.SolutionError = {}));
exports.ViewAadAppHelpLinkV5 = "https://aka.ms/teamsfx-view-aad-app-v5";
// This is the max length specified in
// https://developer.microsoft.com/en-us/json-schemas/teams/v1.7/MicrosoftTeams.schema.json
var SolutionTelemetryEvent;
(function (SolutionTelemetryEvent) {
    SolutionTelemetryEvent["AddSsoStart"] = "add-sso-start";
    SolutionTelemetryEvent["AddSso"] = "add-sso";
})(SolutionTelemetryEvent = exports.SolutionTelemetryEvent || (exports.SolutionTelemetryEvent = {}));
var SolutionTelemetryProperty;
(function (SolutionTelemetryProperty) {
    SolutionTelemetryProperty["Component"] = "component";
    SolutionTelemetryProperty["Success"] = "success";
    SolutionTelemetryProperty["CollaboratorCount"] = "collaborator-count";
    SolutionTelemetryProperty["AadOwnerCount"] = "aad-owner-count";
    SolutionTelemetryProperty["AadPermission"] = "aad-permission";
    SolutionTelemetryProperty["ArmDeploymentError"] = "arm-deployment-error";
    SolutionTelemetryProperty["TeamsAppPermission"] = "teams-app-permission";
    SolutionTelemetryProperty["Env"] = "env";
    SolutionTelemetryProperty["SubscriptionId"] = "subscription-id";
    SolutionTelemetryProperty["M365TenantId"] = "m365-tenant-id";
    SolutionTelemetryProperty["PreviousM365TenantId"] = "previous-m365-tenant-id";
    SolutionTelemetryProperty["ConfirmRes"] = "confirm-res";
})(SolutionTelemetryProperty = exports.SolutionTelemetryProperty || (exports.SolutionTelemetryProperty = {}));
var SolutionTelemetrySuccess;
(function (SolutionTelemetrySuccess) {
    SolutionTelemetrySuccess["Yes"] = "yes";
    SolutionTelemetrySuccess["No"] = "no";
})(SolutionTelemetrySuccess = exports.SolutionTelemetrySuccess || (exports.SolutionTelemetrySuccess = {}));
exports.SolutionTelemetryComponentName = "core";
exports.SolutionSource = "core";
exports.CoordinatorSource = "core";
class AddSsoParameters {
}
exports.AddSsoParameters = AddSsoParameters;
AddSsoParameters.filePath = path_1.default.join("plugins", "resource", "aad", "auth");
AddSsoParameters.Bot = "bot";
AddSsoParameters.Tab = "tab";
AddSsoParameters.V3 = "V3";
AddSsoParameters.V3AuthFolder = "TeamsFx-Auth";
AddSsoParameters.Readme = "README.md";
AddSsoParameters.ReadmeCSharp = "README.txt";
AddSsoParameters.LearnMore = () => (0, localizeUtils_1.getLocalizedString)("core.provision.learnMore");
AddSsoParameters.LearnMoreUrl = "https://aka.ms/teamsfx-add-sso-readme";
AddSsoParameters.AddSso = "addSso";
AddSsoParameters.AppSettings = "appsettings.json";
AddSsoParameters.AppSettingsDev = "appsettings.Development.json";
AddSsoParameters.AppSettingsToAdd = {
    Authentication: {
        ClientId: "$clientId$",
        ClientSecret: "$client-secret$",
        OAuthAuthority: "$oauthAuthority$",
    },
};
AddSsoParameters.AppSettingsToAddForBot = {
    Authentication: {
        ClientId: "$clientId$",
        ClientSecret: "$client-secret$",
        OAuthAuthority: "$oauthAuthority$",
        ApplicationIdUri: "$applicationIdUri$",
        Bot: {
            InitiateLoginEndpoint: "$initiateLoginEndpoint$",
        },
    },
};
exports.SingleSignOnOptionItem = {
    id: "sso",
    label: `$(unlock) ${(0, localizeUtils_1.getLocalizedString)("core.SingleSignOnOption.label")}`,
    detail: (0, localizeUtils_1.getLocalizedString)("core.SingleSignOnOption.detail"),
    groupName: (0, localizeUtils_1.getLocalizedString)("core.options.separator.additional"),
    data: "https://aka.ms/teamsfx-add-sso",
    buttons: [
        {
            iconPath: "tasklist",
            tooltip: (0, localizeUtils_1.getLocalizedString)("core.option.tutorial"),
            command: "fx-extension.openTutorial",
        },
    ],
};
var BotScenario;
(function (BotScenario) {
    BotScenario["NotificationBot"] = "notificationBot";
    BotScenario["CommandAndResponseBot"] = "commandAndResponseBot";
    BotScenario["WorkflowBot"] = "workflowBot";
})(BotScenario = exports.BotScenario || (exports.BotScenario = {}));
exports.AadConstants = {
    DefaultTemplateFileName: "aad.manifest.json",
};
exports.KiotaLastCommands = {
    createPluginWithManifest: "createPluginWithManifest",
    createDeclarativeCopilotWithManifest: "createDeclarativeCopilotWithManifest",
    addPlugin: "addPlugin",
};
//# sourceMappingURL=constants.js.map