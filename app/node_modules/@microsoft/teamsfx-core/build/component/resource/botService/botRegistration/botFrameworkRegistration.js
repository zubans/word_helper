"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.createOrUpdateBotRegistration = void 0;
/**
 * @author Qianhao Dong <qidon@microsoft.com>
 */
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const teamsDevPortalClient_1 = require("../../../../client/teamsDevPortalClient");
const constants_1 = require("../../../../common/constants");
const utils_1 = require("./utils");
async function createOrUpdateBotRegistration(m365TokenProvider, botRegistration, logger) {
    // 1. Get bot registration from remote.
    // 2. If Not Found, Then create a new bot registration.
    // 3. Else:
    //      3.1 Merge bot registration (remote + passed-in, respect passed-in).
    //      3.2 Update bot registration.
    const appStudioTokenRes = await m365TokenProvider.getAccessToken({
        scopes: constants_1.AppStudioScopes,
    });
    if (appStudioTokenRes.isErr()) {
        return (0, teamsfx_api_1.err)(appStudioTokenRes.error);
    }
    const appStudioToken = appStudioTokenRes.value;
    logger === null || logger === void 0 ? void 0 : logger.debug(`Input bot registration: ${JSON.stringify(botRegistration)}`);
    const remoteBotRegistration = await teamsDevPortalClient_1.teamsDevPortalClient.getBotRegistration(appStudioToken, botRegistration.botId);
    if (!remoteBotRegistration) {
        // Not Found case.
        logger === null || logger === void 0 ? void 0 : logger.verbose("Bot registration not found, create a new one.");
        await teamsDevPortalClient_1.teamsDevPortalClient.createBotRegistration(appStudioToken, botRegistration, false);
    }
    else {
        // Update bot registration.
        logger === null || logger === void 0 ? void 0 : logger.verbose("Bot registration found, update it.");
        logger === null || logger === void 0 ? void 0 : logger.debug(`Existing bot registration: ${JSON.stringify(remoteBotRegistration)}`);
        const mergedBotRegistration = utils_1.Utils.mergeIBotRegistration(botRegistration, remoteBotRegistration);
        logger === null || logger === void 0 ? void 0 : logger.debug(`Merged bot registration: ${JSON.stringify(mergedBotRegistration)}`);
        await teamsDevPortalClient_1.teamsDevPortalClient.updateBotRegistration(appStudioToken, mergedBotRegistration);
    }
    return (0, teamsfx_api_1.ok)(remoteBotRegistration !== undefined);
}
exports.createOrUpdateBotRegistration = createOrUpdateBotRegistration;
//# sourceMappingURL=botFrameworkRegistration.js.map