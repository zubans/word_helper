"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.CoreDepsTelemetryAdapter = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const os_1 = tslib_1.__importDefault(require("os"));
const constant_1 = require("./constant");
const telemetry_1 = require("../../common/telemetry");
const common_1 = require("../utils/depsChecker/common");
class CoreDepsTelemetryAdapter {
    constructor(telemetryReporter) {
        this._telemetryComponentType = "core:debug:envchecker";
        this._telemetryReporter = telemetryReporter;
    }
    sendEvent(eventName, properties = {}, timecost) {
        this.addCommonProps(properties);
        const measurements = {};
        if (timecost) {
            measurements[constant_1.TelemetryMessurement.completionTime] = timecost;
        }
        this._telemetryReporter.sendTelemetryEvent(eventName, properties, measurements);
    }
    async sendEventWithDuration(eventName, action) {
        const start = performance.now();
        await action();
        // use seconds instead of milliseconds
        const timecost = Number(((performance.now() - start) / 1000).toFixed(2));
        this.sendEvent(eventName, {}, timecost);
    }
    sendUserErrorEvent(eventName, errorMessage) {
        const properties = {};
        const error = new teamsfx_api_1.UserError(this._telemetryComponentType, eventName, errorMessage);
        telemetry_1.telemetryUtils.fillInErrorProperties(properties, error);
        this._telemetryReporter.sendTelemetryErrorEvent(eventName, Object.assign(Object.assign({}, this.addCommonProps()), properties));
    }
    sendSystemErrorEvent(eventName, errorMessage, errorStack) {
        const properties = {};
        const error = new teamsfx_api_1.SystemError(this._telemetryComponentType, eventName, `errorMsg=${errorMessage},errorStack=${errorStack}`);
        error.stack = errorStack;
        telemetry_1.telemetryUtils.fillInErrorProperties(properties, error);
        this._telemetryReporter.sendTelemetryErrorEvent(eventName, Object.assign(Object.assign({}, this.addCommonProps()), properties));
    }
    addCommonProps(properties = {}) {
        properties[common_1.TelemetryMeasurement.OSArch] = os_1.default.arch();
        properties[common_1.TelemetryMeasurement.OSRelease] = os_1.default.release();
        properties[telemetry_1.TelemetryProperty.Component] = this._telemetryComponentType;
        return properties;
    }
}
exports.CoreDepsTelemetryAdapter = CoreDepsTelemetryAdapter;
//# sourceMappingURL=coreDepsTelemetryAdapter.js.map