"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.unzip = exports.downloadToTempFile = void 0;
const tslib_1 = require("tslib");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const constant_1 = require("../constant");
const tmp_1 = tslib_1.__importDefault(require("tmp"));
const axios_1 = tslib_1.__importDefault(require("axios"));
const util_1 = tslib_1.__importDefault(require("util"));
const adm_zip_1 = tslib_1.__importDefault(require("adm-zip"));
/**
 * @author Aocheng Wang <aochengwang@microsoft.com>
 */
/**
 * Download a file from URL and save to a temporary file.
 * The temp file can only be used during callback. After that the temp file is deleted.
 *  */
async function downloadToTempFile(url, options, callback) {
    // name is full path
    const { name, removeCallback } = tmp_1.default.fileSync();
    try {
        const writer = fs_extra_1.default.createWriteStream(name, { flags: "w" /* Open for write */ });
        const response = await axios_1.default.get(url, {
            responseType: "stream",
            headers: options.headers,
            timeout: options.timeout,
        });
        response.data.pipe(writer);
        if (response.status !== 200) {
            throw new Error(constant_1.Messages.failToDownloadFromUrl()
                .replace(/@Url/g, url)
                .replace(/@Status/g, response.status.toString()));
        }
        await new Promise((resolve, reject) => {
            writer.on("error", (err) => {
                reject(err);
            });
            writer.on("finish", () => {
                resolve();
            });
        });
        await callback(name);
    }
    finally {
        removeCallback();
    }
}
exports.downloadToTempFile = downloadToTempFile;
async function unzip(zipFilePath, destinationPath) {
    // Create all parent dirs of destinationPath.
    await fs_extra_1.default.mkdir(destinationPath, { recursive: true });
    const zip = new adm_zip_1.default(zipFilePath);
    // Don't use 2 parameter version: https://github.com/cthackers/adm-zip/issues/407#issuecomment-990086783
    await util_1.default.promisify(zip.extractAllToAsync)(destinationPath, true, false);
}
exports.unzip = unzip;
//# sourceMappingURL=downloadHelper.js.map