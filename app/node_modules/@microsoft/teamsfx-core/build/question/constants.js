"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiPluginStartOptions = exports.DeclarativeCopilotTypeOptions = exports.HubOptions = exports.HubTypes = exports.TeamsAppValidationOptions = exports.recommendedLocations = exports.CustomCopilotAssistantOptions = exports.CustomCopilotRagOptions = exports.SPFxVersionOptionIds = exports.NotificationTriggerOptions = exports.NotificationTriggers = exports.HostType = exports.MeArchitectureOptions = exports.ApiAuthOptions = exports.CapabilityOptions = exports.ProjectTypeOptions = exports.ScratchOptions = exports.getRuntime = exports.RuntimeOptions = exports.capabilitiesHavePythonOption = exports.apiPluginApiSpecOptionId = exports.ProgrammingLanguage = exports.CliQuestionName = exports.AppNamePattern = exports.QuestionNames = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const featureFlags_1 = require("../common/featureFlags");
const localizeUtils_1 = require("../common/localizeUtils");
const projectConfig_1 = require("../component/generator/officeXMLAddin/projectConfig");
var QuestionNames;
(function (QuestionNames) {
    QuestionNames["Scratch"] = "scratch";
    QuestionNames["SctatchYes"] = "scratch-yes";
    QuestionNames["AppName"] = "app-name";
    QuestionNames["Folder"] = "folder";
    QuestionNames["ProjectPath"] = "projectPath";
    QuestionNames["ProgrammingLanguage"] = "programming-language";
    QuestionNames["ProjectType"] = "project-type";
    QuestionNames["Capabilities"] = "capabilities";
    QuestionNames["BotTrigger"] = "bot-host-type-trigger";
    QuestionNames["Runtime"] = "runtime";
    QuestionNames["SPFxSolution"] = "spfx-solution";
    QuestionNames["SPFxInstallPackage"] = "spfx-install-latest-package";
    QuestionNames["SPFxFramework"] = "spfx-framework-type";
    QuestionNames["SPFxWebpartName"] = "spfx-webpart-name";
    QuestionNames["SPFxWebpartDesc"] = "spfx-webpart-desp";
    QuestionNames["SPFxFolder"] = "spfx-folder";
    QuestionNames["OfficeAddinFolder"] = "addin-project-folder";
    QuestionNames["OfficeAddinManifest"] = "addin-project-manifest";
    QuestionNames["OfficeAddinTemplate"] = "addin-template-select";
    QuestionNames["OfficeAddinHost"] = "addin-host";
    QuestionNames["OfficeAddinImport"] = "addin-import";
    QuestionNames["OfficeAddinFramework"] = "office-addin-framework-type";
    QuestionNames["Samples"] = "samples";
    QuestionNames["ReplaceContentUrl"] = "replaceContentUrl";
    QuestionNames["ReplaceWebsiteUrl"] = "replaceWebsiteUrl";
    QuestionNames["ReplaceBotIds"] = "replaceBotIds";
    QuestionNames["SafeProjectName"] = "safeProjectName";
    QuestionNames["RepalceTabUrl"] = "tdp-tab-url";
    QuestionNames["ValidateMethod"] = "validate-method";
    QuestionNames["AppPackagePath"] = "appPackagePath";
    QuestionNames["FromExistingApi"] = "from-existing-api";
    QuestionNames["ApiSpecLocation"] = "openapi-spec-location";
    QuestionNames["ApiOperation"] = "api-operation";
    QuestionNames["ApiPluginManifestPath"] = "external-api-plugin-manifest-path";
    QuestionNames["MeArchitectureType"] = "me-architecture";
    QuestionNames["ApiSpecApiKey"] = "api-key";
    QuestionNames["ApiSpecApiKeyConfirm"] = "api-key-confirm";
    QuestionNames["ApiAuth"] = "api-auth";
    QuestionNames["OauthClientSecret"] = "oauth-client-secret";
    QuestionNames["OauthClientId"] = "oauth-client-id";
    QuestionNames["OauthConfirm"] = "oauth-confirm";
    QuestionNames["CustomCopilotRag"] = "custom-copilot-rag";
    QuestionNames["CustomCopilotAssistant"] = "custom-copilot-agent";
    QuestionNames["LLMService"] = "llm-service";
    QuestionNames["OpenAIKey"] = "openai-key";
    QuestionNames["OpenAIEmbeddingModel"] = "openai-embedding-model";
    QuestionNames["AzureOpenAIKey"] = "azure-openai-key";
    QuestionNames["AzureOpenAIEndpoint"] = "azure-openai-endpoint";
    QuestionNames["AzureOpenAIDeploymentName"] = "azure-openai-deployment-name";
    QuestionNames["AzureOpenAIEmbeddingDeploymentName"] = "azure-openai-embedding-deployment-name";
    QuestionNames["AzureAISearchApiKey"] = "azure-ai-search-api-key";
    QuestionNames["AzureAISearchEndpoint"] = "azure-ai-search-endpoint";
    QuestionNames["Features"] = "features";
    QuestionNames["Env"] = "env";
    QuestionNames["SourceEnvName"] = "sourceEnvName";
    QuestionNames["TargetEnvName"] = "targetEnvName";
    QuestionNames["TargetResourceGroupName"] = "targetResourceGroupName";
    QuestionNames["NewResourceGroupName"] = "newResourceGroupName";
    QuestionNames["NewResourceGroupLocation"] = "newResourceGroupLocation";
    QuestionNames["NewTargetEnvName"] = "newTargetEnvName";
    QuestionNames["ExistingTabEndpoint"] = "existing-tab-endpoint";
    QuestionNames["TeamsAppManifestFilePath"] = "manifest-path";
    QuestionNames["LocalTeamsAppManifestFilePath"] = "local-manifest-path";
    QuestionNames["AadAppManifestFilePath"] = "manifest-file-path";
    QuestionNames["TeamsAppPackageFilePath"] = "app-package-file-path";
    QuestionNames["ConfirmManifest"] = "confirmManifest";
    QuestionNames["ConfirmLocalManifest"] = "confirmLocalManifest";
    QuestionNames["ConfirmAadManifest"] = "confirmAadManifest";
    QuestionNames["OutputZipPathParamName"] = "output-zip-path";
    QuestionNames["OutputManifestParamName"] = "output-manifest-path";
    QuestionNames["OutputFolderParamName"] = "output-folder";
    QuestionNames["M365Host"] = "m365-host";
    QuestionNames["ManifestPath"] = "manifest-path";
    QuestionNames["ManifestId"] = "manifest-id";
    QuestionNames["TeamsAppId"] = "teams-app-id";
    QuestionNames["TitleId"] = "title-id";
    QuestionNames["UserEmail"] = "email";
    QuestionNames["UninstallMode"] = "mode";
    QuestionNames["UninstallModeManifestId"] = "manifest-id";
    QuestionNames["UninstallModeEnv"] = "env";
    QuestionNames["UninstallModeTitleId"] = "title-id";
    QuestionNames["UninstallOptions"] = "options";
    QuestionNames["UninstallOptionM365"] = "m365-app";
    QuestionNames["UninstallOptionTDP"] = "app-registration";
    QuestionNames["UninstallOptionBot"] = "bot-framework-registration";
    QuestionNames["collaborationAppType"] = "collaborationType";
    QuestionNames["DestinationApiSpecFilePath"] = "destination-api-spec-location";
    QuestionNames["SyncManifest"] = "sync-manifest";
    QuestionNames["ApiPluginType"] = "api-plugin-type";
    QuestionNames["WithPlugin"] = "with-plugin";
    QuestionNames["ImportPlugin"] = "import-plugin";
    QuestionNames["PluginManifestFilePath"] = "plugin-manifest-path";
    QuestionNames["PluginOpenApiSpecFilePath"] = "plugin-opeanapi-spec-path";
})(QuestionNames = exports.QuestionNames || (exports.QuestionNames = {}));
exports.AppNamePattern = '^(?=(.*[\\da-zA-Z]){2})[a-zA-Z][^"<>:\\?/*&|\u0000-\u001F]*[^"\\s.<>:\\?/*&|\u0000-\u001F]$';
var CliQuestionName;
(function (CliQuestionName) {
    CliQuestionName["Capability"] = "capability";
})(CliQuestionName = exports.CliQuestionName || (exports.CliQuestionName = {}));
var ProgrammingLanguage;
(function (ProgrammingLanguage) {
    ProgrammingLanguage["JS"] = "javascript";
    ProgrammingLanguage["TS"] = "typescript";
    ProgrammingLanguage["CSharp"] = "csharp";
    ProgrammingLanguage["PY"] = "python";
    ProgrammingLanguage["Common"] = "common";
    ProgrammingLanguage["None"] = "none";
})(ProgrammingLanguage = exports.ProgrammingLanguage || (exports.ProgrammingLanguage = {}));
exports.apiPluginApiSpecOptionId = "api-spec";
exports.capabilitiesHavePythonOption = [
    "custom-copilot-basic",
    "custom-copilot-rag-azureAISearch",
    "custom-copilot-rag-customize",
    "custom-copilot-agent-new",
    "custom-copilot-agent-assistants-api",
    "custom-copilot-rag-customApi",
];
class RuntimeOptions {
    static NodeJS() {
        return {
            id: "node",
            label: "Node.js",
            detail: (0, localizeUtils_1.getLocalizedString)("core.RuntimeOptionNodeJS.detail"),
        };
    }
    static DotNet() {
        return {
            id: "dotnet",
            label: ".NET Core",
            detail: (0, localizeUtils_1.getLocalizedString)("core.RuntimeOptionDotNet.detail"),
        };
    }
}
exports.RuntimeOptions = RuntimeOptions;
function getRuntime(inputs) {
    let runtime = RuntimeOptions.NodeJS().id;
    if ((inputs === null || inputs === void 0 ? void 0 : inputs.platform) === teamsfx_api_1.Platform.VS) {
        runtime = RuntimeOptions.DotNet().id;
    }
    else if (featureFlags_1.featureFlagManager.getBooleanValue(featureFlags_1.FeatureFlags.CLIDotNet)) {
        runtime = inputs[QuestionNames.Runtime] || runtime;
    }
    return runtime;
}
exports.getRuntime = getRuntime;
class ScratchOptions {
    static yes() {
        return {
            id: "yes",
            label: (0, localizeUtils_1.getLocalizedString)("core.ScratchOptionYes.label"),
            detail: (0, localizeUtils_1.getLocalizedString)("core.ScratchOptionYes.detail"),
        };
    }
    static no() {
        return {
            id: "no",
            label: (0, localizeUtils_1.getLocalizedString)("core.ScratchOptionNo.label"),
            detail: (0, localizeUtils_1.getLocalizedString)("core.ScratchOptionNo.detail"),
        };
    }
    static all() {
        return [ScratchOptions.yes(), ScratchOptions.no()];
    }
}
exports.ScratchOptions = ScratchOptions;
class ProjectTypeOptions {
    static getCreateGroupName() {
        return featureFlags_1.featureFlagManager.getBooleanValue(featureFlags_1.FeatureFlags.ChatParticipantUIEntries)
            ? (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.projectType.createGroup.title")
            : undefined;
    }
    static tab(platform) {
        return {
            id: "tab-type",
            label: `${platform === teamsfx_api_1.Platform.VSCode ? "$(browser) " : ""}${(0, localizeUtils_1.getLocalizedString)("core.TabOption.label")}`,
            detail: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.projectType.tab.detail"),
            groupName: ProjectTypeOptions.getCreateGroupName(),
        };
    }
    static bot(platform) {
        return {
            id: "bot-type",
            label: `${platform === teamsfx_api_1.Platform.VSCode ? "$(hubot) " : ""}${(0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.projectType.bot.label")}`,
            detail: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.projectType.bot.detail"),
            groupName: ProjectTypeOptions.getCreateGroupName(),
        };
    }
    static me(platform) {
        return {
            id: "me-type",
            label: `${platform === teamsfx_api_1.Platform.VSCode ? "$(symbol-keyword) " : ""}${(0, localizeUtils_1.getLocalizedString)("core.MessageExtensionOption.label")}`,
            detail: (0, featureFlags_1.isCopilotExtensionEnabled)()
                ? (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.projectType.messageExtension.copilotEnabled.detail")
                : (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.projectType.messageExtension.detail"),
            groupName: ProjectTypeOptions.getCreateGroupName(),
        };
    }
    static outlookAddin(platform) {
        return {
            id: "outlook-addin-type",
            label: `${platform === teamsfx_api_1.Platform.VSCode ? "$(mail) " : ""}${(0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.projectType.outlookAddin.label")}`,
            detail: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.projectType.outlookAddin.detail"),
            groupName: ProjectTypeOptions.getCreateGroupName(),
        };
    }
    static officeMetaOS(platform) {
        return {
            id: "office-meta-os-type",
            label: `${platform === teamsfx_api_1.Platform.VSCode ? "$(teamsfx-m365) " : ""}${(0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.projectType.officeAddin.label")}`,
            detail: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.projectType.officeAddin.detail"),
            groupName: ProjectTypeOptions.getCreateGroupName(),
        };
    }
    static officeAddin(platform) {
        return {
            id: "office-addin-type",
            label: `${platform === teamsfx_api_1.Platform.VSCode ? "$(extensions) " : ""}${(0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.projectType.officeAddin.label")}`,
            detail: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.projectType.officeAddin.detail"),
            groupName: ProjectTypeOptions.getCreateGroupName(),
        };
    }
    static officeAddinAllIds(platform) {
        return [
            ProjectTypeOptions.officeMetaOS(platform).id,
            ProjectTypeOptions.officeAddin(platform).id,
            ProjectTypeOptions.outlookAddin(platform).id,
        ];
    }
    static copilotExtension(platform) {
        return {
            id: "copilot-agent-type",
            label: `${platform === teamsfx_api_1.Platform.VSCode ? "$(teamsfx-copilot-plugin) " : ""}${(0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.projectType.copilotExtension.label")}`,
            detail: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.projectType.copilotExtension.detail"),
            groupName: ProjectTypeOptions.getCreateGroupName(),
        };
    }
    static customCopilot(platform) {
        return {
            id: "custom-copilot-type",
            label: `${platform === teamsfx_api_1.Platform.VSCode ? "$(teamsfx-custom-copilot) " : ""}${(0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.projectType.customCopilot.label")}`,
            detail: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.projectType.customCopilot.detail"),
            groupName: ProjectTypeOptions.getCreateGroupName(),
        };
    }
    static startWithGithubCopilot() {
        return {
            id: "start-with-github-copilot",
            label: `$(comment-discussion) ${(0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.projectType.copilotHelp.label")}`,
            detail: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.projectType.copilotHelp.detail"),
            groupName: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.projectType.copilotGroup.title"),
        };
    }
}
exports.ProjectTypeOptions = ProjectTypeOptions;
class CapabilityOptions {
    // empty
    static empty() {
        return {
            id: "empty",
            label: "Empty",
        };
    }
    // bot
    static basicBot() {
        return {
            id: "bot",
            label: `${(0, localizeUtils_1.getLocalizedString)("core.BotNewUIOption.label")}`,
            detail: (0, localizeUtils_1.getLocalizedString)("core.BotNewUIOption.detail"),
        };
    }
    static notificationBot() {
        return {
            // For default option, id and cliName must be the same
            id: "notification",
            label: `${(0, localizeUtils_1.getLocalizedString)("core.NotificationOption.label")}`,
            detail: (0, localizeUtils_1.getLocalizedString)("core.NotificationOption.detail"),
            data: "https://aka.ms/teamsfx-send-notification",
            buttons: [
                {
                    iconPath: "file-symlink-file",
                    tooltip: (0, localizeUtils_1.getLocalizedString)("core.option.github"),
                    command: "fx-extension.openTutorial",
                },
            ],
        };
    }
    static commandBot() {
        return {
            // id must match cli `yargsHelp`
            id: "command-bot",
            label: `${(0, localizeUtils_1.getLocalizedString)("core.CommandAndResponseOption.label")}`,
            detail: (0, localizeUtils_1.getLocalizedString)("core.CommandAndResponseOption.detail"),
            data: "https://aka.ms/teamsfx-create-command",
            buttons: [
                {
                    iconPath: "file-symlink-file",
                    tooltip: (0, localizeUtils_1.getLocalizedString)("core.option.github"),
                    command: "fx-extension.openTutorial",
                },
            ],
        };
    }
    static workflowBot(inputs) {
        const item = {
            // id must match cli `yargsHelp`
            id: "workflow-bot",
            label: `${(0, localizeUtils_1.getLocalizedString)("core.WorkflowOption.label")}`,
            detail: (0, localizeUtils_1.getLocalizedString)("core.WorkflowOption.detail"),
            data: "https://aka.ms/teamsfx-create-workflow",
            buttons: [
                {
                    iconPath: "file-symlink-file",
                    tooltip: (0, localizeUtils_1.getLocalizedString)("core.option.github"),
                    command: "fx-extension.openTutorial",
                },
            ],
        };
        if (inputs === null || inputs === void 0 ? void 0 : inputs.inProductDoc) {
            item.data = "cardActionResponse";
            item.buttons = [
                {
                    iconPath: "file-code",
                    tooltip: (0, localizeUtils_1.getLocalizedString)("core.option.inProduct"),
                    command: "fx-extension.openTutorial",
                },
            ];
        }
        return item;
    }
    //tab
    static nonSsoTab() {
        return {
            id: "tab-non-sso",
            label: `${(0, localizeUtils_1.getLocalizedString)("core.TabNonSso.label")}`,
            detail: (0, localizeUtils_1.getLocalizedString)("core.TabNonSso.detail"),
            description: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.option.description.worksInOutlookM365"),
        };
    }
    static tab() {
        return {
            id: "tab",
            label: (0, localizeUtils_1.getLocalizedString)("core.TabOption.label"),
            description: (0, localizeUtils_1.getLocalizedString)("core.TabOption.description"),
            detail: (0, localizeUtils_1.getLocalizedString)("core.TabOption.detail"),
        };
    }
    static m365SsoLaunchPage() {
        return {
            id: "sso-launch-page",
            label: `${(0, localizeUtils_1.getLocalizedString)("core.M365SsoLaunchPageOptionItem.label")}`,
            detail: (0, localizeUtils_1.getLocalizedString)("core.M365SsoLaunchPageOptionItem.detail"),
            description: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.option.description.worksInOutlookM365"),
        };
    }
    static dashboardTab() {
        return {
            id: "dashboard-tab",
            label: `${(0, localizeUtils_1.getLocalizedString)("core.DashboardOption.label")}`,
            detail: (0, localizeUtils_1.getLocalizedString)("core.DashboardOption.detail"),
            description: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.option.description.worksInOutlookM365"),
            data: "https://aka.ms/teamsfx-dashboard-app",
            buttons: [
                {
                    iconPath: "file-symlink-file",
                    tooltip: (0, localizeUtils_1.getLocalizedString)("core.option.github"),
                    command: "fx-extension.openTutorial",
                },
            ],
        };
    }
    static SPFxTab() {
        return {
            id: "tab-spfx",
            label: (0, localizeUtils_1.getLocalizedString)("core.TabSPFxOption.labelNew"),
            description: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.option.description.worksInOutlookM365"),
            detail: (0, localizeUtils_1.getLocalizedString)("core.TabSPFxOption.detailNew"),
        };
    }
    //message extension
    static linkUnfurling() {
        return {
            id: "link-unfurling",
            label: `${(0, localizeUtils_1.getLocalizedString)("core.LinkUnfurlingOption.label")}`,
            detail: (0, localizeUtils_1.getLocalizedString)("core.LinkUnfurlingOption.detail"),
            description: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.option.description.worksInOutlook"),
        };
    }
    static m365SearchMe() {
        return {
            id: "search-app",
            label: `${(0, localizeUtils_1.getLocalizedString)("core.M365SearchAppOptionItem.label")}`,
            detail: (0, featureFlags_1.isCopilotExtensionEnabled)()
                ? (0, localizeUtils_1.getLocalizedString)("core.M365SearchAppOptionItem.copilot.detail")
                : (0, localizeUtils_1.getLocalizedString)("core.M365SearchAppOptionItem.detail"),
        };
    }
    static SearchMe() {
        return {
            id: "search-message-extension",
            label: `${(0, localizeUtils_1.getLocalizedString)("core.M365SearchAppOptionItem.label")}`,
            detail: (0, localizeUtils_1.getLocalizedString)("core.SearchAppOptionItem.detail"),
        };
    }
    static collectFormMe() {
        return {
            id: "collect-form-message-extension",
            label: `${(0, localizeUtils_1.getLocalizedString)("core.MessageExtensionOption.labelNew")}`,
            detail: (0, localizeUtils_1.getLocalizedString)("core.MessageExtensionOption.detail"),
        };
    }
    static me() {
        return {
            id: "message-extension",
            label: (0, localizeUtils_1.getLocalizedString)("core.MessageExtensionOption.label"),
            description: (0, localizeUtils_1.getLocalizedString)("core.MessageExtensionOption.description"),
            detail: (0, localizeUtils_1.getLocalizedString)("core.MessageExtensionOption.detail"),
        };
    }
    static bots(inputs) {
        if (inputs && getRuntime(inputs) === RuntimeOptions.DotNet().id) {
            return [
                CapabilityOptions.basicBot(),
                CapabilityOptions.aiBot(),
                CapabilityOptions.aiAssistantBot(),
                CapabilityOptions.notificationBot(),
                CapabilityOptions.commandBot(),
                CapabilityOptions.workflowBot(inputs),
            ];
        }
        return [
            CapabilityOptions.basicBot(),
            CapabilityOptions.notificationBot(),
            CapabilityOptions.commandBot(),
            CapabilityOptions.workflowBot(inputs),
        ];
    }
    static tabs() {
        return [
            CapabilityOptions.nonSsoTab(),
            CapabilityOptions.m365SsoLaunchPage(),
            CapabilityOptions.dashboardTab(),
            CapabilityOptions.SPFxTab(),
        ];
    }
    static dotnetCaps(inputs) {
        const capabilities = [
            CapabilityOptions.empty(),
            ...CapabilityOptions.copilotExtensions(inputs),
            ...CapabilityOptions.customCopilots(),
            ...CapabilityOptions.bots(inputs),
            CapabilityOptions.nonSsoTab(),
            CapabilityOptions.tab(),
            ...CapabilityOptions.collectMECaps(),
        ];
        if (featureFlags_1.featureFlagManager.getBooleanValue(featureFlags_1.FeatureFlags.TdpTemplateCliTest)) {
            capabilities.push(CapabilityOptions.me());
        }
        return capabilities;
    }
    /**
     * Collect all capabilities for message extension, including dotnet and nodejs.
     * @returns OptionItem[] capability list
     */
    static collectMECaps() {
        return [
            CapabilityOptions.m365SearchMe(),
            CapabilityOptions.collectFormMe(),
            CapabilityOptions.SearchMe(),
            CapabilityOptions.linkUnfurling(),
        ];
    }
    static mes(inputs) {
        return inputs !== undefined && getRuntime(inputs) === RuntimeOptions.DotNet().id
            ? [
                CapabilityOptions.SearchMe(),
                CapabilityOptions.collectFormMe(),
                CapabilityOptions.linkUnfurling(),
            ]
            : [
                CapabilityOptions.m365SearchMe(),
                CapabilityOptions.collectFormMe(),
                CapabilityOptions.linkUnfurling(),
            ];
    }
    static officeAddinStaticCapabilities(host) {
        const items = [];
        for (const h of Object.keys(projectConfig_1.OfficeAddinProjectConfig)) {
            if (host && h !== host)
                continue;
            const hostValue = projectConfig_1.OfficeAddinProjectConfig[h];
            for (const capability of Object.keys(hostValue)) {
                const capabilityValue = hostValue[capability];
                items.push({
                    id: capability,
                    label: (0, localizeUtils_1.getLocalizedString)(capabilityValue.title),
                    detail: (0, localizeUtils_1.getLocalizedString)(capabilityValue.detail),
                });
            }
        }
        return items;
    }
    static officeAddinDynamicCapabilities(projectType, host) {
        const items = [];
        const isOutlookAddin = projectType === ProjectTypeOptions.outlookAddin().id;
        const isMetaOSAddin = projectType === ProjectTypeOptions.officeMetaOS().id;
        const isOfficeAddin = projectType === ProjectTypeOptions.officeAddin().id;
        const pushToItems = (option) => {
            const capabilityValue = projectConfig_1.OfficeAddinProjectConfig.json[option];
            items.push({
                id: option,
                label: (0, localizeUtils_1.getLocalizedString)(capabilityValue.title),
                detail: (0, localizeUtils_1.getLocalizedString)(capabilityValue.detail),
            });
        };
        if (isOutlookAddin || isMetaOSAddin || isOfficeAddin) {
            pushToItems("json-taskpane");
            if (isOutlookAddin) {
                items.push(CapabilityOptions.outlookAddinImport());
            }
            else if (isMetaOSAddin) {
                items.push(CapabilityOptions.officeAddinImport());
            }
            else {
                items.push(CapabilityOptions.officeContentAddin());
                items.push(CapabilityOptions.officeAddinImport());
            }
        }
        else {
            if (host) {
                const hostValue = projectConfig_1.OfficeAddinProjectConfig[host];
                for (const capability of Object.keys(hostValue)) {
                    const capabilityValue = hostValue[capability];
                    items.push({
                        id: capability,
                        label: (0, localizeUtils_1.getLocalizedString)(capabilityValue.title),
                        detail: (0, localizeUtils_1.getLocalizedString)(capabilityValue.detail),
                    });
                }
            }
        }
        return items;
    }
    static copilotExtensions(inputs, isStatic) {
        if (isStatic) {
            return [CapabilityOptions.apiPlugin(), CapabilityOptions.declarativeCopilot()];
        }
        if (inputs && getRuntime(inputs) === RuntimeOptions.DotNet().id) {
            return [CapabilityOptions.apiPlugin()];
        }
        else if ((0, featureFlags_1.isCopilotExtensionEnabled)()) {
            return [CapabilityOptions.apiPlugin(), CapabilityOptions.declarativeCopilot()];
        }
        else {
            return [CapabilityOptions.declarativeCopilot()];
        }
    }
    static customCopilots() {
        return [
            CapabilityOptions.customCopilotBasic(),
            CapabilityOptions.customCopilotRag(),
            CapabilityOptions.customCopilotAssistant(),
        ];
    }
    static tdpIntegrationCapabilities() {
        // templates that are used by TDP integration only
        return [
            CapabilityOptions.me(),
            CapabilityOptions.botAndMe(),
            CapabilityOptions.nonSsoTabAndBot(),
        ];
    }
    /**
     * static capability list, which does not depend on any feature flags
     */
    static staticAll(inputs) {
        const capabilityOptions = [
            CapabilityOptions.empty(),
            ...CapabilityOptions.bots(inputs),
            ...CapabilityOptions.tabs(),
            ...CapabilityOptions.collectMECaps(),
            ...CapabilityOptions.copilotExtensions(inputs, true),
            ...CapabilityOptions.customCopilots(),
            ...CapabilityOptions.tdpIntegrationCapabilities(),
        ];
        capabilityOptions.push(...CapabilityOptions.officeAddinStaticCapabilities());
        return capabilityOptions;
    }
    /**
     * dynamic capability list, which depends on feature flags
     */
    static all(inputs) {
        if (inputs && getRuntime(inputs) === RuntimeOptions.DotNet().id) {
            return CapabilityOptions.dotnetCaps(inputs);
        }
        const capabilityOptions = [
            ...CapabilityOptions.bots(inputs),
            ...CapabilityOptions.tabs(),
            ...CapabilityOptions.collectMECaps(),
        ];
        capabilityOptions.push(...CapabilityOptions.copilotExtensions());
        capabilityOptions.push(...CapabilityOptions.customCopilots());
        if (featureFlags_1.featureFlagManager.getBooleanValue(featureFlags_1.FeatureFlags.TdpTemplateCliTest)) {
            // test templates that are used by TDP integration only
            capabilityOptions.push(...CapabilityOptions.tdpIntegrationCapabilities());
        }
        capabilityOptions.push(...CapabilityOptions.officeAddinDynamicCapabilities(inputs === null || inputs === void 0 ? void 0 : inputs.projectType, inputs === null || inputs === void 0 ? void 0 : inputs.host));
        return capabilityOptions;
    }
    static outlookAddinImport() {
        return {
            id: "outlook-addin-import",
            label: (0, localizeUtils_1.getLocalizedString)("core.importAddin.label"),
            detail: (0, localizeUtils_1.getLocalizedString)("core.importAddin.detail"),
        };
    }
    static officeAddinImport() {
        return {
            id: "office-addin-import",
            label: (0, localizeUtils_1.getLocalizedString)("core.importOfficeAddin.label"),
            detail: (0, localizeUtils_1.getLocalizedString)("core.importAddin.detail"),
            description: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.option.description.previewOnWindow"),
        };
    }
    static officeContentAddin() {
        return {
            id: "office-content-addin",
            label: (0, localizeUtils_1.getLocalizedString)("core.officeContentAddin.label"),
            detail: (0, localizeUtils_1.getLocalizedString)("core.officeContentAddin.detail"),
        };
    }
    static nonSsoTabAndBot() {
        return {
            id: "TabNonSsoAndBot",
            label: "", // No need to set display name as this option won't be shown in UI
        };
    }
    static botAndMe() {
        return {
            id: "BotAndMessageExtension",
            label: "", // No need to set display name as this option won't be shown in UI
        };
    }
    // copilot extension - api plugin
    static apiPlugin() {
        return {
            id: "api-plugin",
            label: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.projectType.copilotPlugin.label"),
            detail: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.projectType.copilotPlugin.detail"),
        };
    }
    // copilot extension - declarative copilot
    static declarativeCopilot() {
        return {
            id: "declarative-agent",
            label: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.projectType.declarativeCopilot.label"),
            detail: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.projectType.declarativeCopilot.detail"),
        };
    }
    static aiBot() {
        return {
            id: "ai-bot",
            label: (0, localizeUtils_1.getLocalizedString)("core.aiBotOption.label"),
            detail: (0, localizeUtils_1.getLocalizedString)("core.aiBotOption.detail"),
        };
    }
    static aiAssistantBot() {
        return {
            id: "ai-assistant-bot",
            label: (0, localizeUtils_1.getLocalizedString)("core.aiAssistantBotOption.label"),
            detail: (0, localizeUtils_1.getLocalizedString)("core.aiAssistantBotOption.detail"),
            description: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.option.description.preview"),
        };
    }
    // custom copilot
    static customCopilotBasic() {
        const description = featureFlags_1.featureFlagManager.getBooleanValue(featureFlags_1.FeatureFlags.CEAEnabled)
            ? (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.capability.customEngineAgent.description")
            : undefined;
        return {
            id: "custom-copilot-basic",
            label: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.capability.customCopilotBasicOption.label"),
            detail: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.capability.customCopilotBasicOption.detail"),
            description: description,
        };
    }
    static customCopilotRag() {
        const description = featureFlags_1.featureFlagManager.getBooleanValue(featureFlags_1.FeatureFlags.CEAEnabled)
            ? (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.capability.customEngineAgent.description")
            : undefined;
        return {
            id: "custom-copilot-rag",
            label: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.capability.customCopilotRagOption.label"),
            detail: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.capability.customCopilotRagOption.detail"),
            description: description,
        };
    }
    static customCopilotAssistant() {
        const description = featureFlags_1.featureFlagManager.getBooleanValue(featureFlags_1.FeatureFlags.CEAEnabled)
            ? (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.capability.customEngineAgent.description")
            : undefined;
        return {
            id: "custom-copilot-agent",
            label: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.capability.customCopilotAssistantOption.label"),
            detail: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.capability.customCopilotAssistantOption.detail"),
            description: description,
        };
    }
}
exports.CapabilityOptions = CapabilityOptions;
class ApiAuthOptions {
    static none() {
        return {
            id: "none",
            label: "None",
        };
    }
    static apiKey() {
        return {
            id: "api-key",
            label: "API Key (Bearer Token Auth)",
        };
    }
    static microsoftEntra() {
        return {
            id: "microsoft-entra",
            label: "Microsoft Entra",
        };
    }
    static oauth() {
        return {
            id: "oauth",
            label: "OAuth",
        };
    }
    static all() {
        return [
            ApiAuthOptions.none(),
            ApiAuthOptions.apiKey(),
            ApiAuthOptions.microsoftEntra(),
            ApiAuthOptions.oauth(),
        ];
    }
}
exports.ApiAuthOptions = ApiAuthOptions;
class MeArchitectureOptions {
    static botMe() {
        return {
            id: "bot",
            label: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.capability.botMessageExtension.label"),
            detail: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.capability.botMessageExtension.detail"),
            description: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.option.description.worksInOutlook"),
        };
    }
    static botPlugin() {
        return {
            id: "bot-plugin",
            label: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.capability.botMessageExtension.label"),
            detail: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.capability.botMessageExtension.detail"),
            description: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.option.description.worksInOutlookCopilot"),
        };
    }
    static newApi() {
        return {
            id: "new-api",
            label: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.capability.copilotPluginNewApiOption.label"),
            detail: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.capability.messageExtensionNewApiOption.detail"),
        };
    }
    static apiSpec() {
        return {
            id: "api-spec",
            label: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.capability.copilotPluginApiSpecOption.label"),
            detail: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.capability.messageExtensionApiSpecOption.detail"),
        };
    }
    static all() {
        return [
            MeArchitectureOptions.newApi(),
            MeArchitectureOptions.apiSpec(),
            (0, featureFlags_1.isCopilotExtensionEnabled)()
                ? MeArchitectureOptions.botPlugin()
                : MeArchitectureOptions.botMe(),
        ];
    }
    static staticAll() {
        return [
            MeArchitectureOptions.newApi(),
            MeArchitectureOptions.apiSpec(),
            MeArchitectureOptions.botPlugin(),
            MeArchitectureOptions.botMe(),
        ];
    }
}
exports.MeArchitectureOptions = MeArchitectureOptions;
var HostType;
(function (HostType) {
    HostType["AppService"] = "app-service";
    HostType["Functions"] = "azure-functions";
})(HostType = exports.HostType || (exports.HostType = {}));
exports.NotificationTriggers = {
    HTTP: "http",
    TIMER: "timer",
};
class NotificationTriggerOptions {
    static appService() {
        return {
            id: "http-express",
            hostType: HostType.AppService,
            label: (0, localizeUtils_1.getLocalizedString)("plugins.bot.triggers.http-express.label"),
            description: (0, localizeUtils_1.getLocalizedString)("plugins.bot.triggers.http-express.description"),
            detail: (0, localizeUtils_1.getLocalizedString)("plugins.bot.triggers.http-express.detail"),
        };
    }
    static appServiceForVS() {
        return {
            id: "http-webapi",
            hostType: HostType.AppService,
            label: (0, localizeUtils_1.getLocalizedString)("plugins.bot.triggers.http-webapi.label"),
            description: (0, localizeUtils_1.getLocalizedString)("plugins.bot.triggers.http-webapi.description"),
            detail: (0, localizeUtils_1.getLocalizedString)("plugins.bot.triggers.http-webapi.detail"),
        };
    }
    // NOTE: id must be the sample as cliName to prevent parsing error for CLI default value.
    static functionsTimerTrigger() {
        return {
            id: "timer-functions",
            hostType: HostType.Functions,
            triggers: [exports.NotificationTriggers.TIMER],
            label: (0, localizeUtils_1.getLocalizedString)("plugins.bot.triggers.timer-functions.label"),
            description: (0, localizeUtils_1.getLocalizedString)("plugins.bot.triggers.timer-functions.description"),
            detail: (0, localizeUtils_1.getLocalizedString)("plugins.bot.triggers.timer-functions.detail"),
        };
    }
    static functionsTimerTriggerIsolated() {
        return {
            id: "timer-functions-isolated",
            hostType: HostType.Functions,
            triggers: [exports.NotificationTriggers.TIMER],
            label: (0, localizeUtils_1.getLocalizedString)("plugins.bot.triggers.timer-functions.label"),
            description: (0, localizeUtils_1.getLocalizedString)("plugins.bot.triggers.timer-functions.description"),
            detail: (0, localizeUtils_1.getLocalizedString)("plugins.bot.triggers.timer-functions.detail"),
        };
    }
    static functionsHttpAndTimerTrigger() {
        return {
            id: "http-and-timer-functions",
            hostType: HostType.Functions,
            triggers: [exports.NotificationTriggers.HTTP, exports.NotificationTriggers.TIMER],
            label: (0, localizeUtils_1.getLocalizedString)("plugins.bot.triggers.http-and-timer-functions.label"),
            description: (0, localizeUtils_1.getLocalizedString)("plugins.bot.triggers.http-and-timer-functions.description"),
            detail: (0, localizeUtils_1.getLocalizedString)("plugins.bot.triggers.http-and-timer-functions.detail"),
        };
    }
    static functionsHttpAndTimerTriggerIsolated() {
        return {
            id: "http-and-timer-functions-isolated",
            hostType: HostType.Functions,
            triggers: [exports.NotificationTriggers.HTTP, exports.NotificationTriggers.TIMER],
            label: (0, localizeUtils_1.getLocalizedString)("plugins.bot.triggers.http-and-timer-functions.label"),
            description: (0, localizeUtils_1.getLocalizedString)("plugins.bot.triggers.http-and-timer-functions.description"),
            detail: (0, localizeUtils_1.getLocalizedString)("plugins.bot.triggers.http-and-timer-functions.detail"),
        };
    }
    static functionsHttpTrigger() {
        return {
            id: "http-functions",
            hostType: HostType.Functions,
            triggers: [exports.NotificationTriggers.HTTP],
            label: (0, localizeUtils_1.getLocalizedString)("plugins.bot.triggers.http-functions.label"),
            description: (0, localizeUtils_1.getLocalizedString)("plugins.bot.triggers.http-functions.description"),
            detail: (0, localizeUtils_1.getLocalizedString)("plugins.bot.triggers.http-functions.detail"),
        };
    }
    static functionsHttpTriggerIsolated() {
        return {
            id: "http-functions-isolated",
            hostType: HostType.Functions,
            triggers: [exports.NotificationTriggers.HTTP],
            label: (0, localizeUtils_1.getLocalizedString)("plugins.bot.triggers.http-functions.label"),
            description: (0, localizeUtils_1.getLocalizedString)("plugins.bot.triggers.http-functions.description"),
            detail: (0, localizeUtils_1.getLocalizedString)("plugins.bot.triggers.http-functions.detail"),
        };
    }
    static functionsTriggers() {
        return [
            NotificationTriggerOptions.functionsHttpAndTimerTrigger(),
            NotificationTriggerOptions.functionsHttpTrigger(),
            NotificationTriggerOptions.functionsTimerTrigger(),
        ];
    }
    static all() {
        return [
            NotificationTriggerOptions.appService(),
            NotificationTriggerOptions.appServiceForVS(),
            NotificationTriggerOptions.functionsHttpAndTimerTrigger(),
            NotificationTriggerOptions.functionsHttpTrigger(),
            NotificationTriggerOptions.functionsTimerTrigger(),
        ];
    }
}
exports.NotificationTriggerOptions = NotificationTriggerOptions;
var SPFxVersionOptionIds;
(function (SPFxVersionOptionIds) {
    SPFxVersionOptionIds["installLocally"] = "true";
    SPFxVersionOptionIds["globalPackage"] = "false";
})(SPFxVersionOptionIds = exports.SPFxVersionOptionIds || (exports.SPFxVersionOptionIds = {}));
class CustomCopilotRagOptions {
    static customize() {
        return {
            id: "custom-copilot-rag-customize",
            label: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.capability.customCopilotRagCustomizeOption.label"),
            detail: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.capability.customCopilotRagCustomizeOption.detail"),
        };
    }
    static azureAISearch() {
        return {
            id: "custom-copilot-rag-azureAISearch",
            label: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.capability.customCopilotRagAzureAISearchOption.label"),
            detail: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.capability.customCopilotRagAzureAISearchOption.detail"),
        };
    }
    static customApi() {
        return {
            id: "custom-copilot-rag-customApi",
            label: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.capability.customCopilotRagCustomApiOption.label"),
            detail: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.capability.customCopilotRagCustomApiOption.detail"),
            description: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.option.description.preview"),
        };
    }
    static microsoft365() {
        return {
            id: "custom-copilot-rag-microsoft365",
            label: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.capability.customCopilotRagMicrosoft365Option.label"),
            detail: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.capability.customCopilotRagMicrosoft365Option.detail"),
        };
    }
    static all() {
        return [
            CustomCopilotRagOptions.customize(),
            CustomCopilotRagOptions.azureAISearch(),
            CustomCopilotRagOptions.customApi(),
            CustomCopilotRagOptions.microsoft365(),
        ];
    }
}
exports.CustomCopilotRagOptions = CustomCopilotRagOptions;
class CustomCopilotAssistantOptions {
    static new() {
        return {
            id: "custom-copilot-agent-new",
            label: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.capability.customCopilotAssistantNewOption.label"),
            detail: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.capability.customCopilotAssistantNewOption.detail"),
        };
    }
    static assistantsApi() {
        return {
            id: "custom-copilot-agent-assistants-api",
            label: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.capability.customCopilotAssistantAssistantsApiOption.label"),
            detail: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.capability.customCopilotAssistantAssistantsApiOption.detail"),
            description: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.option.description.preview"),
        };
    }
    static all() {
        return [CustomCopilotAssistantOptions.new(), CustomCopilotAssistantOptions.assistantsApi()];
    }
}
exports.CustomCopilotAssistantOptions = CustomCopilotAssistantOptions;
exports.recommendedLocations = [
    "South Africa North",
    "Australia East",
    "Central India",
    "East Asia",
    "Japan East",
    "Korea Central",
    "Southeast Asia",
    "Canada Central",
    "France Central",
    "Germany West Central",
    "Italy North",
    "North Europe",
    "Norway East",
    "Poland Central",
    "Sweden Central",
    "Switzerland North",
    "UK South",
    "West Europe",
    "Israel Central",
    "Qatar Central",
    "UAE North",
    "Brazil South",
    "Central US",
    "East US",
    "East US 2",
    "South Central US",
    "West US 2",
    "West US 3",
];
class TeamsAppValidationOptions {
    static schema() {
        return {
            id: "validateAgainstSchema",
            label: (0, localizeUtils_1.getLocalizedString)("core.selectValidateMethodQuestion.validate.schemaOption"),
        };
    }
    static package() {
        return {
            id: "validateAgainstPackage",
            label: (0, localizeUtils_1.getLocalizedString)("core.selectValidateMethodQuestion.validate.appPackageOption"),
        };
    }
    static testCases() {
        return {
            id: "validateWithTestCases",
            label: (0, localizeUtils_1.getLocalizedString)("core.selectValidateMethodQuestion.validate.testCasesOption"),
            description: (0, localizeUtils_1.getLocalizedString)("core.selectValidateMethodQuestion.validate.testCasesOptionDescription"),
        };
    }
}
exports.TeamsAppValidationOptions = TeamsAppValidationOptions;
var HubTypes;
(function (HubTypes) {
    HubTypes["teams"] = "teams";
    HubTypes["outlook"] = "outlook";
    HubTypes["office"] = "office";
})(HubTypes = exports.HubTypes || (exports.HubTypes = {}));
class HubOptions {
    static teams() {
        return {
            id: "teams",
            label: "Teams",
        };
    }
    static outlook() {
        return {
            id: "outlook",
            label: "Outlook",
        };
    }
    static office() {
        return {
            id: "office",
            label: "the Microsoft 365 app",
        };
    }
    static all() {
        return [this.teams(), this.outlook(), this.office()];
    }
}
exports.HubOptions = HubOptions;
class DeclarativeCopilotTypeOptions {
    static noPlugin() {
        return {
            id: "no",
            label: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.noPlugin.label"),
            detail: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.noPlugin.detail"),
        };
    }
    static withPlugin() {
        return {
            id: "yes",
            label: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.addPlugin.label"),
            detail: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.addPlugin.detail"),
        };
    }
    static all() {
        return [DeclarativeCopilotTypeOptions.noPlugin(), DeclarativeCopilotTypeOptions.withPlugin()];
    }
}
exports.DeclarativeCopilotTypeOptions = DeclarativeCopilotTypeOptions;
class ApiPluginStartOptions {
    static newApi() {
        return {
            id: "new-api",
            label: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.capability.copilotPluginNewApiOption.label"),
            detail: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.capability.copilotPluginNewApiOption.detail"),
        };
    }
    static apiSpec() {
        return {
            id: "api-spec",
            label: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.capability.copilotPluginApiSpecOption.label"),
            detail: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.capability.copilotPluginApiSpecOption.detail"),
        };
    }
    static existingPlugin() {
        return {
            id: "existing-plugin",
            label: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.apiPlugin.importPlugin.label"),
            detail: (0, localizeUtils_1.getLocalizedString)("core.createProjectQuestion.apiPlugin.importPlugin.detail"),
        };
    }
    static staticAll(doesProjectExists) {
        return doesProjectExists
            ? [ApiPluginStartOptions.apiSpec(), ApiPluginStartOptions.existingPlugin()]
            : [
                ApiPluginStartOptions.newApi(),
                ApiPluginStartOptions.apiSpec(),
                ApiPluginStartOptions.existingPlugin(),
            ];
    }
    static all(inputs, doesProjectExists) {
        if (doesProjectExists) {
            return [ApiPluginStartOptions.apiSpec(), ApiPluginStartOptions.existingPlugin()];
        }
        else if (inputs[QuestionNames.Capabilities] === CapabilityOptions.declarativeCopilot().id) {
            return [
                ApiPluginStartOptions.newApi(),
                ApiPluginStartOptions.apiSpec(),
                ApiPluginStartOptions.existingPlugin(),
            ];
        }
        else {
            return [ApiPluginStartOptions.newApi(), ApiPluginStartOptions.apiSpec()];
        }
    }
}
exports.ApiPluginStartOptions = ApiPluginStartOptions;
//# sourceMappingURL=constants.js.map