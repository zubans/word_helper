import { Inputs, OptionItem, Platform } from "@microsoft/teamsfx-api";
export declare enum QuestionNames {
    Scratch = "scratch",
    SctatchYes = "scratch-yes",
    AppName = "app-name",
    Folder = "folder",
    ProjectPath = "projectPath",
    ProgrammingLanguage = "programming-language",
    ProjectType = "project-type",
    Capabilities = "capabilities",
    BotTrigger = "bot-host-type-trigger",
    Runtime = "runtime",
    SPFxSolution = "spfx-solution",
    SPFxInstallPackage = "spfx-install-latest-package",
    SPFxFramework = "spfx-framework-type",
    SPFxWebpartName = "spfx-webpart-name",
    SPFxWebpartDesc = "spfx-webpart-desp",
    SPFxFolder = "spfx-folder",
    OfficeAddinFolder = "addin-project-folder",
    OfficeAddinManifest = "addin-project-manifest",
    OfficeAddinTemplate = "addin-template-select",
    OfficeAddinHost = "addin-host",
    OfficeAddinImport = "addin-import",
    OfficeAddinFramework = "office-addin-framework-type",
    Samples = "samples",
    ReplaceContentUrl = "replaceContentUrl",
    ReplaceWebsiteUrl = "replaceWebsiteUrl",
    ReplaceBotIds = "replaceBotIds",
    SafeProjectName = "safeProjectName",
    RepalceTabUrl = "tdp-tab-url",
    ValidateMethod = "validate-method",
    AppPackagePath = "appPackagePath",
    FromExistingApi = "from-existing-api",
    ApiSpecLocation = "openapi-spec-location",
    ApiOperation = "api-operation",
    ApiPluginManifestPath = "external-api-plugin-manifest-path",
    MeArchitectureType = "me-architecture",
    ApiSpecApiKey = "api-key",
    ApiSpecApiKeyConfirm = "api-key-confirm",
    ApiAuth = "api-auth",
    OauthClientSecret = "oauth-client-secret",
    OauthClientId = "oauth-client-id",
    OauthConfirm = "oauth-confirm",
    CustomCopilotRag = "custom-copilot-rag",
    CustomCopilotAssistant = "custom-copilot-agent",
    LLMService = "llm-service",
    OpenAIKey = "openai-key",
    OpenAIEmbeddingModel = "openai-embedding-model",
    AzureOpenAIKey = "azure-openai-key",
    AzureOpenAIEndpoint = "azure-openai-endpoint",
    AzureOpenAIDeploymentName = "azure-openai-deployment-name",
    AzureOpenAIEmbeddingDeploymentName = "azure-openai-embedding-deployment-name",
    AzureAISearchApiKey = "azure-ai-search-api-key",
    AzureAISearchEndpoint = "azure-ai-search-endpoint",
    Features = "features",
    Env = "env",
    SourceEnvName = "sourceEnvName",
    TargetEnvName = "targetEnvName",
    TargetResourceGroupName = "targetResourceGroupName",
    NewResourceGroupName = "newResourceGroupName",
    NewResourceGroupLocation = "newResourceGroupLocation",
    NewTargetEnvName = "newTargetEnvName",
    ExistingTabEndpoint = "existing-tab-endpoint",
    TeamsAppManifestFilePath = "manifest-path",
    LocalTeamsAppManifestFilePath = "local-manifest-path",
    AadAppManifestFilePath = "manifest-file-path",
    TeamsAppPackageFilePath = "app-package-file-path",
    ConfirmManifest = "confirmManifest",
    ConfirmLocalManifest = "confirmLocalManifest",
    ConfirmAadManifest = "confirmAadManifest",
    OutputZipPathParamName = "output-zip-path",
    OutputManifestParamName = "output-manifest-path",
    OutputFolderParamName = "output-folder",
    M365Host = "m365-host",
    ManifestPath = "manifest-path",
    ManifestId = "manifest-id",
    TeamsAppId = "teams-app-id",
    TitleId = "title-id",
    UserEmail = "email",
    UninstallMode = "mode",
    UninstallModeManifestId = "manifest-id",
    UninstallModeEnv = "env",
    UninstallModeTitleId = "title-id",
    UninstallOptions = "options",
    UninstallOptionM365 = "m365-app",
    UninstallOptionTDP = "app-registration",
    UninstallOptionBot = "bot-framework-registration",
    collaborationAppType = "collaborationType",
    DestinationApiSpecFilePath = "destination-api-spec-location",
    SyncManifest = "sync-manifest",
    ApiPluginType = "api-plugin-type",
    WithPlugin = "with-plugin",
    ImportPlugin = "import-plugin",
    PluginManifestFilePath = "plugin-manifest-path",
    PluginOpenApiSpecFilePath = "plugin-opeanapi-spec-path"
}
export declare const AppNamePattern = "^(?=(.*[\\da-zA-Z]){2})[a-zA-Z][^\"<>:\\?/*&|\0-\u001F]*[^\"\\s.<>:\\?/*&|\0-\u001F]$";
export declare enum CliQuestionName {
    Capability = "capability"
}
export declare enum ProgrammingLanguage {
    JS = "javascript",
    TS = "typescript",
    CSharp = "csharp",
    PY = "python",
    Common = "common",
    None = "none"
}
export declare const apiPluginApiSpecOptionId = "api-spec";
export declare const capabilitiesHavePythonOption: string[];
export declare class RuntimeOptions {
    static NodeJS(): OptionItem;
    static DotNet(): OptionItem;
}
export declare function getRuntime(inputs: Inputs): string;
export declare class ScratchOptions {
    static yes(): OptionItem;
    static no(): OptionItem;
    static all(): OptionItem[];
}
export declare class ProjectTypeOptions {
    static getCreateGroupName(): string | undefined;
    static tab(platform?: Platform): OptionItem;
    static bot(platform?: Platform): OptionItem;
    static me(platform?: Platform): OptionItem;
    static outlookAddin(platform?: Platform): OptionItem;
    static officeMetaOS(platform?: Platform): OptionItem;
    static officeAddin(platform?: Platform): OptionItem;
    static officeAddinAllIds(platform?: Platform): string[];
    static copilotExtension(platform?: Platform): OptionItem;
    static customCopilot(platform?: Platform): OptionItem;
    static startWithGithubCopilot(): OptionItem;
}
export declare class CapabilityOptions {
    static empty(): OptionItem;
    static basicBot(): OptionItem;
    static notificationBot(): OptionItem;
    static commandBot(): OptionItem;
    static workflowBot(inputs?: Inputs): OptionItem;
    static nonSsoTab(): OptionItem;
    static tab(): OptionItem;
    static m365SsoLaunchPage(): OptionItem;
    static dashboardTab(): OptionItem;
    static SPFxTab(): OptionItem;
    static linkUnfurling(): OptionItem;
    static m365SearchMe(): OptionItem;
    static SearchMe(): OptionItem;
    static collectFormMe(): OptionItem;
    static me(): OptionItem;
    static bots(inputs?: Inputs): OptionItem[];
    static tabs(): OptionItem[];
    static dotnetCaps(inputs?: Inputs): OptionItem[];
    /**
     * Collect all capabilities for message extension, including dotnet and nodejs.
     * @returns OptionItem[] capability list
     */
    static collectMECaps(): OptionItem[];
    static mes(inputs?: Inputs): OptionItem[];
    static officeAddinStaticCapabilities(host?: string): OptionItem[];
    static officeAddinDynamicCapabilities(projectType: string, host?: string): OptionItem[];
    static copilotExtensions(inputs?: Inputs, isStatic?: boolean): OptionItem[];
    static customCopilots(): OptionItem[];
    static tdpIntegrationCapabilities(): OptionItem[];
    /**
     * static capability list, which does not depend on any feature flags
     */
    static staticAll(inputs?: Inputs): OptionItem[];
    /**
     * dynamic capability list, which depends on feature flags
     */
    static all(inputs?: Inputs): OptionItem[];
    static outlookAddinImport(): OptionItem;
    static officeAddinImport(): OptionItem;
    static officeContentAddin(): OptionItem;
    static nonSsoTabAndBot(): OptionItem;
    static botAndMe(): OptionItem;
    static apiPlugin(): OptionItem;
    static declarativeCopilot(): OptionItem;
    static aiBot(): OptionItem;
    static aiAssistantBot(): OptionItem;
    static customCopilotBasic(): OptionItem;
    static customCopilotRag(): OptionItem;
    static customCopilotAssistant(): OptionItem;
}
export declare class ApiAuthOptions {
    static none(): OptionItem;
    static apiKey(): OptionItem;
    static microsoftEntra(): OptionItem;
    static oauth(): OptionItem;
    static all(): OptionItem[];
}
export declare class MeArchitectureOptions {
    static botMe(): OptionItem;
    static botPlugin(): OptionItem;
    static newApi(): OptionItem;
    static apiSpec(): OptionItem;
    static all(): OptionItem[];
    static staticAll(): OptionItem[];
}
export declare enum HostType {
    AppService = "app-service",
    Functions = "azure-functions"
}
export declare const NotificationTriggers: {
    readonly HTTP: "http";
    readonly TIMER: "timer";
};
declare type NotificationTrigger = typeof NotificationTriggers[keyof typeof NotificationTriggers];
interface HostTypeTriggerOptionItem extends OptionItem {
    hostType: HostType;
    triggers?: NotificationTrigger[];
}
export declare class NotificationTriggerOptions {
    static appService(): HostTypeTriggerOptionItem;
    static appServiceForVS(): HostTypeTriggerOptionItem;
    static functionsTimerTrigger(): HostTypeTriggerOptionItem;
    static functionsTimerTriggerIsolated(): HostTypeTriggerOptionItem;
    static functionsHttpAndTimerTrigger(): HostTypeTriggerOptionItem;
    static functionsHttpAndTimerTriggerIsolated(): HostTypeTriggerOptionItem;
    static functionsHttpTrigger(): HostTypeTriggerOptionItem;
    static functionsHttpTriggerIsolated(): HostTypeTriggerOptionItem;
    static functionsTriggers(): HostTypeTriggerOptionItem[];
    static all(): HostTypeTriggerOptionItem[];
}
export declare enum SPFxVersionOptionIds {
    installLocally = "true",
    globalPackage = "false"
}
export declare class CustomCopilotRagOptions {
    static customize(): OptionItem;
    static azureAISearch(): OptionItem;
    static customApi(): OptionItem;
    static microsoft365(): OptionItem;
    static all(): OptionItem[];
}
export declare class CustomCopilotAssistantOptions {
    static new(): OptionItem;
    static assistantsApi(): OptionItem;
    static all(): OptionItem[];
}
export declare const recommendedLocations: string[];
export declare class TeamsAppValidationOptions {
    static schema(): OptionItem;
    static package(): OptionItem;
    static testCases(): OptionItem;
}
export declare enum HubTypes {
    teams = "teams",
    outlook = "outlook",
    office = "office"
}
export declare class HubOptions {
    static teams(): OptionItem;
    static outlook(): OptionItem;
    static office(): OptionItem;
    static all(): OptionItem[];
}
export declare class DeclarativeCopilotTypeOptions {
    static noPlugin(): OptionItem;
    static withPlugin(): OptionItem;
    static all(): OptionItem[];
}
export declare class ApiPluginStartOptions {
    static newApi(): OptionItem;
    static apiSpec(): OptionItem;
    static existingPlugin(): OptionItem;
    static staticAll(doesProjectExists?: boolean): OptionItem[];
    static all(inputs: Inputs, doesProjectExists?: boolean): OptionItem[];
}
export {};
//# sourceMappingURL=constants.d.ts.map