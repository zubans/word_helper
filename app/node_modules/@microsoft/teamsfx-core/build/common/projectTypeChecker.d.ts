export declare enum TeamsfxConfigType {
    projectSettingsJson = "projectSettings.json",
    teamsappYml = "teamsapp.yml"
}
export declare const TeamsJsModule = "@microsoft/teams-js";
export declare const SPFxKey = "@microsoft/generator-sharepoint";
export declare enum TeamsfxVersionState {
    Compatible = "compatible",
    Upgradable = "upgradable",
    Unsupported = "unsupported",
    Invalid = "invalid"
}
export interface ProjectTypeResult {
    isTeamsFx: boolean;
    teamsfxConfigType?: TeamsfxConfigType;
    teamsfxConfigVersion?: string;
    teamsfxVersionState?: TeamsfxVersionState;
    teamsfxProjectId?: string;
    hasTeamsManifest: boolean;
    manifestCapabilities?: string[];
    manifestAppId?: string;
    manifestVersion?: string;
    dependsOnTeamsJs?: boolean;
    isSPFx?: boolean;
    officeAddinProjectType?: string;
    lauguages: ("ts" | "js" | "csharp" | "java" | "python" | "c")[];
}
declare class ProjectTypeChecker {
    scanFolder(currentPath: string, ignoreFolderName: string[], data: ProjectTypeResult, fileCallback: (filePath: string, data: ProjectTypeResult) => Promise<boolean>, maxDepth: number, currentDepth?: number): Promise<boolean>;
    findManifestCallback(filePath: string, data: ProjectTypeResult): Promise<boolean>;
    findProjectLanguateCallback(filePath: string, data: ProjectTypeResult): Promise<boolean>;
    findTeamsFxCallback(filePath: string, data: ProjectTypeResult): Promise<boolean>;
    findSPFxCallback(filePath: string, data: ProjectTypeResult): Promise<boolean>;
    findOfficeAddinProject(filePath: string, data: ProjectTypeResult): boolean;
    checkProjectType(projectPath: string): Promise<ProjectTypeResult>;
}
export declare function getCapabilities(manifest: any): string[];
export declare const projectTypeChecker: ProjectTypeChecker;
export {};
//# sourceMappingURL=projectTypeChecker.d.ts.map