"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.telemetryUtils = exports.sendTelemetryErrorEvent = exports.sendTelemetryEvent = exports.getQuestionValidationErrorEventName = exports.ApiSpecTelemetryPropertis = exports.ProjectMigratorGuideStatus = exports.WebApplicationIdValue = exports.ProjectMigratorStatus = exports.CustomizeSubscriptionType = exports.CustomizeResourceGroupType = exports.Component = exports.TelemetryErrorType = exports.TelemetrySuccess = exports.ProjectTypeProps = exports.TelemetryEvent = exports.TelemetryConstants = exports.TelemetryProperty = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const lodash_1 = require("lodash");
const globalVars_1 = require("./globalVars");
const stringUtils_1 = require("./stringUtils");
var TelemetryProperty;
(function (TelemetryProperty) {
    TelemetryProperty["TriggerFrom"] = "trigger-from";
    TelemetryProperty["Component"] = "component";
    TelemetryProperty["Components"] = "components";
    TelemetryProperty["Feature"] = "feature";
    TelemetryProperty["Hosting"] = "hosting";
    TelemetryProperty["AppId"] = "appid";
    TelemetryProperty["BotId"] = "botid";
    TelemetryProperty["Success"] = "success";
    TelemetryProperty["ErrorType"] = "error-type";
    TelemetryProperty["ErrorCode"] = "error-code";
    TelemetryProperty["ErrorCat"] = "error-cat";
    TelemetryProperty["ErrorCat1"] = "error-cat1";
    TelemetryProperty["ErrorCat2"] = "error-cat2";
    TelemetryProperty["ErrorCat3"] = "error-cat3";
    TelemetryProperty["ErrorComponent"] = "error-component";
    TelemetryProperty["ErrorInnerCode"] = "error-inner-code";
    TelemetryProperty["ErrorMessage"] = "err-message";
    TelemetryProperty["ErrorMethod"] = "error-method";
    TelemetryProperty["ErrorName"] = "error-name";
    TelemetryProperty["ErrorSource"] = "error-source";
    TelemetryProperty["ErrorStack"] = "err-stack";
    TelemetryProperty["ErrorData"] = "err-data";
    TelemetryProperty["ErrorStage"] = "error-stage";
    TelemetryProperty["SampleAppName"] = "sample-app-name";
    TelemetryProperty["ProjectId"] = "project-id";
    TelemetryProperty["NewProjectId"] = "new-project-id";
    TelemetryProperty["CorrelationId"] = "correlation-id";
    TelemetryProperty["Env"] = "env";
    TelemetryProperty["CustomizeResourceGroupType"] = "customize-resource-group-type";
    TelemetryProperty["EnvConfig"] = "env-config";
    TelemetryProperty["Status"] = "status";
    TelemetryProperty["HostType"] = "hostType";
    TelemetryProperty["AzureResources"] = "azure-resources";
    TelemetryProperty["Capabilities"] = "capabilities";
    TelemetryProperty["ActivePlugins"] = "active-plugins";
    TelemetryProperty["IsCopilotAllowed"] = "is-copilot-allowed";
    TelemetryProperty["IsSideloadingAllowed"] = "is-sideloading-allowed";
    TelemetryProperty["NeedMigrateAadManifest"] = "need-migrate-aad-manifest";
    TelemetryProperty["CheckCopilotTracingId"] = "copilot-trace-id";
    TelemetryProperty["CheckSideloadingStatusCode"] = "status-code";
    TelemetryProperty["CheckSideloadingMethod"] = "method";
    TelemetryProperty["CheckSideloadingUrl"] = "url";
    TelemetryProperty["TemplateGroup"] = "template-group";
    TelemetryProperty["TemplateLanguage"] = "template-language";
    TelemetryProperty["TemplateScenario"] = "template-scenario";
    TelemetryProperty["TemplateFallback"] = "template-fallback";
    TelemetryProperty["TemplateName"] = "template-name";
    TelemetryProperty["TenantId"] = "tenant-id";
    TelemetryProperty["TimeCost"] = "time-cost";
    TelemetryProperty["SampleDownloadDirectory"] = "sample-download-directory";
    TelemetryProperty["Fallback"] = "fallback";
    TelemetryProperty["HasSwitchedSubscription"] = "has-switched-subscription";
    TelemetryProperty["HasSwitchedM365Tenant"] = "has-switched-m365";
    TelemetryProperty["CustomizeSubscriptionType"] = "customize-subscription-type";
    TelemetryProperty["IsFromTdp"] = "is-from-developer-portal";
    TelemetryProperty["ToolkitVersion"] = "toolkit-version";
    TelemetryProperty["YmlName"] = "yml-name";
    TelemetryProperty["YmlSchemaVersion"] = "yml-schema-version";
    TelemetryProperty["GraphPermission"] = "graph-permission";
    TelemetryProperty["GraphPermissionHasRole"] = "graph-permission-has-role";
    TelemetryProperty["GraphPermissionHasAdminScope"] = "graph-permission-has-admin-scope";
    TelemetryProperty["GraphPermissionScopes"] = "graph-permission-scopes";
    TelemetryProperty["GraphPermissionRoles"] = "graph-permission-roles";
    TelemetryProperty["RscApplication"] = "rsc-application";
    TelemetryProperty["RscDelegated"] = "rsc-delegated";
    TelemetryProperty["WebApplicationId"] = "web-application-id";
    TelemetryProperty["AadManifest"] = "aad-manifest";
    TelemetryProperty["CustomCopilotAgent"] = "custom-copilot-agent";
    TelemetryProperty["CustomCopilotRAG"] = "custom-copilot-rag";
    TelemetryProperty["LlmService"] = "llm-service";
    TelemetryProperty["HasAzureOpenAIKey"] = "has-azure-openai-key";
    TelemetryProperty["HasAzureOpenAIEndpoint"] = "has-azure-openai-endpoint";
    TelemetryProperty["HasAzureOpenAIDeploymentName"] = "has-azure-openai-deployment-name";
    TelemetryProperty["HasOpenAIKey"] = "has-openai-key";
    TelemetryProperty["TDPTraceId"] = "tdp-trace-id";
    TelemetryProperty["MOSTraceId"] = "mos-trace-id";
    TelemetryProperty["MOSPATH"] = "mos-api-path";
})(TelemetryProperty = exports.TelemetryProperty || (exports.TelemetryProperty = {}));
exports.TelemetryConstants = {
    eventPrefix: "-start",
};
var TelemetryEvent;
(function (TelemetryEvent) {
    TelemetryEvent["Scaffold"] = "scaffold";
    TelemetryEvent["GenerateBicep"] = "generate-arm-templates";
    TelemetryEvent["LocalDebug"] = "local-debug";
    TelemetryEvent["PostLocalDebug"] = "post-local-debug";
    TelemetryEvent["Provision"] = "provision";
    TelemetryEvent["PostProvision"] = "post-provision";
    TelemetryEvent["PreDeploy"] = "pre-deploy";
    TelemetryEvent["Deploy"] = "deploy";
    TelemetryEvent["DownloadSampleStart"] = "download-sample-start";
    TelemetryEvent["DownloadSample"] = "download-sample";
    TelemetryEvent["CreateProject"] = "create";
    TelemetryEvent["AddFeature"] = "add-feature";
    TelemetryEvent["ProjectUpgrade"] = "project-upgrade";
    TelemetryEvent["ProjectUpgradeStart"] = "project-upgrade-start";
    TelemetryEvent["ReadJson"] = "read-json";
    TelemetryEvent["DecryptUserdata"] = "decrypt-userdata";
    TelemetryEvent["CheckCopilot"] = "check-copilot";
    TelemetryEvent["CheckResourceGroupStart"] = "check-resource-group-start";
    TelemetryEvent["CheckResourceGroup"] = "check-resource-group";
    TelemetryEvent["CheckSubscriptionStart"] = "check-subscription-start";
    TelemetryEvent["CheckSubscription"] = "check-subscription";
    TelemetryEvent["CheckSideloading"] = "check-sideloading";
    TelemetryEvent["EnvConfig"] = "env-config";
    TelemetryEvent["DisplayToolingUpdateNotification"] = "display-tooling-update-notification";
    TelemetryEvent["ProjectMigratorNotificationStart"] = "project-migrator-notification-start";
    TelemetryEvent["ProjectMigratorNotification"] = "project-migrator-notification";
    TelemetryEvent["ProjectMigratorMigrateStart"] = "project-migrator-migrate-start";
    TelemetryEvent["ProjectMigratorMigrate"] = "project-migrator-migrate";
    TelemetryEvent["ProjectMigratorPrecheckFailed"] = "project-migrator-pre-check-failed";
    TelemetryEvent["ProjectMigratorError"] = "project-migrator-error";
    TelemetryEvent["ProjectConsolidateNotificationStart"] = "project-consolidate-notification-start";
    TelemetryEvent["ProjectConsolidateNotification"] = "project-consolidate-notification";
    TelemetryEvent["ProjectConsolidateUpgradeStart"] = "project-consolidate-upgrade-start";
    TelemetryEvent["ProjectConsolidateUpgrade"] = "project-consolidate-upgrade";
    TelemetryEvent["ProjectConsolidateAddLocalEnvStart"] = "project-consolidate-add-local-env-start";
    TelemetryEvent["ProjectConsolidateAddLocalEnv"] = "project-consolidate-add-local-env";
    TelemetryEvent["ProjectConsolidateAddSPFXManifestStart"] = "project-consolidate-add-spfx-manifest-start";
    TelemetryEvent["ProjectConsolidateAddSPFXManifest"] = "project-consolidate-add-spfx-manifest";
    TelemetryEvent["ProjectConsolidateCopyAzureManifestStart"] = "project-consolidate-copy-azure-manifest-start";
    TelemetryEvent["ProjectConsolidateCopyAzureManifest"] = "project-consolidate-copy-azure-manifest";
    TelemetryEvent["ProjectConsolidateAddAzureManifestStart"] = "project-consolidate-add-azure-manifest-start";
    TelemetryEvent["ProjectConsolidateAddAzureManifest"] = "project-consolidate-add-azure-manifest";
    TelemetryEvent["ProjectConsolidateBackupConfigStart"] = "project-consolidate-backup-config-start";
    TelemetryEvent["ProjectConsolidateBackupConfig"] = "project-consolidate-backup-config";
    TelemetryEvent["ProjectConsolidateGuideStart"] = "project-Consolidate-guide-start";
    TelemetryEvent["ProjectConsolidateGuide"] = "project-consolidate-guide";
    TelemetryEvent["ProjectConsolidateError"] = "project-consolidate-error";
    TelemetryEvent["ProjectConsolidateCheckManifestError"] = "project-consolidate-check-manifest-error";
    TelemetryEvent["DetectPortStart"] = "detect-port-start";
    TelemetryEvent["DetectPort"] = "detect-port";
    TelemetryEvent["FillProjectId"] = "fill-project-id";
    TelemetryEvent["ScaffoldFromTemplatesStart"] = "scaffold-from-templates-start";
    TelemetryEvent["ScaffoldFromTemplates"] = "scaffold-from-templates";
    TelemetryEvent["GenerateTemplate"] = "generate-template";
    TelemetryEvent["GenerateSample"] = "generate-sample";
    TelemetryEvent["ConfirmProvision"] = "confirm-provision";
    TelemetryEvent["CheckLocalDebugTenant"] = "check-local-debug-tenant";
    TelemetryEvent["DebugSetUpSSO"] = "debug-set-up-sso";
    TelemetryEvent["DeploymentInfoNotFound"] = "deployment-info-not-found";
    TelemetryEvent["InstallScriptNotFound"] = "install-script-not-found";
    TelemetryEvent["SkipDeploy"] = "skip-deploy";
    TelemetryEvent["PublishInDeveloperPortal"] = "publish-in-developer-portal";
    TelemetryEvent["MetaData"] = "metadata";
    TelemetryEvent["ProjectType"] = "project-type";
    TelemetryEvent["DependencyApi"] = "dependency-api";
    TelemetryEvent["AppStudioApi"] = "app-studio-api";
    TelemetryEvent["MOSApi"] = "ttk-mos-api";
    TelemetryEvent["ViewPluginManifestAfterAdded"] = "view-plugin-manifest-after-added";
})(TelemetryEvent = exports.TelemetryEvent || (exports.TelemetryEvent = {}));
var ProjectTypeProps;
(function (ProjectTypeProps) {
    ProjectTypeProps["IsTeamsFx"] = "is-teamsfx";
    ProjectTypeProps["TeamsfxConfigType"] = "teamsfx-config-type";
    ProjectTypeProps["TeamsfxConfigVersion"] = "teamsfx-config-version";
    ProjectTypeProps["TeamsfxVersionState"] = "teamsfx-version-state";
    ProjectTypeProps["TeamsfxProjectId"] = "teamsfx-project-id";
    ProjectTypeProps["TeamsManifest"] = "has-manifest";
    ProjectTypeProps["TeamsManifestVersion"] = "manifest-version";
    ProjectTypeProps["TeamsManifestAppId"] = "manifest-app-id";
    ProjectTypeProps["TeamsManifestCapabilities"] = "manifest-capabilities";
    ProjectTypeProps["TeamsJs"] = "teams-js";
    ProjectTypeProps["Lauguages"] = "languages";
    ProjectTypeProps["OfficeAddinProjectType"] = "office-addin-project-type";
})(ProjectTypeProps = exports.ProjectTypeProps || (exports.ProjectTypeProps = {}));
var TelemetrySuccess;
(function (TelemetrySuccess) {
    TelemetrySuccess["Yes"] = "yes";
    TelemetrySuccess["No"] = "no";
})(TelemetrySuccess = exports.TelemetrySuccess || (exports.TelemetrySuccess = {}));
var TelemetryErrorType;
(function (TelemetryErrorType) {
    TelemetryErrorType["UserError"] = "user";
    TelemetryErrorType["SystemError"] = "system";
})(TelemetryErrorType = exports.TelemetryErrorType || (exports.TelemetryErrorType = {}));
var Component;
(function (Component) {
    Component["vsc"] = "extension";
    Component["cli"] = "cli";
    Component["vs"] = "vs";
    Component["core"] = "core";
})(Component = exports.Component || (exports.Component = {}));
var CustomizeResourceGroupType;
(function (CustomizeResourceGroupType) {
    CustomizeResourceGroupType["CommandLine"] = "command-line";
    CustomizeResourceGroupType["EnvConfig"] = "env-config";
    CustomizeResourceGroupType["EnvState"] = "env-state";
    CustomizeResourceGroupType["InteractiveCreateDefault"] = "interactive-create-default";
    CustomizeResourceGroupType["InteractiveCreateCustomized"] = "interactive-create-customized";
    CustomizeResourceGroupType["InteractiveUseExisting"] = "interactive-use-existing";
    CustomizeResourceGroupType["FallbackDefault"] = "fallback-default";
})(CustomizeResourceGroupType = exports.CustomizeResourceGroupType || (exports.CustomizeResourceGroupType = {}));
var CustomizeSubscriptionType;
(function (CustomizeSubscriptionType) {
    CustomizeSubscriptionType["CommandLine"] = "command-line";
    CustomizeSubscriptionType["EnvConfig"] = "env-config";
    CustomizeSubscriptionType["EnvState"] = "env-state";
    CustomizeSubscriptionType["Default"] = "default";
})(CustomizeSubscriptionType = exports.CustomizeSubscriptionType || (exports.CustomizeSubscriptionType = {}));
var ProjectMigratorStatus;
(function (ProjectMigratorStatus) {
    ProjectMigratorStatus["OK"] = "ok";
    ProjectMigratorStatus["Cancel"] = "cancel";
})(ProjectMigratorStatus = exports.ProjectMigratorStatus || (exports.ProjectMigratorStatus = {}));
var WebApplicationIdValue;
(function (WebApplicationIdValue) {
    WebApplicationIdValue["None"] = "none";
    WebApplicationIdValue["Default"] = "default";
    WebApplicationIdValue["Customized"] = "customized";
})(WebApplicationIdValue = exports.WebApplicationIdValue || (exports.WebApplicationIdValue = {}));
var ProjectMigratorGuideStatus;
(function (ProjectMigratorGuideStatus) {
    ProjectMigratorGuideStatus["Reload"] = "reload";
    ProjectMigratorGuideStatus["LearnMore"] = "learn-more";
    ProjectMigratorGuideStatus["Cancel"] = "cancel";
})(ProjectMigratorGuideStatus = exports.ProjectMigratorGuideStatus || (exports.ProjectMigratorGuideStatus = {}));
var ApiSpecTelemetryPropertis;
(function (ApiSpecTelemetryPropertis) {
    ApiSpecTelemetryPropertis["SpecNotValidDetails"] = "spec-not-valid-details";
    ApiSpecTelemetryPropertis["InvalidApiSpec"] = "invalid-api-spec";
})(ApiSpecTelemetryPropertis = exports.ApiSpecTelemetryPropertis || (exports.ApiSpecTelemetryPropertis = {}));
function getQuestionValidationErrorEventName(questionName) {
    return `invalid-${questionName}`;
}
exports.getQuestionValidationErrorEventName = getQuestionValidationErrorEventName;
function sendTelemetryEvent(component, eventName, properties, measurements) {
    var _a;
    if (!properties) {
        properties = {};
    }
    properties[TelemetryProperty.Component] = component;
    (_a = globalVars_1.TOOLS.telemetryReporter) === null || _a === void 0 ? void 0 : _a.sendTelemetryEvent(eventName, properties, measurements);
}
exports.sendTelemetryEvent = sendTelemetryEvent;
function sendTelemetryErrorEvent(component, eventName, fxError, properties) {
    var _a;
    if (!properties) {
        properties = {};
    }
    properties[TelemetryProperty.Component] = component;
    exports.telemetryUtils.fillInErrorProperties(properties, fxError);
    (_a = globalVars_1.TOOLS.telemetryReporter) === null || _a === void 0 ? void 0 : _a.sendTelemetryErrorEvent(eventName, properties, {});
}
exports.sendTelemetryErrorEvent = sendTelemetryErrorEvent;
class TelemetryUtils {
    /**
     * fill in telemetry properties for FxError
     * @param error FxError
     * @param props teletry properties
     */
    fillInErrorProperties(props, error) {
        const errorCode = error.source + "." + error.name;
        const errorType = error instanceof teamsfx_api_1.SystemError ? TelemetryErrorType.SystemError : TelemetryErrorType.UserError;
        props[TelemetryProperty.Success] = TelemetrySuccess.No;
        props[TelemetryProperty.ErrorCode] = props[TelemetryProperty.ErrorCode] || errorCode;
        props[TelemetryProperty.ErrorType] = errorType;
        props[TelemetryProperty.ErrorMessage] = error.skipProcessInTelemetry
            ? error.message
            : (0, stringUtils_1.maskSecret)(error.message);
        props[TelemetryProperty.ErrorStack] = this.extractMethodNamesFromErrorStack(error.stack); // error stack will not append in error-message any more
        props[TelemetryProperty.ErrorName] = error.name;
        if (error.name === "ScriptExecutionError") {
            props[TelemetryProperty.ErrorData] = (0, stringUtils_1.maskSecret)(error.userData); // collect error details for script execution error
        }
        // append global context properties
        props[TelemetryProperty.ErrorComponent] = globalVars_1.globalVars.component;
        props[TelemetryProperty.ErrorStage] = globalVars_1.globalVars.stage;
        props[TelemetryProperty.ErrorMethod] = globalVars_1.globalVars.method;
        props[TelemetryProperty.ErrorSource] = globalVars_1.globalVars.source;
        if (error.innerError && error.innerError["code"]) {
            props[TelemetryProperty.ErrorInnerCode] = error.innerError["code"];
        }
        if (error.categories) {
            props[TelemetryProperty.ErrorCat] = error.categories.join("|");
            props[TelemetryProperty.ErrorCat1] = error.categories[0];
            props[TelemetryProperty.ErrorCat2] = error.categories[1];
            props[TelemetryProperty.ErrorCat3] = error.categories[2];
        }
        if (error.telemetryProperties) {
            (0, lodash_1.assign)(props, error.telemetryProperties);
        }
    }
    fillinProjectTypeProperties(props, projectTypeRes) {
        var _a;
        const newProps = {
            [ProjectTypeProps.IsTeamsFx]: projectTypeRes.isTeamsFx ? "true" : "false",
            [ProjectTypeProps.TeamsfxConfigType]: projectTypeRes.teamsfxConfigType || "",
            [ProjectTypeProps.TeamsfxConfigVersion]: projectTypeRes.teamsfxConfigVersion || "",
            [ProjectTypeProps.TeamsfxVersionState]: projectTypeRes.teamsfxVersionState || "",
            [ProjectTypeProps.TeamsJs]: projectTypeRes.dependsOnTeamsJs ? "true" : "false",
            [ProjectTypeProps.TeamsManifest]: projectTypeRes.hasTeamsManifest ? "true" : "false",
            [ProjectTypeProps.TeamsManifestVersion]: projectTypeRes.manifestVersion || "",
            [ProjectTypeProps.TeamsManifestAppId]: projectTypeRes.manifestAppId || "",
            [ProjectTypeProps.TeamsfxProjectId]: projectTypeRes.teamsfxProjectId || "",
            [ProjectTypeProps.Lauguages]: projectTypeRes.lauguages.join(","),
            [ProjectTypeProps.TeamsManifestCapabilities]: ((_a = projectTypeRes.manifestCapabilities) === null || _a === void 0 ? void 0 : _a.join(",")) || "",
            [ProjectTypeProps.OfficeAddinProjectType]: projectTypeRes.officeAddinProjectType || "",
        };
        (0, lodash_1.assign)(props, newProps);
    }
    extractMethodNamesFromErrorStack(stack) {
        if (!stack)
            return "";
        const methodNamesRegex = /at\s([\w.<>\[\]\s]+)\s\(/g;
        let match;
        const methodNames = [];
        while ((match = methodNamesRegex.exec(stack)) !== null) {
            methodNames.push(match[1]);
        }
        return methodNames.join(" | ");
    }
}
exports.telemetryUtils = new TelemetryUtils();
//# sourceMappingURL=telemetry.js.map