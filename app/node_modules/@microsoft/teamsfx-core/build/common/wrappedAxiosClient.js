"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WrappedAxiosClient = void 0;
const tslib_1 = require("tslib");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const axios_1 = tslib_1.__importDefault(require("axios"));
const globalVars_1 = require("./globalVars");
const constants_1 = require("../component/driver/teamsApp/constants");
const telemetry_1 = require("../component/driver/teamsApp/utils/telemetry");
const telemetry_2 = require("./telemetry");
const teamsApp_1 = require("../error/teamsApp");
const commonConstant_1 = require("../component/constant/commonConstant");
const localizeUtils_1 = require("./localizeUtils");
/**
 * This client will send telemetries to record API request trace
 */
class WrappedAxiosClient {
    static create(config) {
        const instance = axios_1.default.create(config);
        instance.interceptors.request.use((request) => this.onRequest(request));
        // eslint-disable-next-line prettier/prettier
        instance.interceptors.response.use((response) => this.onResponse(response), (error) => this.onRejected(error));
        return instance;
    }
    /**
     * Send API start telemetry
     * @param request
     */
    static onRequest(request) {
        var _a, _b, _c;
        const method = request.method;
        const fullPath = `${(_a = request.baseURL) !== null && _a !== void 0 ? _a : ""}${(_b = request.url) !== null && _b !== void 0 ? _b : ""}`;
        const apiName = this.convertUrlToApiName(fullPath, method);
        const properties = Object.assign({ url: `<${apiName}-url>`, method: method, params: this.generateParameters(request.params) }, this.generateExtraProperties(fullPath, request.data));
        const eventName = this.getEventName(fullPath);
        (_c = globalVars_1.TOOLS === null || globalVars_1.TOOLS === void 0 ? void 0 : globalVars_1.TOOLS.telemetryReporter) === null || _c === void 0 ? void 0 : _c.sendTelemetryEvent(`${eventName}-start`, properties);
        return request;
    }
    /**
     * Send API success telemetry
     * @param response
     * @returns
     */
    static onResponse(response) {
        var _a, _b, _c;
        const method = response.request.method;
        const fullPath = `${(_a = response.request.host) !== null && _a !== void 0 ? _a : ""}${(_b = response.request.path) !== null && _b !== void 0 ? _b : ""}`;
        const apiName = this.convertUrlToApiName(fullPath, method);
        const properties = Object.assign({ url: `<${apiName}-url>`, method: method, params: this.generateParameters(response.config.params), [telemetry_2.TelemetryProperty.Success]: telemetry_2.TelemetrySuccess.Yes, "status-code": response.status.toString() }, this.generateExtraProperties(fullPath, response.data));
        const eventName = this.getEventName(fullPath);
        (_c = globalVars_1.TOOLS === null || globalVars_1.TOOLS === void 0 ? void 0 : globalVars_1.TOOLS.telemetryReporter) === null || _c === void 0 ? void 0 : _c.sendTelemetryEvent(eventName, properties);
        return response;
    }
    /**
     * Send API failure telemetry
     * @param error
     * @returns
     */
    static onRejected(error) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
        const method = error.request.method;
        const fullPath = `${(_a = error.request.host) !== null && _a !== void 0 ? _a : ""}${(_b = error.request.path) !== null && _b !== void 0 ? _b : ""}`;
        const apiName = this.convertUrlToApiName(fullPath, method);
        let requestData;
        if (((_c = error.config) === null || _c === void 0 ? void 0 : _c.data) && typeof error.config.data === "string") {
            try {
                requestData = JSON.parse(error.config.data);
            }
            catch (error) {
                requestData = undefined;
            }
        }
        const properties = Object.assign({ url: `<${apiName}-url>`, method: method, params: this.generateParameters(error.config.params), [telemetry_2.TelemetryProperty.Success]: telemetry_2.TelemetrySuccess.No, [telemetry_2.TelemetryProperty.ErrorMessage]: error.response
                ? JSON.stringify(error.response.data)
                : (_d = error.message) !== null && _d !== void 0 ? _d : "undefined", "status-code": (_f = (_e = error.response) === null || _e === void 0 ? void 0 : _e.status.toString()) !== null && _f !== void 0 ? _f : "undefined" }, this.generateExtraProperties(fullPath, requestData));
        const eventName = this.getEventName(fullPath);
        if (eventName === telemetry_2.TelemetryEvent.AppStudioApi) {
            const correlationId = (_h = (_g = error.response) === null || _g === void 0 ? void 0 : _g.headers[constants_1.Constants.CORRELATION_ID]) !== null && _h !== void 0 ? _h : "undefined";
            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
            const extraData = (0, localizeUtils_1.getDefaultString)("error.appstudio.apiFailed.reason.common", ((_j = error.response) === null || _j === void 0 ? void 0 : _j.data) ? `data: ${JSON.stringify(error.response.data)}` : "");
            const TDPApiFailedError = new teamsApp_1.DeveloperPortalAPIFailedSystemError(error, correlationId, apiName, extraData);
            properties[telemetry_2.TelemetryProperty.ErrorCode] = `${TDPApiFailedError.source}.${TDPApiFailedError.name}`;
            properties[telemetry_2.TelemetryProperty.ErrorMessage] = TDPApiFailedError.message;
            properties[telemetry_2.TelemetryProperty.TDPTraceId] = correlationId;
        }
        else if (eventName === telemetry_2.TelemetryEvent.MOSApi) {
            const tracingId = ((_m = (_l = (_k = error.response) === null || _k === void 0 ? void 0 : _k.headers) === null || _l === void 0 ? void 0 : _l.traceresponse) !== null && _m !== void 0 ? _m : "undefined");
            const originalMessage = error.message;
            const innerError = ((_o = error.response) === null || _o === void 0 ? void 0 : _o.data).error || { code: "", message: "" };
            const finalMessage = `${originalMessage} (tracingId: ${tracingId}) ${innerError.code}: ${innerError.message} `;
            properties[telemetry_2.TelemetryProperty.ErrorMessage] = finalMessage;
            properties[telemetry_2.TelemetryProperty.MOSTraceId] = tracingId;
            const relativePath = (error.request.path || "");
            properties[telemetry_2.TelemetryProperty.MOSPATH] = method + " " + relativePath.replace(/\//g, "__");
        }
        (_p = globalVars_1.TOOLS === null || globalVars_1.TOOLS === void 0 ? void 0 : globalVars_1.TOOLS.telemetryReporter) === null || _p === void 0 ? void 0 : _p.sendTelemetryErrorEvent(eventName, properties);
        return Promise.reject(error);
    }
    /**
     * Convert request URL to API name, otherwise it will be redacted in telemetry
     * This function should be extended when new API is added
     * @param baseUrl
     * @param path
     * @param method
     * @returns
     */
    static convertUrlToApiName(fullPath, method) {
        if (this.isTDPApi(fullPath)) {
            if (fullPath.match(new RegExp("/api/appdefinitions/partnerCenterAppPackageValidation"))) {
                return constants_1.APP_STUDIO_API_NAMES.VALIDATE_APP_PACKAGE;
            }
            if (fullPath.match(new RegExp("/api/appdefinitions/v2/import"))) {
                return constants_1.APP_STUDIO_API_NAMES.CREATE_APP;
            }
            if (fullPath.match(new RegExp("/api/appdefinitions/manifest"))) {
                return constants_1.APP_STUDIO_API_NAMES.EXISTS_IN_TENANTS;
            }
            if (fullPath.match(new RegExp("/api/appdefinitions/.*/manifest"))) {
                return constants_1.APP_STUDIO_API_NAMES.GET_APP_PACKAGE;
            }
            if (fullPath.match(new RegExp("/api/appdefinitions/.*/owner"))) {
                return constants_1.APP_STUDIO_API_NAMES.UPDATE_OWNER;
            }
            if (fullPath.match(new RegExp(/\/api\/appdefinitions\/[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}/))) {
                if (method.toUpperCase() === commonConstant_1.HttpMethod.GET) {
                    return constants_1.APP_STUDIO_API_NAMES.GET_APP;
                }
                if (method.toUpperCase() === commonConstant_1.HttpMethod.DELETE) {
                    return constants_1.APP_STUDIO_API_NAMES.DELETE_APP;
                }
            }
            if (fullPath.match(new RegExp("/api/appdefinitions"))) {
                return constants_1.APP_STUDIO_API_NAMES.LIST_APPS;
            }
            if (fullPath.match(new RegExp("/api/publishing/.*/appdefinitions"))) {
                return constants_1.APP_STUDIO_API_NAMES.UPDATE_PUBLISHED_APP;
            }
            if (fullPath.match(new RegExp("/api/publishing/.*"))) {
                return constants_1.APP_STUDIO_API_NAMES.GET_PUBLISHED_APP;
            }
            if (fullPath.match(new RegExp("/api/publishing"))) {
                return constants_1.APP_STUDIO_API_NAMES.PUBLISH_APP;
            }
            if (fullPath.match(new RegExp("/api/usersettings/mtUserAppPolicy"))) {
                return constants_1.APP_STUDIO_API_NAMES.CHECK_SIDELOADING_STATUS;
            }
            if (fullPath.match(new RegExp("/api/v1.0/apiSecretRegistrations/.*"))) {
                if (method.toUpperCase() === commonConstant_1.HttpMethod.GET) {
                    return constants_1.APP_STUDIO_API_NAMES.GET_API_KEY;
                }
                if (method.toUpperCase() === commonConstant_1.HttpMethod.PATCH) {
                    return constants_1.APP_STUDIO_API_NAMES.UPDATE_API_KEY;
                }
            }
            if (fullPath.match(new RegExp("/api/v1.0/apiSecretRegistrations"))) {
                return constants_1.APP_STUDIO_API_NAMES.CREATE_API_KEY;
            }
            if (fullPath.match(new RegExp(/\/api\/botframework\/[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}/))) {
                if (method.toUpperCase() === commonConstant_1.HttpMethod.GET) {
                    return constants_1.APP_STUDIO_API_NAMES.GET_BOT;
                }
                if (method.toUpperCase() === commonConstant_1.HttpMethod.POST) {
                    return constants_1.APP_STUDIO_API_NAMES.UPDATE_BOT;
                }
                if (method.toUpperCase() === commonConstant_1.HttpMethod.DELETE) {
                    return constants_1.APP_STUDIO_API_NAMES.DELETE_BOT;
                }
            }
            if (fullPath.match(new RegExp("/api/botframework"))) {
                if (method.toUpperCase() === commonConstant_1.HttpMethod.GET) {
                    return constants_1.APP_STUDIO_API_NAMES.LIST_BOT;
                }
                if (method.toUpperCase() === commonConstant_1.HttpMethod.POST) {
                    return constants_1.APP_STUDIO_API_NAMES.CREATE_BOT;
                }
            }
            if (fullPath.match(new RegExp("/api/v1.0/appvalidations/appdefinition/validate"))) {
                return constants_1.APP_STUDIO_API_NAMES.SUBMIT_APP_VALIDATION;
            }
            if (fullPath.match(new RegExp("/api/v1.0/appvalidations/appdefinitions/[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"))) {
                return constants_1.APP_STUDIO_API_NAMES.GET_APP_VALIDATION_REQUESTS;
            }
            if (fullPath.match(new RegExp("/api/v1.0/appvalidations/[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"))) {
                return constants_1.APP_STUDIO_API_NAMES.GET_APP_VALIDATION_RESULT;
            }
            if (fullPath.match(new RegExp("/api/v1.0/oAuthConfigurations/.*"))) {
                if (method.toUpperCase() === commonConstant_1.HttpMethod.GET) {
                    return constants_1.APP_STUDIO_API_NAMES.GET_OAUTH;
                }
                if (method.toUpperCase() === commonConstant_1.HttpMethod.PATCH) {
                    return constants_1.APP_STUDIO_API_NAMES.UPDATE_OAUTH;
                }
            }
            if (fullPath.match(new RegExp("/api/v1.0/oAuthConfigurations"))) {
                return constants_1.APP_STUDIO_API_NAMES.CREATE_OAUTH;
            }
        }
        if (fullPath.match(new RegExp(/(^https:\/\/)?authsvc\.teams\.microsoft\.com\/v1\.0\/users\/region/))) {
            return "get-region";
        }
        return fullPath.replace(/\//g, `-`);
    }
    /**
     * Generate extra properties for specific requirements
     * @param baseUrl
     * @param path
     * @param method
     */
    static generateExtraProperties(fullPath, data) {
        const properties = {};
        if (this.isTDPApi(fullPath)) {
            // Add region property
            properties[telemetry_1.TelemetryPropertyKey.region] = String(this.extractRegion(fullPath));
            // Add bot id property
            if (fullPath.match(new RegExp("/api/botframework"))) {
                const regex = new RegExp(/\/api\/botframework\/([0-9a-fA-F-]+)/);
                const matches = regex.exec(fullPath);
                if (matches != null && matches.length > 1) {
                    properties[telemetry_2.TelemetryProperty.BotId] = matches[1];
                }
                else if (data === null || data === void 0 ? void 0 : data.botId) {
                    properties[telemetry_2.TelemetryProperty.BotId] = data.botId;
                }
            }
        }
        return properties;
    }
    /**
     * Extract region from baseUrl, E.g. https://dev.teams.microsoft.com/amer => amer
     * @param url
     * @returns
     */
    static extractRegion(fullPath) {
        const regex = /dev(-int)?\.teams\.microsoft\.com\/([a-zA-Z-_]+)\/api/;
        const matches = regex.exec(fullPath);
        if (matches != null && matches.length > 1) {
            return matches[2];
        }
        return telemetry_1.TelemetryPropertyValue.Global;
    }
    /**
     * Check if it's TDP Api
     * @param baseUrl
     * @returns
     */
    static isTDPApi(baseUrl) {
        const regex = /(^https:\/\/)?dev(-int)?\.teams\.microsoft\.com/;
        const matches = regex.exec(baseUrl);
        return matches != null && matches.length > 0;
    }
    static getEventName(baseUrl) {
        if (this.isTDPApi(baseUrl)) {
            return telemetry_2.TelemetryEvent.AppStudioApi;
        }
        else if (baseUrl.includes("titles.prod.mos.microsoft.com")) {
            return telemetry_2.TelemetryEvent.MOSApi;
        }
        else {
            return telemetry_2.TelemetryEvent.DependencyApi;
        }
    }
    /**
     * Flattern query parameters to string, e.g. {a: 1, b: 2} => a:1;b:2
     * @param params
     * @returns
     */
    static generateParameters(params) {
        if (!params) {
            return "";
        }
        const parameters = [];
        for (const [key, value] of Object.entries(params)) {
            parameters.push(`${key}:${value}`);
        }
        return parameters.join(";");
    }
}
exports.WrappedAxiosClient = WrappedAxiosClient;
//# sourceMappingURL=wrappedAxiosClient.js.map