import { FxError } from "@microsoft/teamsfx-api";
import { ProjectTypeResult } from "./projectTypeChecker";
export declare enum TelemetryProperty {
    TriggerFrom = "trigger-from",
    Component = "component",
    Components = "components",
    Feature = "feature",
    Hosting = "hosting",
    AppId = "appid",
    BotId = "botid",
    Success = "success",
    ErrorType = "error-type",
    ErrorCode = "error-code",
    ErrorCat = "error-cat",
    ErrorCat1 = "error-cat1",
    ErrorCat2 = "error-cat2",
    ErrorCat3 = "error-cat3",
    ErrorComponent = "error-component",
    ErrorInnerCode = "error-inner-code",
    ErrorMessage = "err-message",
    ErrorMethod = "error-method",
    ErrorName = "error-name",
    ErrorSource = "error-source",
    ErrorStack = "err-stack",
    ErrorData = "err-data",
    ErrorStage = "error-stage",
    SampleAppName = "sample-app-name",
    ProjectId = "project-id",
    NewProjectId = "new-project-id",
    CorrelationId = "correlation-id",
    Env = "env",
    CustomizeResourceGroupType = "customize-resource-group-type",
    EnvConfig = "env-config",
    Status = "status",
    HostType = "hostType",
    AzureResources = "azure-resources",
    Capabilities = "capabilities",
    ActivePlugins = "active-plugins",
    IsCopilotAllowed = "is-copilot-allowed",
    IsSideloadingAllowed = "is-sideloading-allowed",
    NeedMigrateAadManifest = "need-migrate-aad-manifest",
    CheckCopilotTracingId = "copilot-trace-id",
    CheckSideloadingStatusCode = "status-code",
    CheckSideloadingMethod = "method",
    CheckSideloadingUrl = "url",
    TemplateGroup = "template-group",
    TemplateLanguage = "template-language",
    TemplateScenario = "template-scenario",
    TemplateFallback = "template-fallback",
    TemplateName = "template-name",
    TenantId = "tenant-id",
    TimeCost = "time-cost",
    SampleDownloadDirectory = "sample-download-directory",
    Fallback = "fallback",
    HasSwitchedSubscription = "has-switched-subscription",
    HasSwitchedM365Tenant = "has-switched-m365",
    CustomizeSubscriptionType = "customize-subscription-type",
    IsFromTdp = "is-from-developer-portal",
    ToolkitVersion = "toolkit-version",
    YmlName = "yml-name",
    YmlSchemaVersion = "yml-schema-version",
    GraphPermission = "graph-permission",
    GraphPermissionHasRole = "graph-permission-has-role",
    GraphPermissionHasAdminScope = "graph-permission-has-admin-scope",
    GraphPermissionScopes = "graph-permission-scopes",
    GraphPermissionRoles = "graph-permission-roles",
    RscApplication = "rsc-application",
    RscDelegated = "rsc-delegated",
    WebApplicationId = "web-application-id",
    AadManifest = "aad-manifest",
    CustomCopilotAgent = "custom-copilot-agent",
    CustomCopilotRAG = "custom-copilot-rag",
    LlmService = "llm-service",
    HasAzureOpenAIKey = "has-azure-openai-key",
    HasAzureOpenAIEndpoint = "has-azure-openai-endpoint",
    HasAzureOpenAIDeploymentName = "has-azure-openai-deployment-name",
    HasOpenAIKey = "has-openai-key",
    TDPTraceId = "tdp-trace-id",
    MOSTraceId = "mos-trace-id",
    MOSPATH = "mos-api-path"
}
export declare const TelemetryConstants: {
    eventPrefix: string;
};
export declare enum TelemetryEvent {
    Scaffold = "scaffold",
    GenerateBicep = "generate-arm-templates",
    LocalDebug = "local-debug",
    PostLocalDebug = "post-local-debug",
    Provision = "provision",
    PostProvision = "post-provision",
    PreDeploy = "pre-deploy",
    Deploy = "deploy",
    DownloadSampleStart = "download-sample-start",
    DownloadSample = "download-sample",
    CreateProject = "create",
    AddFeature = "add-feature",
    ProjectUpgrade = "project-upgrade",
    ProjectUpgradeStart = "project-upgrade-start",
    ReadJson = "read-json",
    DecryptUserdata = "decrypt-userdata",
    CheckCopilot = "check-copilot",
    CheckResourceGroupStart = "check-resource-group-start",
    CheckResourceGroup = "check-resource-group",
    CheckSubscriptionStart = "check-subscription-start",
    CheckSubscription = "check-subscription",
    CheckSideloading = "check-sideloading",
    EnvConfig = "env-config",
    DisplayToolingUpdateNotification = "display-tooling-update-notification",
    ProjectMigratorNotificationStart = "project-migrator-notification-start",
    ProjectMigratorNotification = "project-migrator-notification",
    ProjectMigratorMigrateStart = "project-migrator-migrate-start",
    ProjectMigratorMigrate = "project-migrator-migrate",
    ProjectMigratorPrecheckFailed = "project-migrator-pre-check-failed",
    ProjectMigratorError = "project-migrator-error",
    ProjectConsolidateNotificationStart = "project-consolidate-notification-start",
    ProjectConsolidateNotification = "project-consolidate-notification",
    ProjectConsolidateUpgradeStart = "project-consolidate-upgrade-start",
    ProjectConsolidateUpgrade = "project-consolidate-upgrade",
    ProjectConsolidateAddLocalEnvStart = "project-consolidate-add-local-env-start",
    ProjectConsolidateAddLocalEnv = "project-consolidate-add-local-env",
    ProjectConsolidateAddSPFXManifestStart = "project-consolidate-add-spfx-manifest-start",
    ProjectConsolidateAddSPFXManifest = "project-consolidate-add-spfx-manifest",
    ProjectConsolidateCopyAzureManifestStart = "project-consolidate-copy-azure-manifest-start",
    ProjectConsolidateCopyAzureManifest = "project-consolidate-copy-azure-manifest",
    ProjectConsolidateAddAzureManifestStart = "project-consolidate-add-azure-manifest-start",
    ProjectConsolidateAddAzureManifest = "project-consolidate-add-azure-manifest",
    ProjectConsolidateBackupConfigStart = "project-consolidate-backup-config-start",
    ProjectConsolidateBackupConfig = "project-consolidate-backup-config",
    ProjectConsolidateGuideStart = "project-Consolidate-guide-start",
    ProjectConsolidateGuide = "project-consolidate-guide",
    ProjectConsolidateError = "project-consolidate-error",
    ProjectConsolidateCheckManifestError = "project-consolidate-check-manifest-error",
    DetectPortStart = "detect-port-start",
    DetectPort = "detect-port",
    FillProjectId = "fill-project-id",
    ScaffoldFromTemplatesStart = "scaffold-from-templates-start",
    ScaffoldFromTemplates = "scaffold-from-templates",
    GenerateTemplate = "generate-template",
    GenerateSample = "generate-sample",
    ConfirmProvision = "confirm-provision",
    CheckLocalDebugTenant = "check-local-debug-tenant",
    DebugSetUpSSO = "debug-set-up-sso",
    DeploymentInfoNotFound = "deployment-info-not-found",
    InstallScriptNotFound = "install-script-not-found",
    SkipDeploy = "skip-deploy",
    PublishInDeveloperPortal = "publish-in-developer-portal",
    MetaData = "metadata",
    ProjectType = "project-type",
    DependencyApi = "dependency-api",
    AppStudioApi = "app-studio-api",
    MOSApi = "ttk-mos-api",
    ViewPluginManifestAfterAdded = "view-plugin-manifest-after-added"
}
export declare enum ProjectTypeProps {
    IsTeamsFx = "is-teamsfx",
    TeamsfxConfigType = "teamsfx-config-type",
    TeamsfxConfigVersion = "teamsfx-config-version",
    TeamsfxVersionState = "teamsfx-version-state",
    TeamsfxProjectId = "teamsfx-project-id",
    TeamsManifest = "has-manifest",
    TeamsManifestVersion = "manifest-version",
    TeamsManifestAppId = "manifest-app-id",
    TeamsManifestCapabilities = "manifest-capabilities",
    TeamsJs = "teams-js",
    Lauguages = "languages",
    OfficeAddinProjectType = "office-addin-project-type"
}
export declare enum TelemetrySuccess {
    Yes = "yes",
    No = "no"
}
export declare enum TelemetryErrorType {
    UserError = "user",
    SystemError = "system"
}
export declare enum Component {
    vsc = "extension",
    cli = "cli",
    vs = "vs",
    core = "core"
}
export declare enum CustomizeResourceGroupType {
    CommandLine = "command-line",
    EnvConfig = "env-config",
    EnvState = "env-state",
    InteractiveCreateDefault = "interactive-create-default",
    InteractiveCreateCustomized = "interactive-create-customized",
    InteractiveUseExisting = "interactive-use-existing",
    FallbackDefault = "fallback-default"
}
export declare enum CustomizeSubscriptionType {
    CommandLine = "command-line",
    EnvConfig = "env-config",
    EnvState = "env-state",
    Default = "default"
}
export declare enum ProjectMigratorStatus {
    OK = "ok",
    Cancel = "cancel"
}
export declare enum WebApplicationIdValue {
    None = "none",
    Default = "default",
    Customized = "customized"
}
export declare enum ProjectMigratorGuideStatus {
    Reload = "reload",
    LearnMore = "learn-more",
    Cancel = "cancel"
}
export declare enum ApiSpecTelemetryPropertis {
    SpecNotValidDetails = "spec-not-valid-details",
    InvalidApiSpec = "invalid-api-spec"
}
export declare function getQuestionValidationErrorEventName(questionName: string): string;
export declare function sendTelemetryEvent(component: string, eventName: string, properties?: {
    [p: string]: string;
}, measurements?: {
    [p: string]: number;
}): void;
export declare function sendTelemetryErrorEvent(component: string, eventName: string, fxError: FxError, properties?: {
    [p: string]: string;
}): void;
declare class TelemetryUtils {
    /**
     * fill in telemetry properties for FxError
     * @param error FxError
     * @param props teletry properties
     */
    fillInErrorProperties(props: Record<string, string>, error: FxError): void;
    fillinProjectTypeProperties(props: Record<string, string>, projectTypeRes: ProjectTypeResult): void;
    extractMethodNamesFromErrorStack(stack?: string): string;
}
export declare const telemetryUtils: TelemetryUtils;
export {};
//# sourceMappingURL=telemetry.d.ts.map