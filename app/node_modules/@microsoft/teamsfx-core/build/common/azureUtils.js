"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.askSubscription = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const localizeUtils_1 = require("./localizeUtils");
async function askSubscription(azureAccountProvider, ui, activeSubscriptionId) {
    const subscriptions = await azureAccountProvider.listSubscriptions();
    if (subscriptions.length === 0) {
        return (0, teamsfx_api_1.err)(new teamsfx_api_1.UserError("Core", "NoSubscriptionFound", (0, localizeUtils_1.getDefaultString)("error.NoSubscriptionFound"), (0, localizeUtils_1.getLocalizedString)("error.NoSubscriptionFound")));
    }
    let resultSub = subscriptions.find((sub) => sub.subscriptionId === activeSubscriptionId);
    if (activeSubscriptionId === undefined || resultSub === undefined) {
        let selectedSub = undefined;
        if (subscriptions.length === 1) {
            selectedSub = subscriptions[0];
        }
        else {
            const options = subscriptions.map((sub) => {
                return {
                    id: sub.subscriptionId,
                    label: sub.subscriptionName,
                    data: sub.tenantId,
                };
            });
            const askRes = await ui.selectOption({
                name: "subscription",
                title: "Select a subscription",
                options: options,
                returnObject: true,
            });
            if (askRes.isErr())
                return (0, teamsfx_api_1.err)(askRes.error);
            const subItem = askRes.value.result;
            selectedSub = {
                subscriptionId: subItem.id,
                subscriptionName: subItem.label,
                tenantId: subItem.data,
            };
        }
        if (selectedSub === undefined) {
            return (0, teamsfx_api_1.err)(new teamsfx_api_1.SystemError("Core", "NoSubscriptionFound", (0, localizeUtils_1.getDefaultString)("error.NoSubscriptionFound"), (0, localizeUtils_1.getLocalizedString)("error.NoSubscriptionFound")));
        }
        resultSub = selectedSub;
    }
    return (0, teamsfx_api_1.ok)(resultSub);
}
exports.askSubscription = askSubscription;
//# sourceMappingURL=azureUtils.js.map