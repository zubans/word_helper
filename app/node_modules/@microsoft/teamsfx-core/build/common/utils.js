"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.isJsonSpecFile = exports.generateDriverContext = exports.waitSeconds = void 0;
const tslib_1 = require("tslib");
const axios_1 = tslib_1.__importDefault(require("axios"));
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
async function waitSeconds(second) {
    return new Promise((resolve) => setTimeout(resolve, second * 1000));
}
exports.waitSeconds = waitSeconds;
function generateDriverContext(ctx, inputs) {
    return {
        azureAccountProvider: ctx.tokenProvider.azureAccountProvider,
        m365TokenProvider: ctx.tokenProvider.m365TokenProvider,
        ui: ctx.userInteraction,
        progressBar: undefined,
        logProvider: ctx.logProvider,
        telemetryReporter: ctx.telemetryReporter,
        projectPath: ctx.projectPath,
        platform: inputs.platform,
    };
}
exports.generateDriverContext = generateDriverContext;
async function isJsonSpecFile(filePath) {
    const specPath = filePath.toLowerCase();
    if (specPath.endsWith(".yaml") || specPath.endsWith(".yml")) {
        return false;
    }
    else if (specPath.endsWith(".json")) {
        return true;
    }
    const isRemoteFile = specPath.startsWith("http:") || specPath.startsWith("https:");
    const fileContent = isRemoteFile
        ? (await axios_1.default.get(specPath)).data
        : await fs_extra_1.default.readFile(specPath, "utf-8");
    try {
        JSON.parse(fileContent);
        return true;
    }
    catch (error) {
        return false;
    }
}
exports.isJsonSpecFile = isJsonSpecFile;
//# sourceMappingURL=utils.js.map