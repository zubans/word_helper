"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.featureFlagManager = exports.FeatureFlagManager = exports.isCopilotExtensionEnabled = exports.FeatureFlags = exports.FeatureFlagName = exports.isFeatureFlagEnabled = void 0;
// Determine whether feature flag is enabled based on environment variable setting
function isFeatureFlagEnabled(featureFlagName, defaultValue = false) {
    const flag = process.env[featureFlagName];
    if (flag === undefined) {
        return defaultValue; // allows consumer to set a default value when environment variable not set
    }
    else {
        return flag === "1" || flag.toLowerCase() === "true"; // can enable feature flag by set environment variable value to "1" or "true"
    }
}
exports.isFeatureFlagEnabled = isFeatureFlagEnabled;
class FeatureFlagName {
}
exports.FeatureFlagName = FeatureFlagName;
FeatureFlagName.CLIDotNet = "TEAMSFX_CLI_DOTNET";
FeatureFlagName.OfficeAddin = "TEAMSFX_OFFICE_ADDIN";
FeatureFlagName.OfficeMetaOS = "TEAMSFX_OFFICE_METAOS";
FeatureFlagName.CopilotExtension = "DEVELOP_COPILOT_EXTENSION";
FeatureFlagName.CopilotPlugin = "DEVELOP_COPILOT_PLUGIN";
FeatureFlagName.SampleConfigBranch = "TEAMSFX_SAMPLE_CONFIG_BRANCH";
FeatureFlagName.TestTool = "TEAMSFX_TEST_TOOL";
FeatureFlagName.METestTool = "TEAMSFX_ME_TEST_TOOL";
FeatureFlagName.TeamsFxRebranding = "TEAMSFX_REBRANDING";
FeatureFlagName.TdpTemplateCliTest = "TEAMSFX_TDP_TEMPLATE_CLI_TEST";
FeatureFlagName.AsyncAppValidation = "TEAMSFX_ASYNC_APP_VALIDATION";
FeatureFlagName.NewProjectType = "TEAMSFX_NEW_PROJECT_TYPE";
FeatureFlagName.ChatParticipant = "TEAMSFX_CHAT_PARTICIPANT";
FeatureFlagName.ChatParticipantUIEntries = "TEAMSFX_CHAT_PARTICIPANT_ENTRIES";
FeatureFlagName.SMEOAuth = "SME_OAUTH";
FeatureFlagName.ShowDiagnostics = "TEAMSFX_SHOW_DIAGNOSTICS";
FeatureFlagName.TelemetryTest = "TEAMSFX_TELEMETRY_TEST";
FeatureFlagName.DevTunnelTest = "TEAMSFX_DEV_TUNNEL_TEST";
FeatureFlagName.SyncManifest = "TEAMSFX_SYNC_MANIFEST";
FeatureFlagName.EnvFileFunc = "TEAMSFX_ENV_FILE_FUNC";
FeatureFlagName.KiotaIntegration = "TEAMSFX_KIOTA_INTEGRATION";
FeatureFlagName.ApiPluginAAD = "TEAMSFX_API_PLUGIN_AAD";
FeatureFlagName.CEAEnabled = "TEAMSFX_CEA_ENABLED";
FeatureFlagName.MultiTenant = "TEAMSFX_MULTI_TENANT";
class FeatureFlags {
}
exports.FeatureFlags = FeatureFlags;
FeatureFlags.CLIDotNet = { name: FeatureFlagName.CLIDotNet, defaultValue: "false" };
FeatureFlags.CopilotExtension = {
    name: FeatureFlagName.CopilotExtension,
    defaultValue: "false",
};
FeatureFlags.CopilotPlugin = {
    name: FeatureFlagName.CopilotPlugin,
    defaultValue: "false",
}; // old feature flag. Keep it for backwards compatibility.
FeatureFlags.TestTool = { name: FeatureFlagName.TestTool, defaultValue: "true" };
FeatureFlags.METestTool = { name: FeatureFlagName.METestTool, defaultValue: "true" };
FeatureFlags.OfficeAddin = { name: FeatureFlagName.OfficeAddin, defaultValue: "false" };
FeatureFlags.OfficeMetaOS = {
    name: FeatureFlagName.OfficeMetaOS,
    defaultValue: "false",
};
FeatureFlags.TdpTemplateCliTest = {
    name: FeatureFlagName.TdpTemplateCliTest,
    defaultValue: "false",
};
FeatureFlags.AsyncAppValidation = {
    name: FeatureFlagName.AsyncAppValidation,
    defaultValue: "true",
};
FeatureFlags.NewProjectType = { name: FeatureFlagName.NewProjectType, defaultValue: "true" };
FeatureFlags.ChatParticipant = {
    name: FeatureFlagName.ChatParticipant,
    defaultValue: "false",
};
FeatureFlags.ChatParticipantUIEntries = {
    name: FeatureFlagName.ChatParticipantUIEntries,
    defaultValue: "true",
};
FeatureFlags.SMEOAuth = { name: FeatureFlagName.SMEOAuth, defaultValue: "false" };
FeatureFlags.ShowDiagnostics = {
    name: FeatureFlagName.ShowDiagnostics,
    defaultValue: "false",
};
FeatureFlags.TelemetryTest = {
    name: FeatureFlagName.TelemetryTest,
    defaultValue: "false",
};
FeatureFlags.DevTunnelTest = {
    name: FeatureFlagName.DevTunnelTest,
    defaultValue: "false",
};
FeatureFlags.SyncManifest = {
    name: FeatureFlagName.SyncManifest,
    defaultValue: "false",
};
FeatureFlags.EnvFileFunc = {
    name: FeatureFlagName.EnvFileFunc,
    defaultValue: "true", // Set it to true for dogfooding.
};
FeatureFlags.KiotaIntegration = {
    name: FeatureFlagName.KiotaIntegration,
    defaultValue: "false",
};
FeatureFlags.ApiPluginAAD = {
    name: FeatureFlagName.ApiPluginAAD,
    defaultValue: "false",
};
FeatureFlags.CEAEnabled = {
    name: FeatureFlagName.CEAEnabled,
    defaultValue: "false",
};
FeatureFlags.MultiTenant = {
    name: FeatureFlagName.MultiTenant,
    defaultValue: "false",
};
function isCopilotExtensionEnabled() {
    return (exports.featureFlagManager.getBooleanValue(FeatureFlags.CopilotExtension) ||
        exports.featureFlagManager.getBooleanValue(FeatureFlags.CopilotPlugin));
}
exports.isCopilotExtensionEnabled = isCopilotExtensionEnabled;
class FeatureFlagManager {
    getBooleanValue(featureFlag) {
        return isFeatureFlagEnabled(featureFlag.name, featureFlag.defaultValue === "true" || featureFlag.defaultValue === "1");
    }
    setBooleanValue(featureFlag, value) {
        process.env[featureFlag.name] = value ? "true" : "false";
    }
    getStringValue(featureFlag) {
        return process.env[featureFlag.name] || featureFlag.defaultValue;
    }
    list() {
        return Object.values(FeatureFlags);
    }
    listEnabled() {
        return this.list()
            .filter((f) => isFeatureFlagEnabled(f.name))
            .map((f) => f.name);
    }
}
exports.FeatureFlagManager = FeatureFlagManager;
exports.featureFlagManager = new FeatureFlagManager();
//# sourceMappingURL=featureFlags.js.map