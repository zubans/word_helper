import { AxiosInstance, AxiosError, CreateAxiosDefaults, AxiosResponse, InternalAxiosRequestConfig } from "axios";
/**
 * This client will send telemetries to record API request trace
 */
export declare class WrappedAxiosClient {
    static create(config?: CreateAxiosDefaults): AxiosInstance;
    /**
     * Send API start telemetry
     * @param request
     */
    static onRequest(request: InternalAxiosRequestConfig): InternalAxiosRequestConfig<any>;
    /**
     * Send API success telemetry
     * @param response
     * @returns
     */
    static onResponse(response: AxiosResponse): AxiosResponse<any, any>;
    /**
     * Send API failure telemetry
     * @param error
     * @returns
     */
    static onRejected(error: AxiosError): Promise<never>;
    /**
     * Convert request URL to API name, otherwise it will be redacted in telemetry
     * This function should be extended when new API is added
     * @param baseUrl
     * @param path
     * @param method
     * @returns
     */
    static convertUrlToApiName(fullPath: string, method: string): string;
    /**
     * Generate extra properties for specific requirements
     * @param baseUrl
     * @param path
     * @param method
     */
    private static generateExtraProperties;
    /**
     * Extract region from baseUrl, E.g. https://dev.teams.microsoft.com/amer => amer
     * @param url
     * @returns
     */
    private static extractRegion;
    /**
     * Check if it's TDP Api
     * @param baseUrl
     * @returns
     */
    private static isTDPApi;
    private static getEventName;
    /**
     * Flattern query parameters to string, e.g. {a: 1, b: 2} => a:1;b:2
     * @param params
     * @returns
     */
    private static generateParameters;
}
//# sourceMappingURL=wrappedAxiosClient.d.ts.map