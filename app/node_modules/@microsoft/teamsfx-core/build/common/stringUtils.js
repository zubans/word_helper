"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.isValidHttpUrl = exports.loadingDefaultPlaceholder = exports.loadingOptionsPlaceholder = exports.getHashedEnv = exports.getUuid = exports.parseFromResourceId = exports.getResourceGroupNameFromResourceId = exports.convertToAlphanumericOnly = exports.maskSecretFromEnv = exports.maskSecret = void 0;
const tslib_1 = require("tslib");
const crypto = tslib_1.__importStar(require("crypto"));
const Handlebars = tslib_1.__importStar(require("handlebars"));
const url_1 = require("url");
const uuid = tslib_1.__importStar(require("uuid"));
const common_1 = require("../error/common");
const localizeUtils_1 = require("./localizeUtils");
const masker_1 = require("./secretmasker/masker");
const SECRET_REPLACE = "<REDACTED:secret>";
function maskSecret(inputText, option) {
    if (!inputText)
        return "";
    const replace = (option === null || option === void 0 ? void 0 : option.replace) || SECRET_REPLACE;
    let output = maskSecretFromEnv(inputText);
    output = masker_1.secretMasker.maskSecret(output, replace);
    return output;
}
exports.maskSecret = maskSecret;
function maskSecretFromEnv(stdout, replace = SECRET_REPLACE) {
    for (const key of Object.keys(process.env)) {
        if (key.startsWith("SECRET_")) {
            const value = process.env[key];
            if (value) {
                stdout = stdout.replace(new RegExp(value, "g"), replace);
            }
        }
    }
    return stdout;
}
exports.maskSecretFromEnv = maskSecretFromEnv;
function convertToAlphanumericOnly(appName) {
    return appName.replace(/[^\da-zA-Z]/g, "");
}
exports.convertToAlphanumericOnly = convertToAlphanumericOnly;
Handlebars.registerHelper("contains", (value, array) => {
    array = array instanceof Array ? array : [array];
    return array.indexOf(value) > -1 ? this : "";
});
Handlebars.registerHelper("notContains", (value, array) => {
    array = array instanceof Array ? array : [array];
    return array.indexOf(value) == -1 ? this : "";
});
Handlebars.registerHelper("equals", (value, target) => {
    return value === target ? this : "";
});
function getResourceGroupNameFromResourceId(resourceId) {
    const result = parseFromResourceId(/\/resourceGroups\/([^\/]*)\//i, resourceId);
    if (!result) {
        throw new common_1.FailedToParseResourceIdError("resource group name", resourceId);
    }
    return result;
}
exports.getResourceGroupNameFromResourceId = getResourceGroupNameFromResourceId;
function parseFromResourceId(pattern, resourceId) {
    const result = resourceId.match(pattern);
    return result ? result[1].trim() : "";
}
exports.parseFromResourceId = parseFromResourceId;
function getUuid() {
    return uuid.v4();
}
exports.getUuid = getUuid;
function getHashedEnv(envName) {
    return crypto.createHash("sha256").update(envName).digest("hex");
}
exports.getHashedEnv = getHashedEnv;
function loadingOptionsPlaceholder() {
    return (0, localizeUtils_1.getLocalizedString)("ui.select.LoadingOptionsPlaceholder");
}
exports.loadingOptionsPlaceholder = loadingOptionsPlaceholder;
function loadingDefaultPlaceholder() {
    return (0, localizeUtils_1.getLocalizedString)("ui.select.LoadingDefaultPlaceholder");
}
exports.loadingDefaultPlaceholder = loadingDefaultPlaceholder;
function isValidHttpUrl(input) {
    let url;
    try {
        url = new url_1.URL(input);
        return url.protocol === "http:" || url.protocol === "https:";
    }
    catch (e) {
        return false;
    }
}
exports.isValidHttpUrl = isValidHttpUrl;
//# sourceMappingURL=stringUtils.js.map