"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.dictMatcher = exports.trimNonAlphabetChars = exports.BloomFilter = void 0;
const tslib_1 = require("tslib");
const crypto = tslib_1.__importStar(require("crypto"));
const path = tslib_1.__importStar(require("path"));
const folder_1 = require("../../folder");
const adm_zip_1 = tslib_1.__importDefault(require("adm-zip"));
/**
 * Bloom Filter is used to check whether a word is in the dictionary with less memory usage than normal hash map.
 */
class BloomFilter {
    constructor() {
        this.size = 100000000;
        this.numHashFunctions = 7;
        this.bitArray = new Uint8Array(this.size);
    }
    hash(word, seed) {
        const hash = crypto.createHash("sha256");
        hash.update(`${word}${seed}`);
        return parseInt(hash.digest("hex").slice(0, 8), 16) % this.size;
    }
    add(word) {
        for (let i = 0; i < this.numHashFunctions; i++) {
            const index = this.hash(word, i);
            this.bitArray[index] = 1;
        }
    }
    contains(word) {
        for (let i = 0; i < this.numHashFunctions; i++) {
            const index = this.hash(word, i);
            if (this.bitArray[index] === 0) {
                return false;
            }
        }
        return true;
    }
    //   public saveToFile(filename: string): void {
    //     fs.writeFileSync(filename, this.bitArray);
    //   }
    //   public static loadFromFile(filename: string): BloomFilter {
    //     const bitArray = new Uint8Array(fs.readFileSync(filename));
    //     const bloomFilter = new BloomFilter();
    //     bloomFilter.bitArray = bitArray;
    //     return bloomFilter;
    //   }
    static loadFromZipFile(zipFilename) {
        // Read the zip file into memory
        const zip = new adm_zip_1.default(zipFilename);
        // Get the entries in the zip file
        const zipEntries = zip.getEntries();
        // Assuming the first file in the zip is the bit array file
        const bitArrayFile = zipEntries[0];
        // Read the content of the file as a buffer
        const fileContents = bitArrayFile.getData();
        // Create a new BloomFilter instance and populate it
        const bloomFilter = new BloomFilter();
        bloomFilter.bitArray = new Uint8Array(fileContents);
        return bloomFilter;
    }
}
exports.BloomFilter = BloomFilter;
class DictionaryMatcher {
    constructor() {
        this.bloomFilter = BloomFilter.loadFromZipFile(path.join((0, folder_1.getResourceFolder)(), "dict.zip"));
    }
    match(text) {
        const input = trimNonAlphabetChars(text);
        if (this.bloomFilter.contains(input)) {
            return "exact";
        }
        return "none";
    }
}
function trimNonAlphabetChars(token) {
    // Regular expression to match non-alphabet characters at the beginning and end
    return token.replace(/^[^a-zA-Z]+|[^a-zA-Z]+$/g, "");
}
exports.trimNonAlphabetChars = trimNonAlphabetChars;
exports.dictMatcher = new DictionaryMatcher();
//# sourceMappingURL=dict.js.map