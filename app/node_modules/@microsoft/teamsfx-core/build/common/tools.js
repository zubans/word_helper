"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.listDevTunnels = exports.getSPFxToken = exports.getSPFxTenant = exports.listAllTenants = exports.getSideloadingStatus = void 0;
const tslib_1 = require("tslib");
const dev_tunnels_management_1 = require("@microsoft/dev-tunnels-management");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const axios_1 = tslib_1.__importDefault(require("axios"));
const teamsDevPortalClient_1 = require("../client/teamsDevPortalClient");
const constants_1 = require("./constants");
async function getSideloadingStatus(token) {
    return teamsDevPortalClient_1.teamsDevPortalClient.getSideloadingStatus(token);
}
exports.getSideloadingStatus = getSideloadingStatus;
async function listAllTenants(token) {
    const RM_ENDPOINT = "https://management.azure.com/tenants?api-version=2022-06-01";
    if (token.length > 0) {
        try {
            const response = await axios_1.default.get(RM_ENDPOINT, {
                headers: { Authorization: `Bearer ${token}` },
            });
            return response.data.value;
        }
        catch (error) {
            return [];
        }
    }
    return [];
}
exports.listAllTenants = listAllTenants;
async function getSPFxTenant(graphToken) {
    const GRAPH_TENANT_ENDPT = "https://graph.microsoft.com/v1.0/sites/root?$select=webUrl";
    if (graphToken.length > 0) {
        const response = await axios_1.default.get(GRAPH_TENANT_ENDPT, {
            headers: { Authorization: `Bearer ${graphToken}` },
        });
        return response.data.webUrl;
    }
    return "";
}
exports.getSPFxTenant = getSPFxTenant;
async function getSPFxToken(m365TokenProvider) {
    const graphTokenRes = await m365TokenProvider.getAccessToken({
        scopes: constants_1.GraphReadUserScopes,
    });
    let spoToken = undefined;
    if (graphTokenRes && graphTokenRes.isOk()) {
        const tenant = await getSPFxTenant(graphTokenRes.value);
        const spfxTokenRes = await m365TokenProvider.getAccessToken({
            scopes: (0, constants_1.SPFxScopes)(tenant),
        });
        spoToken = spfxTokenRes.isOk() ? spfxTokenRes.value : undefined;
    }
    return spoToken;
}
exports.getSPFxToken = getSPFxToken;
// this function will be deleted after VS has added get dev tunnel and list dev tunnels API
const TunnelManagementUserAgent = { name: "Teams-Toolkit" };
async function listDevTunnels(token, isGitHub = false) {
    try {
        const tunnelManagementClientImpl = new dev_tunnels_management_1.TunnelManagementHttpClient(TunnelManagementUserAgent, dev_tunnels_management_1.ManagementApiVersions.Version20230927preview, () => {
            if (isGitHub === true) {
                const res = `github client_id=a200baed193bb2088a6e ${token}`;
                return Promise.resolve(res);
            }
            else {
                const res = `Bearer ${token}`;
                return Promise.resolve(res);
            }
        });
        const options = {
            includeAccessControl: true,
        };
        const tunnels = await tunnelManagementClientImpl.listTunnels(undefined, undefined, options);
        return (0, teamsfx_api_1.ok)(tunnels);
    }
    catch (error) {
        return (0, teamsfx_api_1.err)(new teamsfx_api_1.SystemError("DevTunnels", "ListDevTunnelsFailed", error.message));
    }
}
exports.listDevTunnels = listDevTunnels;
//# sourceMappingURL=tools.js.map