export declare function isFeatureFlagEnabled(featureFlagName: string, defaultValue?: boolean): boolean;
export declare class FeatureFlagName {
    static readonly CLIDotNet = "TEAMSFX_CLI_DOTNET";
    static readonly OfficeAddin = "TEAMSFX_OFFICE_ADDIN";
    static readonly OfficeMetaOS = "TEAMSFX_OFFICE_METAOS";
    static readonly CopilotExtension = "DEVELOP_COPILOT_EXTENSION";
    static readonly CopilotPlugin = "DEVELOP_COPILOT_PLUGIN";
    static readonly SampleConfigBranch = "TEAMSFX_SAMPLE_CONFIG_BRANCH";
    static readonly TestTool = "TEAMSFX_TEST_TOOL";
    static readonly METestTool = "TEAMSFX_ME_TEST_TOOL";
    static readonly TeamsFxRebranding = "TEAMSFX_REBRANDING";
    static readonly TdpTemplateCliTest = "TEAMSFX_TDP_TEMPLATE_CLI_TEST";
    static readonly AsyncAppValidation = "TEAMSFX_ASYNC_APP_VALIDATION";
    static readonly NewProjectType = "TEAMSFX_NEW_PROJECT_TYPE";
    static readonly ChatParticipant = "TEAMSFX_CHAT_PARTICIPANT";
    static readonly ChatParticipantUIEntries = "TEAMSFX_CHAT_PARTICIPANT_ENTRIES";
    static readonly SMEOAuth = "SME_OAUTH";
    static readonly ShowDiagnostics = "TEAMSFX_SHOW_DIAGNOSTICS";
    static readonly TelemetryTest = "TEAMSFX_TELEMETRY_TEST";
    static readonly DevTunnelTest = "TEAMSFX_DEV_TUNNEL_TEST";
    static readonly SyncManifest = "TEAMSFX_SYNC_MANIFEST";
    static readonly EnvFileFunc = "TEAMSFX_ENV_FILE_FUNC";
    static readonly KiotaIntegration = "TEAMSFX_KIOTA_INTEGRATION";
    static readonly ApiPluginAAD = "TEAMSFX_API_PLUGIN_AAD";
    static readonly CEAEnabled = "TEAMSFX_CEA_ENABLED";
    static readonly MultiTenant = "TEAMSFX_MULTI_TENANT";
}
export interface FeatureFlag {
    name: string;
    defaultValue: string;
    description?: string;
}
export declare class FeatureFlags {
    static readonly CLIDotNet: {
        name: string;
        defaultValue: string;
    };
    static readonly CopilotExtension: {
        name: string;
        defaultValue: string;
    };
    static readonly CopilotPlugin: {
        name: string;
        defaultValue: string;
    };
    static readonly TestTool: {
        name: string;
        defaultValue: string;
    };
    static readonly METestTool: {
        name: string;
        defaultValue: string;
    };
    static readonly OfficeAddin: {
        name: string;
        defaultValue: string;
    };
    static readonly OfficeMetaOS: {
        name: string;
        defaultValue: string;
    };
    static readonly TdpTemplateCliTest: {
        name: string;
        defaultValue: string;
    };
    static readonly AsyncAppValidation: {
        name: string;
        defaultValue: string;
    };
    static readonly NewProjectType: {
        name: string;
        defaultValue: string;
    };
    static readonly ChatParticipant: {
        name: string;
        defaultValue: string;
    };
    static readonly ChatParticipantUIEntries: {
        name: string;
        defaultValue: string;
    };
    static readonly SMEOAuth: {
        name: string;
        defaultValue: string;
    };
    static readonly ShowDiagnostics: {
        name: string;
        defaultValue: string;
    };
    static readonly TelemetryTest: {
        name: string;
        defaultValue: string;
    };
    static readonly DevTunnelTest: {
        name: string;
        defaultValue: string;
    };
    static readonly SyncManifest: {
        name: string;
        defaultValue: string;
    };
    static readonly EnvFileFunc: {
        name: string;
        defaultValue: string;
    };
    static readonly KiotaIntegration: {
        name: string;
        defaultValue: string;
    };
    static readonly ApiPluginAAD: {
        name: string;
        defaultValue: string;
    };
    static readonly CEAEnabled: {
        name: string;
        defaultValue: string;
    };
    static readonly MultiTenant: {
        name: string;
        defaultValue: string;
    };
}
export declare function isCopilotExtensionEnabled(): boolean;
export declare class FeatureFlagManager {
    getBooleanValue(featureFlag: FeatureFlag): boolean;
    setBooleanValue(featureFlag: FeatureFlag, value: boolean): void;
    getStringValue(featureFlag: FeatureFlag): string;
    list(): FeatureFlag[];
    listEnabled(): string[];
}
export declare const featureFlagManager: FeatureFlagManager;
//# sourceMappingURL=featureFlags.d.ts.map