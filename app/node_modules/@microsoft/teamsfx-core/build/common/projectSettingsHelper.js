"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getProjectMetadata = exports.isVSProject = exports.isValidProjectV2 = exports.isValidProjectV3 = exports.isOfficeMetaOsAddInManifest = exports.isOfficeXmlAddInManifest = exports.fetchManifestList = exports.isManifestOnlyOfficeAddinProject = exports.isValidOfficeAddInProject = exports.isValidProject = exports.validateProjectSettings = exports.OfficeManifestType = void 0;
const tslib_1 = require("tslib");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const path = tslib_1.__importStar(require("path"));
const versionMetadata_1 = require("./versionMetadata");
const pathUtils_1 = require("../component/utils/pathUtils");
const yaml_1 = require("yaml");
var OfficeManifestType;
(function (OfficeManifestType) {
    OfficeManifestType[OfficeManifestType["XmlAddIn"] = 0] = "XmlAddIn";
    OfficeManifestType[OfficeManifestType["MetaOsAddIn"] = 1] = "MetaOsAddIn";
})(OfficeManifestType = exports.OfficeManifestType || (exports.OfficeManifestType = {}));
function validateProjectSettings(projectSettings) {
    var _a;
    if (!projectSettings)
        return "empty projectSettings";
    if (!projectSettings.solutionSettings)
        return undefined;
    const solutionSettings = projectSettings.solutionSettings;
    let validateRes = validateStringArray(solutionSettings.azureResources);
    if (validateRes) {
        return `solutionSettings.azureResources validation failed: ${validateRes}`;
    }
    validateRes = validateStringArray(solutionSettings.capabilities);
    if (validateRes) {
        return `solutionSettings.capabilities validation failed: ${validateRes}`;
    }
    validateRes = validateStringArray(solutionSettings.activeResourcePlugins);
    if (validateRes) {
        return `solutionSettings.activeResourcePlugins validation failed: ${validateRes}`;
    }
    if ((_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.solutionSettings) === null || _a === void 0 ? void 0 : _a.migrateFromV1) {
        return "The project created before v2.0.0 is only supported in the Teams Toolkit before v3.4.0.";
    }
    return undefined;
}
exports.validateProjectSettings = validateProjectSettings;
function validateStringArray(arr, enums) {
    if (!arr) {
        return "is undefined";
    }
    if (!Array.isArray(arr)) {
        return "is not array";
    }
    for (const element of arr) {
        if (typeof element !== "string") {
            return "array elements is not string type";
        }
        if (enums && !enums.includes(element)) {
            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
            return `array elements is out of scope: ${enums}`;
        }
    }
    return undefined;
}
function isValidProject(workspacePath) {
    if (!workspacePath)
        return false;
    try {
        return isValidProjectV3(workspacePath) || isValidProjectV2(workspacePath);
    }
    catch (e) {
        return false;
    }
}
exports.isValidProject = isValidProject;
function isValidOfficeAddInProject(workspacePath) {
    const xmlManifestList = fetchManifestList(workspacePath, OfficeManifestType.XmlAddIn);
    const metaOsManifestList = fetchManifestList(workspacePath, OfficeManifestType.MetaOsAddIn);
    try {
        if (xmlManifestList &&
            xmlManifestList.length > 0 &&
            (!metaOsManifestList || metaOsManifestList.length == 0)) {
            return true;
        }
        else {
            return false;
        }
    }
    catch (e) {
        return false;
    }
}
exports.isValidOfficeAddInProject = isValidOfficeAddInProject;
function isManifestOnlyOfficeAddinProject(workspacePath) {
    if (!workspacePath)
        return false;
    const srcPath = path.join(workspacePath, "src");
    return !fs_extra_1.default.existsSync(srcPath);
}
exports.isManifestOnlyOfficeAddinProject = isManifestOnlyOfficeAddinProject;
function fetchManifestList(workspacePath, officeManifestType) {
    if (!workspacePath)
        return undefined;
    const list = fs_extra_1.default.readdirSync(workspacePath);
    const manifestList = list.filter((fileName) => officeManifestType == OfficeManifestType.XmlAddIn
        ? isOfficeXmlAddInManifest(fileName)
        : isOfficeMetaOsAddInManifest(fileName));
    return manifestList;
}
exports.fetchManifestList = fetchManifestList;
function isOfficeXmlAddInManifest(inputFileName) {
    return (inputFileName.toLocaleLowerCase().indexOf("manifest") != -1 &&
        inputFileName.toLocaleLowerCase().endsWith(".xml"));
}
exports.isOfficeXmlAddInManifest = isOfficeXmlAddInManifest;
function isOfficeMetaOsAddInManifest(inputFileName) {
    return (inputFileName.toLocaleLowerCase().indexOf("manifest") != -1 &&
        inputFileName.toLocaleLowerCase().endsWith(".json"));
}
exports.isOfficeMetaOsAddInManifest = isOfficeMetaOsAddInManifest;
function isValidProjectV3(workspacePath) {
    if (isValidOfficeAddInProject(workspacePath)) {
        return false;
    }
    const ymlFilePath = path.join(workspacePath, versionMetadata_1.MetadataV3.configFile);
    const localYmlPath = path.join(workspacePath, versionMetadata_1.MetadataV3.localConfigFile);
    if (fs_extra_1.default.pathExistsSync(ymlFilePath) || fs_extra_1.default.pathExistsSync(localYmlPath)) {
        return true;
    }
    return false;
}
exports.isValidProjectV3 = isValidProjectV3;
function isValidProjectV2(workspacePath) {
    const confFolderPath = path.resolve(workspacePath, `.${teamsfx_api_1.ConfigFolderName}`, "configs");
    const settingsFile = path.resolve(confFolderPath, "projectSettings.json");
    if (!fs_extra_1.default.existsSync(settingsFile)) {
        return false;
    }
    const projectSettings = fs_extra_1.default.readJsonSync(settingsFile);
    if (validateProjectSettings(projectSettings))
        return false;
    return true;
}
exports.isValidProjectV2 = isValidProjectV2;
function isVSProject(projectSettings) {
    return (projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.programmingLanguage) === "csharp";
}
exports.isVSProject = isVSProject;
function getProjectMetadata(rootPath) {
    if (!rootPath) {
        return undefined;
    }
    try {
        const ymlPath = pathUtils_1.pathUtils.getYmlFilePath(rootPath, "dev");
        if (!ymlPath || !fs_extra_1.default.pathExistsSync(ymlPath)) {
            return undefined;
        }
        const ymlContent = fs_extra_1.default.readFileSync(ymlPath, "utf-8");
        const ymlObject = (0, yaml_1.parse)(ymlContent);
        return {
            projectId: (ymlObject === null || ymlObject === void 0 ? void 0 : ymlObject.projectId) ? ymlObject.projectId.toString() : "",
            version: (ymlObject === null || ymlObject === void 0 ? void 0 : ymlObject.version) ? ymlObject.version.toString() : "",
        };
    }
    catch (_a) {
        return undefined;
    }
}
exports.getProjectMetadata = getProjectMetadata;
//# sourceMappingURL=projectSettingsHelper.js.map