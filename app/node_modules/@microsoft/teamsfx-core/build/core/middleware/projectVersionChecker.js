"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectVersionCheckerMW = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const semver_1 = tslib_1.__importDefault(require("semver"));
const globalVars_1 = require("../../common/globalVars");
const localizeUtils_1 = require("../../common/localizeUtils");
const versionMetadata_1 = require("../../common/versionMetadata");
const common_1 = require("../../error/common");
const projectMigratorV3_1 = require("./projectMigratorV3");
const v3MigrationUtils_1 = require("./utils/v3MigrationUtils");
const ProjectVersionCheckerMW = async (ctx, next) => {
    const versionInfo = await (0, v3MigrationUtils_1.getProjectVersion)(ctx);
    if (needToShowUpdateDialog(versionInfo)) {
        const errRes = await showDialog(ctx);
        ctx.result = (0, teamsfx_api_1.err)(errRes);
        return;
    }
    await next();
};
exports.ProjectVersionCheckerMW = ProjectVersionCheckerMW;
function needToShowUpdateDialog(versionInfo) {
    if (versionInfo.source === versionMetadata_1.VersionSource.teamsapp && semver_1.default.gte(versionInfo.version, "2.0.0")) {
        return true;
    }
    return false;
}
function showDialog(ctx) {
    const lastArg = ctx.arguments[ctx.arguments.length - 1];
    const inputs = lastArg === ctx ? ctx.arguments[ctx.arguments.length - 2] : lastArg;
    if (inputs.platform === teamsfx_api_1.Platform.VSCode) {
        const messageKey = "core.projectVersionChecker.incompatibleProject";
        const message = (0, localizeUtils_1.getLocalizedString)(messageKey);
        globalVars_1.TOOLS.ui.showMessage("warn", message, false, (0, projectMigratorV3_1.moreInfoButton)()).then((res) => {
            if (res.isOk() && res.value === (0, projectMigratorV3_1.moreInfoButton)()) {
                void globalVars_1.TOOLS.ui.openUrl(versionMetadata_1.MetadataV2.updateToolkitLink);
            }
        }, () => { });
        return Promise.resolve(new common_1.IncompatibleProjectError(messageKey));
    }
    else if (inputs.platform === teamsfx_api_1.Platform.CLI) {
        const messageKey = "core.projectVersionChecker.cliUseNewVersion";
        globalVars_1.TOOLS.logProvider.warning((0, localizeUtils_1.getLocalizedString)(messageKey));
        return Promise.resolve(new common_1.IncompatibleProjectError(messageKey));
    }
    else {
        const messageKey = "core.projectVersionChecker.vs.incompatibleProject";
        const message = (0, localizeUtils_1.getLocalizedString)(messageKey);
        globalVars_1.TOOLS.ui.showMessage("warn", message, false, (0, projectMigratorV3_1.moreInfoButton)()).then((res) => {
            if (res.isOk() && res.value === (0, projectMigratorV3_1.moreInfoButton)()) {
                void globalVars_1.TOOLS.ui.openUrl(projectMigratorV3_1.learnMoreLink);
            }
        }, () => { });
        return Promise.resolve(new common_1.IncompatibleProjectError(messageKey));
    }
}
//# sourceMappingURL=projectVersionChecker.js.map