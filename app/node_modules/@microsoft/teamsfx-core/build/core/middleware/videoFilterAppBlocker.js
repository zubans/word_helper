// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VideoFilterAppBlockerMW = exports.isVideoFilterProject = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const ManifestUtils_1 = require("../../component/driver/teamsApp/utils/ManifestUtils");
const common_1 = require("../../error/common");
const userTasksToBlock = [
    // Teams: Add features
    {
        namespace: "fx-solution-azure",
        method: "addFeature",
    },
    // Teams: Zip Teams metadata package
    {
        namespace: "fx-solution-azure",
        method: "buildPackage",
    },
    // Teams: Validate manifest file
    {
        namespace: "fx-solution-azure",
        method: "validateManifest",
    },
];
async function isVideoFilterProject(projectPath) {
    var _a;
    let manifestResult;
    try {
        manifestResult = await ManifestUtils_1.manifestUtils.readAppManifest(projectPath);
    }
    catch (e) {
        return (0, teamsfx_api_1.err)((0, common_1.assembleError)(e));
    }
    if (manifestResult.isErr()) {
        return (0, teamsfx_api_1.err)(manifestResult.error);
    }
    const manifest = manifestResult.value;
    return (0, teamsfx_api_1.ok)(((_a = manifest.meetingExtensionDefinition) === null || _a === void 0 ? void 0 : _a.videoFiltersConfigurationUrl) !== undefined);
}
exports.isVideoFilterProject = isVideoFilterProject;
async function shouldBlockExecution(ctx) {
    const inputs = ctx.arguments[ctx.arguments.length - 1];
    if (!inputs.projectPath) {
        return false;
    }
    if (ctx.method === "executeUserTask") {
        let shouldBlockUserTask = false;
        const func = ctx.arguments[0];
        for (const item of userTasksToBlock) {
            if ((func === null || func === void 0 ? void 0 : func.namespace) === item.namespace && (func === null || func === void 0 ? void 0 : func.method) === item.method) {
                shouldBlockUserTask = true;
                break;
            }
        }
        if (!shouldBlockUserTask) {
            return false;
        }
    }
    const result = await isVideoFilterProject(inputs.projectPath);
    // Ignore errors and assume this project is not a video filter project
    return result.isOk() && result.value;
}
/**
 * This middleware will block remote operations (provision/deploy/...) since we don't support these operations for now.
 */
const VideoFilterAppBlockerMW = async (ctx, next) => {
    let shouldBlock;
    try {
        shouldBlock = await shouldBlockExecution(ctx);
    }
    catch (e) {
        // Ignore errors and assume this project is not a video filter project
        shouldBlock = false;
    }
    if (shouldBlock) {
        ctx.result = (0, teamsfx_api_1.err)(new common_1.VideoFilterAppRemoteNotSupportedError());
        return;
    }
    else {
        await next();
    }
};
exports.VideoFilterAppBlockerMW = VideoFilterAppBlockerMW;
//# sourceMappingURL=videoFilterAppBlocker.js.map