"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendErrorTelemetryThenReturnError = exports.CoreTelemetryProperty = exports.CoreTelemetryEvent = exports.CoreTelemetryComponentName = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const stringUtils_1 = require("../common/stringUtils");
const telemetry_1 = require("../common/telemetry");
exports.CoreTelemetryComponentName = "core";
var CoreTelemetryEvent;
(function (CoreTelemetryEvent) {
    CoreTelemetryEvent["CreateStart"] = "create-start";
    CoreTelemetryEvent["Create"] = "create";
    CoreTelemetryEvent["CreateFromTdpStart"] = "create-tdp-start";
})(CoreTelemetryEvent = exports.CoreTelemetryEvent || (exports.CoreTelemetryEvent = {}));
var CoreTelemetryProperty;
(function (CoreTelemetryProperty) {
    CoreTelemetryProperty["TdpTeamsAppId"] = "tdp-teams-app-id";
    CoreTelemetryProperty["TdpTeamsAppFeatures"] = "tdp-teams-app-features";
})(CoreTelemetryProperty = exports.CoreTelemetryProperty || (exports.CoreTelemetryProperty = {}));
function sendErrorTelemetryThenReturnError(eventName, error, reporter, properties, measurements, errorProps) {
    if (!properties) {
        properties = {};
    }
    if (telemetry_1.TelemetryProperty.Component in properties === false) {
        properties[telemetry_1.TelemetryProperty.Component] = exports.CoreTelemetryComponentName;
    }
    properties[telemetry_1.TelemetryProperty.Success] = telemetry_1.TelemetrySuccess.No;
    if (error instanceof teamsfx_api_1.UserError) {
        properties[telemetry_1.TelemetryProperty.ErrorType] = telemetry_1.TelemetryErrorType.UserError;
    }
    else {
        properties[telemetry_1.TelemetryProperty.ErrorType] = telemetry_1.TelemetryErrorType.SystemError;
    }
    properties[telemetry_1.TelemetryProperty.ErrorCode] = `${error.source}.${error.name}`;
    properties[telemetry_1.TelemetryProperty.ErrorMessage] = (0, stringUtils_1.maskSecret)(error.message);
    reporter === null || reporter === void 0 ? void 0 : reporter.sendTelemetryErrorEvent(eventName, properties, measurements, errorProps);
    return error;
}
exports.sendErrorTelemetryThenReturnError = sendErrorTelemetryThenReturnError;
//# sourceMappingURL=telemetry.js.map