"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.DownloadBicepCliError = exports.ConvertArmOutputError = exports.GetArmDeploymentError = exports.DeployArmError = exports.CompileBicepError = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const localizeUtils_1 = require("../common/localizeUtils");
const types_1 = require("./types");
/**
 * Failed to compile bicep into ARM template
 */
class CompileBicepError extends teamsfx_api_1.UserError {
    constructor(filePath, error) {
        const key = "error.arm.CompileBicepError";
        const errorOptions = {
            source: "armDeploy",
            name: "CompileBicepError",
            message: (0, localizeUtils_1.getDefaultString)(key, filePath, error.message || ""),
            displayMessage: (0, localizeUtils_1.getLocalizedString)(key, filePath, error.message || ""),
            categories: [types_1.ErrorCategory.Internal],
            error: error,
        };
        super(errorOptions);
    }
}
exports.CompileBicepError = CompileBicepError;
/**
 * Failed to deploy arm templates for some reason
 */
class DeployArmError extends teamsfx_api_1.UserError {
    constructor(deployName, resourceGroup, error) {
        const key = "error.arm.DeployArmError";
        const errorOptions = {
            source: "armDeploy",
            name: "DeployArmError",
            message: (0, localizeUtils_1.getDefaultString)(key, deployName, resourceGroup, error.message || ""),
            displayMessage: (0, localizeUtils_1.getLocalizedString)(key + ".Notification", deployName, resourceGroup),
            error: error,
            categories: [types_1.ErrorCategory.External],
        };
        super(errorOptions);
    }
}
exports.DeployArmError = DeployArmError;
/**
 * Failed to deploy arm templates and get error message failed
 */
class GetArmDeploymentError extends teamsfx_api_1.UserError {
    constructor(deployName, resourceGroup, deployError, getError) {
        const errorOptions = {
            source: "armDeploy",
            name: "GetArmDeploymentError",
            message: (0, localizeUtils_1.getDefaultString)("error.arm.GetArmDeploymentError", deployName, resourceGroup, deployError.message || "", getError.message || "", resourceGroup),
            displayMessage: (0, localizeUtils_1.getLocalizedString)("error.arm.DeployArmError.Notification", deployName, resourceGroup),
            categories: [types_1.ErrorCategory.External],
            error: deployError,
        };
        super(errorOptions);
    }
}
exports.GetArmDeploymentError = GetArmDeploymentError;
/**
 * Failed to convert ARM deployment result to action output
 */
class ConvertArmOutputError extends teamsfx_api_1.UserError {
    constructor(outputKey) {
        const key = "error.arm.ConvertArmOutputError";
        const errorOptions = {
            source: "armDeploy",
            name: "ConvertArmOutputError",
            message: (0, localizeUtils_1.getDefaultString)(key, outputKey),
            displayMessage: (0, localizeUtils_1.getLocalizedString)(key, outputKey),
            categories: [types_1.ErrorCategory.Internal],
        };
        super(errorOptions);
    }
}
exports.ConvertArmOutputError = ConvertArmOutputError;
/**
 * Failed to download to action output
 */
class DownloadBicepCliError extends teamsfx_api_1.UserError {
    constructor(url, error) {
        const key = "error.arm.DownloadBicepCliError";
        const errorOptions = {
            source: "armDeploy",
            name: "DownloadBicepCliError",
            message: (0, localizeUtils_1.getDefaultString)(key, url, error.message),
            displayMessage: (0, localizeUtils_1.getLocalizedString)(key, url, error.message),
            categories: [types_1.ErrorCategory.External],
            error: error,
        };
        super(errorOptions);
    }
}
exports.DownloadBicepCliError = DownloadBicepCliError;
//# sourceMappingURL=arm.js.map