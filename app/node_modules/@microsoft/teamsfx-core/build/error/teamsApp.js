"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppIdNotExist = exports.InvalidFileOutsideOfTheDirectotryError = exports.CheckSideloadingPermissionFailedError = exports.DeveloperPortalAPIFailedUserError = exports.DeveloperPortalAPIFailedSystemError = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const localizeUtils_1 = require("../common/localizeUtils");
const types_1 = require("./types");
const constants_1 = require("../component/driver/teamsApp/constants");
const common_1 = require("./common");
class DeveloperPortalAPIFailedSystemError extends teamsfx_api_1.SystemError {
    constructor(e, correlationId, apiName, extraData, displayMessage) {
        if (!displayMessage) {
            displayMessage = (0, common_1.matchDnsError)(e.message);
        }
        const errorOptions = {
            source: constants_1.Constants.PLUGIN_NAME,
            error: e,
            message: (0, localizeUtils_1.getDefaultString)(
            // github issue workflow uses this template for matching. Please send a heads-up to the owner of workflows if you want to change it.
            "error.appstudio.apiFailed.telemetry", e.name, e.message, apiName, correlationId, extraData),
            displayMessage: displayMessage || (0, localizeUtils_1.getLocalizedString)("error.appstudio.apiFailed"),
            categories: [types_1.ErrorCategory.Unhandled, apiName],
        };
        super(errorOptions);
    }
}
exports.DeveloperPortalAPIFailedSystemError = DeveloperPortalAPIFailedSystemError;
class DeveloperPortalAPIFailedUserError extends teamsfx_api_1.UserError {
    constructor(e, correlationId, apiName, extraData, displayMessage, helpLink) {
        const errorOptions = {
            source: constants_1.Constants.PLUGIN_NAME,
            error: e,
            message: (0, localizeUtils_1.getDefaultString)(
            // github issue workflow uses this template for matching. Please send a heads-up to the owner of workflows if you want to change it.
            "error.appstudio.apiFailed.telemetry", e.name, e.message, apiName, correlationId, extraData),
            displayMessage: displayMessage || (0, localizeUtils_1.getLocalizedString)("error.appstudio.apiFailed"),
            categories: [types_1.ErrorCategory.Unhandled, apiName],
            helpLink: helpLink,
        };
        super(errorOptions);
    }
}
exports.DeveloperPortalAPIFailedUserError = DeveloperPortalAPIFailedUserError;
class CheckSideloadingPermissionFailedError extends teamsfx_api_1.SystemError {
    constructor(e, correlationId, apiName, extraData) {
        const errorOptions = {
            source: "M365Account",
            error: e,
            message: (0, localizeUtils_1.getDefaultString)("error.appstudio.apiFailed.telemetry", e.name, e.message, apiName, correlationId, extraData),
            categories: [types_1.ErrorCategory.External],
        };
        super(errorOptions);
    }
}
exports.CheckSideloadingPermissionFailedError = CheckSideloadingPermissionFailedError;
class InvalidFileOutsideOfTheDirectotryError extends teamsfx_api_1.UserError {
    constructor(filePath) {
        const errorOptions = {
            source: constants_1.Constants.PLUGIN_NAME,
            message: (0, localizeUtils_1.getDefaultString)("error.teamsApp.createAppPackage.invalidFile", filePath),
            displayMessage: (0, localizeUtils_1.getLocalizedString)("error.teamsApp.createAppPackage.invalidFile", filePath),
            categories: [types_1.ErrorCategory.External],
        };
        super(errorOptions);
    }
}
exports.InvalidFileOutsideOfTheDirectotryError = InvalidFileOutsideOfTheDirectotryError;
class AppIdNotExist extends teamsfx_api_1.UserError {
    constructor(appId, source) {
        super({
            source: source || "core",
            name: AppIdNotExist.name,
            message: (0, localizeUtils_1.getDefaultString)("error.core.appIdNotExist", appId),
            displayMessage: (0, localizeUtils_1.getLocalizedString)("error.core.appIdNotExist", appId),
        });
    }
}
exports.AppIdNotExist = AppIdNotExist;
//# sourceMappingURL=teamsApp.js.map