"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.FindProcessError = exports.DepsCheckerError = exports.VxTestAppValidationError = exports.VxTestAppInvalidInstallOptionsError = exports.NodejsNotRecommendedError = exports.NodejsNotFoundError = exports.NodejsNotLtsError = exports.CopilotDisabledError = exports.SideloadingDisabledError = exports.PortsConflictError = exports.NodejsNotLtsHelpLink = exports.NodejsNotRecommendedHelpLink = exports.NodejsNotFoundHelpLink = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const localizeUtils_1 = require("../common/localizeUtils");
const types_1 = require("./types");
exports.NodejsNotFoundHelpLink = "https://aka.ms/teamsfx-node";
exports.NodejsNotRecommendedHelpLink = "https://aka.ms/teamsfx-node";
exports.NodejsNotLtsHelpLink = "https://aka.ms/teamsfx-node";
class PortsConflictError extends teamsfx_api_1.UserError {
    constructor(ports, occupiedPorts, source) {
        const key = "error.dep.PortsConflictError";
        const errorOptions = {
            source: source || "core",
            name: "PortsConflictError",
            message: (0, localizeUtils_1.getDefaultString)(key, ports.join(", "), occupiedPorts.join(", ")),
            displayMessage: (0, localizeUtils_1.getLocalizedString)(key, ports.join(", "), occupiedPorts.join(", ")),
            categories: [types_1.ErrorCategory.Internal],
            telemetryProperties: {
                ports: ports.join(", "),
                "occupied-ports": occupiedPorts.join(", "),
            },
        };
        super(errorOptions);
    }
}
exports.PortsConflictError = PortsConflictError;
class SideloadingDisabledError extends teamsfx_api_1.UserError {
    constructor(source) {
        const key = "error.dep.SideloadingDisabledError";
        const errorOptions = {
            source: source || "core",
            name: "SideloadingDisabledError",
            message: (0, localizeUtils_1.getDefaultString)(key),
            displayMessage: (0, localizeUtils_1.getLocalizedString)(key),
            categories: [types_1.ErrorCategory.External],
        };
        super(errorOptions);
    }
}
exports.SideloadingDisabledError = SideloadingDisabledError;
class CopilotDisabledError extends teamsfx_api_1.UserError {
    constructor(source) {
        const key = "error.dep.CopilotDisabledError";
        const errorOptions = {
            source: source || "core",
            name: "CopilotDisabledError",
            message: (0, localizeUtils_1.getDefaultString)(key),
            displayMessage: (0, localizeUtils_1.getLocalizedString)(key),
            categories: [types_1.ErrorCategory.External],
        };
        super(errorOptions);
    }
}
exports.CopilotDisabledError = CopilotDisabledError;
class NodejsNotLtsError extends teamsfx_api_1.UserError {
    constructor(version, source) {
        const key = "error.dep.NodejsNotLtsError";
        const errorOptions = {
            source: source || "core",
            name: "NodejsNotLtsError",
            message: (0, localizeUtils_1.getDefaultString)(key, version),
            displayMessage: (0, localizeUtils_1.getLocalizedString)(key, version),
            categories: [types_1.ErrorCategory.Internal],
            helpLink: exports.NodejsNotLtsHelpLink,
            telemetryProperties: {
                "nodejs-version": version,
            },
        };
        super(errorOptions);
    }
}
exports.NodejsNotLtsError = NodejsNotLtsError;
class NodejsNotFoundError extends teamsfx_api_1.UserError {
    constructor(source) {
        const key = "error.dep.NodejsNotFoundError";
        const errorOptions = {
            source: source || "core",
            name: "NodejsNotFoundError",
            message: (0, localizeUtils_1.getDefaultString)(key),
            displayMessage: (0, localizeUtils_1.getLocalizedString)(key),
            categories: [types_1.ErrorCategory.Internal],
            helpLink: exports.NodejsNotFoundHelpLink,
        };
        super(errorOptions);
    }
}
exports.NodejsNotFoundError = NodejsNotFoundError;
class NodejsNotRecommendedError extends teamsfx_api_1.UserError {
    constructor(version, recommendVersion, source) {
        const key = "error.dep.NodejsNotRecommendedError";
        const errorOptions = {
            source: source || "core",
            name: "NodejsNotRecommendedError",
            message: (0, localizeUtils_1.getDefaultString)(key, version, recommendVersion),
            displayMessage: (0, localizeUtils_1.getLocalizedString)(key, version, recommendVersion),
            categories: [types_1.ErrorCategory.Internal],
            telemetryProperties: {
                "nodejs-version": version,
                "nodejs-version-recommended": recommendVersion,
            },
            helpLink: exports.NodejsNotRecommendedHelpLink,
        };
        super(errorOptions);
    }
}
exports.NodejsNotRecommendedError = NodejsNotRecommendedError;
class VxTestAppInvalidInstallOptionsError extends teamsfx_api_1.UserError {
    constructor(source) {
        const key = "error.dep.VxTestAppInvalidInstallOptionsError";
        const errorOptions = {
            source: source || "core",
            name: "VxTestAppInvalidInstallOptionsError",
            message: (0, localizeUtils_1.getDefaultString)(key),
            displayMessage: (0, localizeUtils_1.getLocalizedString)(key),
            categories: [types_1.ErrorCategory.Internal],
        };
        super(errorOptions);
    }
}
exports.VxTestAppInvalidInstallOptionsError = VxTestAppInvalidInstallOptionsError;
class VxTestAppValidationError extends teamsfx_api_1.UserError {
    constructor(source) {
        const key = "error.dep.VxTestAppValidationError";
        const errorOptions = {
            source: source || "core",
            name: "VxTestAppValidationError",
            message: (0, localizeUtils_1.getDefaultString)(key),
            displayMessage: (0, localizeUtils_1.getLocalizedString)(key),
            categories: [types_1.ErrorCategory.Internal],
        };
        super(errorOptions);
    }
}
exports.VxTestAppValidationError = VxTestAppValidationError;
class DepsCheckerError extends teamsfx_api_1.UserError {
    constructor(message, helpLink, source) {
        const errorOptions = {
            source: source || "core",
            name: "DepsCheckerError",
            message: message,
            displayMessage: message,
            categories: [types_1.ErrorCategory.External],
            helpLink: exports.NodejsNotRecommendedHelpLink,
        };
        super(errorOptions);
    }
}
exports.DepsCheckerError = DepsCheckerError;
class FindProcessError extends teamsfx_api_1.SystemError {
    constructor(error, source) {
        const key = "error.dep.FindProcessError";
        const errorOptions = {
            source: source || "core",
            name: "FindProcessError",
            error: error,
            message: (0, localizeUtils_1.getDefaultString)(key, error.message),
            displayMessage: (0, localizeUtils_1.getLocalizedString)(key, error.message),
            categories: [types_1.ErrorCategory.Internal],
        };
        super(errorOptions);
    }
}
exports.FindProcessError = FindProcessError;
//# sourceMappingURL=depCheck.js.map